<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.4">Jekyll</generator><link href="https://sus-admin.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://sus-admin.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2025-05-23T00:52:54+00:00</updated><id>https://sus-admin.github.io/feed.xml</id><title type="html">Shane Logan</title><subtitle>various detailed technical procedures. Based on [*folio](https://github.com/bogoli/-folio) design. </subtitle><entry><title type="html">Cobbler (v3.3.7) Windows Deployment Guide</title><link href="https://sus-admin.github.io/blog/2025/Cobbler-v3.3.7-Windows-Deployment-Guide/" rel="alternate" type="text/html" title="Cobbler (v3.3.7) Windows Deployment Guide"/><published>2025-04-14T00:00:00+00:00</published><updated>2025-04-14T00:00:00+00:00</updated><id>https://sus-admin.github.io/blog/2025/Cobbler-v3.3.7-Windows-Deployment-Guide</id><content type="html" xml:base="https://sus-admin.github.io/blog/2025/Cobbler-v3.3.7-Windows-Deployment-Guide/"><![CDATA[<p>This guide assumes that you have a Fedora 34 server or workstation system configured to run Cobbler v3.3.7 similarly to the <a href="/blog/2024/Cobbler-v3.3.6-Beginners-Guide/">Cobbler v3.3.6 Beginner’s guide</a>.</p> <h2 class="no_toc" id="table-of-contents">Table of Contents</h2> <ol id="markdown-toc"> <li><a href="#objective" id="markdown-toc-objective">Objective</a> <ol> <li><a href="#caveats" id="markdown-toc-caveats">Caveats</a></li> </ol> </li> <li><a href="#cobbler-server-prep" id="markdown-toc-cobbler-server-prep">Cobbler Server Prep</a> <ol> <li><a href="#dependencies" id="markdown-toc-dependencies">Dependencies</a></li> <li><a href="#cobbler-server-settings" id="markdown-toc-cobbler-server-settings">Cobbler Server Settings</a></li> </ol> </li> <li><a href="#windows-10-pxe-deployment" id="markdown-toc-windows-10-pxe-deployment">Windows 10 PXE Deployment</a></li> <li><a href="#windows-11-pxe-deployment" id="markdown-toc-windows-11-pxe-deployment">Windows 11 PXE Deployment</a></li> <li><a href="#tips--troubleshooting" id="markdown-toc-tips--troubleshooting">Tips &amp; Troubleshooting</a></li> </ol> <h2 id="objective">Objective</h2> <p>Starting where the <a href="/blog/2024/Cobbler-v3.3.6-Beginners-Guide/">Beginner’s guide</a> left off, further configure the Cobbler v3.3.7 server to deploy both Windows 10 and Windows 11 via PXE network boot, using the same system and network environment. This guide assumes that you still have <code class="language-plaintext highlighter-rouge">selinux</code> and <code class="language-plaintext highlighter-rouge">firewalld</code> configured and enabled as described in the Beginner’s guide.</p> <h3 id="caveats">Caveats</h3> <ol> <li> <p><strong>IMPORTANT:</strong> There was a frequent issue on PXE clients using VirtualBox UEFI firmware. For this reason, it is recommended to run both Cobbler server and PXE client as either bare metal systems or <a href="https://blogs.vmware.com/workstation/2024/05/vmware-workstation-pro-now-available-free-for-personal-use.html">VMWare Workstation/Fusion</a> or <a href="https://learn.microsoft.com/en-us/windows-server/virtualization/hyper-v/hyper-v-overview">HyperV</a> VMs for UEFI installations.</p> <ul> <li>You may experience different results depending on your Windows or VirtualBox version and settings; more info in the <strong>Tips &amp; Troubleshooting</strong> section below</li> </ul> </li> <li> <p>This guide assumes you have already acquired the Windows 10 and 11 64-bit ISO installation files by using the <a href="https://www.microsoft.com/en-us/software-download/windows10">Windows 10</a> and <a href="https://www.microsoft.com/en-us/software-download/windows11">Windows 11</a> Media Creation Tool</p> <ul> <li> <p>Also on the Windows 11 download page linked above is the minumum system requirements for installing Windows 11, which include UEFI Secure Boot and TPM support, making a <em>supported</em> installation to a VM an advanced topic beyond the scope of this guide.</p> <ul> <li>This guide will provide a workaround for those requirements as a proof of concept, but additional information on deploying via PXE with Secure Boot enabled can be found in Cobbler’s <a href="https://cobbler.readthedocs.io/en/v3.3.7/user-guide/wingen.html">official docs</a>.</li> </ul> </li> </ul> </li> </ol> <h2 id="cobbler-server-prep">Cobbler Server Prep</h2> <p>Enable the Windows support features as well as iPXE configs in Cobbler.</p> <h3 id="dependencies">Dependencies</h3> <p>Install some additional <a href="https://cobbler.readthedocs.io/en/v3.3.7/user-guide/wingen.html#installation-quickstart-guide">dependencies</a> required by Cobbler</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>yum <span class="nb">install</span> <span class="nt">-y</span> samba python-hivex python-pefile wimlib-utils python3-ldap openldap-servers openldap-clients
systemctl <span class="nb">enable </span>smb
</code></pre></div></div> <h3 id="cobbler-server-settings">Cobbler Server Settings</h3> <p>Enable Windows support in Cobbler’s settings, as well as ipxe, if not enabled already</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sed</span> <span class="nt">-i</span> <span class="s1">'s/windows_enabled: false/windows_enabled: true/'</span> /etc/cobbler/settings.d/windows.settings
<span class="nb">sed</span> <span class="nt">-i</span> <span class="s2">"s/enable_ipxe: false/enable_ipxe: true/"</span> /etc/cobbler/settings.yaml
systemctl restart cobblerd
</code></pre></div></div> <p>Download the <code class="language-plaintext highlighter-rouge">wimboot</code> image from iPXE’s GitHub to the Cobbler <code class="language-plaintext highlighter-rouge">loaders</code> directory and sync cobbler</p> <ul> <li>Also, be sure to link the approriate bootloader images to the Cobbler <code class="language-plaintext highlighter-rouge">loaders</code> directory if not done already <em>(since the PXE software included with VMWare Workstation/Fusion and VirtualBox VMs do not support downloads via HTTP)</em>.</li> </ul> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>wget https://github.com/ipxe/wimboot/releases/latest/download/wimboot <span class="nt">-P</span> /var/lib/cobbler/loaders
<span class="nb">ln</span> <span class="nt">-s</span> /usr/share/ipxe/undionly.kpxe /var/lib/cobbler/loaders/.
<span class="nb">ln</span> <span class="nt">-s</span> /usr/share/ipxe/ipxe-x86_64.efi /var/lib/cobbler/loaders/.
<span class="nb">ln</span> <span class="nt">-s</span> /usr/share/ipxe/ipxe-snponly-x86_64.efi /var/lib/cobbler/loaders/.
cobbler <span class="nb">sync</span>
</code></pre></div></div> <p>Edit the <code class="language-plaintext highlighter-rouge">/etc/samba/smb.conf</code> file to match the below text-block</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[global]
        server role = standalone
        log level = 5
        load printers = no
        security = USER
        map to guest = Bad User
        guest account = nobody
[DISTRO]
        path = /var/www/cobbler
        public = yes
        browseable = yes
        writeable = no
        printable = no
</code></pre></div></div> <blockquote> <p>More info on this service and configuration in the <strong>Tips &amp; Troubleshooting</strong> section below</p> </blockquote> <p>Enable and start the SMB service</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>systemctl <span class="nb">enable</span> <span class="nt">--now</span> smb
</code></pre></div></div> <p>Now, fix the <code class="language-plaintext highlighter-rouge">dhcp.template</code> file to properly detect PXE client firmware type during DHCP and enable iPXE chainloading for a more reliable experience on PXE clients.</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sed</span> <span class="nt">-i</span> <span class="s1">'s,filename "http://\\\$cobbler_server/cblr/svc/op/ipxe/system/\\\$iface.owner";,filename "http://\$cobbler_server/cblr/svc/op/ipxe/system/\$iface.owner";\\n            } else if exists system-arch and option system-arch = 00:07 {\\n                filename "ipxe-x86_64.efi";\\n            } else if exists system-arch and option system-arch = 00:08 {\\n                filename "ipxe-x86_64.efi";\\n            } else if exists system-arch and option system-arch = 00:09 {\\n                filename "ipxe-x86_64.efi";,'</span> /etc/cobbler/dhcp.template
</code></pre></div></div> <ul> <li> <p>The above command should edit the below <strong>original</strong> text block to match the following <strong>updated</strong> block in the resulting <code class="language-plaintext highlighter-rouge">dhcp.template</code> file:</p> <ul> <li> <p><strong>original</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>        #if $iface.enable_ipxe:
            if exists user-class and option user-class = "iPXE" {
                filename "http://$cobbler_server/cblr/svc/op/ipxe/system/$iface.owner";
            } else {
                filename "undionly.kpxe";
            }
        #end if
</code></pre></div> </div> </li> <li> <p><strong>updated</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>        #if $iface.enable_ipxe:
            if exists user-class and option user-class = "iPXE" {
                filename "http://$cobbler_server/cblr/svc/op/ipxe/system/$iface.owner";
            } else if exists system-arch and option system-arch = 00:07 {
                filename "ipxe-x86_64.efi";
            } else if exists system-arch and option system-arch = 00:08 {
                filename "ipxe-x86_64.efi";
            } else if exists system-arch and option system-arch = 00:09 {
                filename "ipxe-x86_64.efi";
            } else {
                filename "undionly.kpxe";
            }
        #end if
</code></pre></div> </div> </li> </ul> </li> </ul> <p>Finally, enable SELinux and Firewalld allowances for SMB server</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>setsebool <span class="nt">-P</span> samba_export_all_ro 1
setsebool <span class="nt">-P</span> cobbler_use_cifs 1

firewall-cmd <span class="nt">--permanent</span> <span class="nt">--zone</span><span class="o">=</span>cobbler <span class="nt">--add-service</span><span class="o">=</span>samba
firewall-cmd <span class="nt">--reload</span>
</code></pre></div></div> <h2 id="windows-10-pxe-deployment">Windows 10 PXE Deployment</h2> <p>mount the Windows 10 installation media and import the distro into cobbler:</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">mkdir</span> /mnt/Windows10
mount <span class="nt">-o</span> ro,loop ~/Downloads/Win10_22H2_English_x64.iso /mnt/Windows10
cobbler import <span class="nt">--name</span> Win10 <span class="nt">--path</span> /mnt/Windows10
</code></pre></div></div> <p><strong>Optional:</strong> <em>If</em> the PXE client will use legacy-BIOS firmware <em>(MBR partition scheme)</em> instead of UEFI, toggle <code class="language-plaintext highlighter-rouge">uefi</code> to <code class="language-plaintext highlighter-rouge">false</code> in the Cobbler Profile autoinstallation metadata:</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>cobbler profile edit <span class="nt">--name</span> Win10-x86_64 <span class="nt">--autoinstall-meta</span> <span class="s1">'uefi'</span><span class="o">=</span><span class="s1">'false'</span> <span class="nt">--in-place</span>
</code></pre></div></div> <blockquote> <p>More info in Cobbler’s <a href="https://cobbler.readthedocs.io/en/v3.3.7/user-guide/wingen.html">official docs</a>.</p> </blockquote> <p>Finally, create a new Cobbler System to PXE boot and automatically install Windows 10 Pro, replacing the <em>“aa:bb:cc:dd:ee:ff”</em> with the MAC address of your PXE client, being sure not to use a duplicate MAC or IP addresse of any other Cobbler System, then sync up Cobbler.</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>cobbler system add <span class="nt">--name</span> Win10 <span class="nt">--profile</span> Win10-x86_64 <span class="nt">--mac-address</span> <span class="s2">"aa:bb:cc:dd:ee:ff"</span> <span class="nt">--netboot-enabled</span> <span class="nb">true</span> <span class="nt">--enable-ipxe</span> <span class="nb">true
</span>cobbler <span class="nb">sync</span>
</code></pre></div></div> <p>The <strong>PXE Client</strong> VM can now be powered on, and should automatically boot to PXE and install Windows 10 to the VM HDD using the “autounattended.xml” answerfile template.</p> <ul> <li>See the Tips &amp; Troubleshooting section below for a fix for an issue encountered on the PXE client during the start-net.cmd script on both VirualBox and VMWare VMs</li> </ul> <h2 id="windows-11-pxe-deployment">Windows 11 PXE Deployment</h2> <p>First use the following commands to edit the <code class="language-plaintext highlighter-rouge">startnet.template</code> file in order to bypass Windows 11 hardware requirements for the PXE client.</p> <ul> <li>note that <code class="language-plaintext highlighter-rouge">unix2dos</code> will properly terminate the lines of text individually.</li> </ul> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">CMD1</span><span class="o">=</span><span class="si">$(</span><span class="nb">echo</span> <span class="s1">'reg add HKLM\\SYSTEM\\Setup\\LabConfig /v BypassSecureBootCheck /t REG_DWORD /d 1 /f'</span> | unix2dos<span class="si">)</span>
<span class="nv">CMD2</span><span class="o">=</span><span class="si">$(</span><span class="nb">echo</span> <span class="s1">'reg add HKLM\\SYSTEM\\Setup\\LabConfig /v BypassTPMCheck /t REG_DWORD /d 1 /f'</span> | unix2dos<span class="si">)</span>
<span class="nv">CMD3</span><span class="o">=</span><span class="si">$(</span><span class="nb">echo</span> <span class="s1">'reg add HKLM\\SYSTEM\\Setup\\LabConfig /v BypassRAMCheck /t REG_DWORD /d 1 /f'</span> | unix2dos<span class="si">)</span>
<span class="nv">CMD4</span><span class="o">=</span><span class="si">$(</span><span class="nb">echo</span> <span class="s1">'reg add HKLM\\SYSTEM\\Setup\\LabConfig /v BypassCPUCheck /t REG_DWORD /d 1 /f'</span> | unix2dos<span class="si">)</span>
<span class="nv">CMD5</span><span class="o">=</span><span class="si">$(</span><span class="nb">echo</span> <span class="s1">'reg add HKLM\\SYSTEM\\Setup\\LabConfig /v BypassStorageCheck /t REG_DWORD /d 1 /f'</span> | unix2dos<span class="si">)</span>
<span class="nv">CMD6</span><span class="o">=</span><span class="si">$(</span><span class="nb">echo</span> <span class="s1">'\$distro_share\\sources\\setup.exe \$unattended'</span> | unix2dos<span class="si">)</span>
<span class="nb">sed</span> <span class="nt">-i</span> <span class="nt">-E</span> <span class="s2">"s,^#else.?</span><span class="nv">$,</span><span class="s2">#else if </span><span class="se">\$</span><span class="s2">os_version == </span><span class="se">\"</span><span class="s2">11</span><span class="se">\"\n</span><span class="k">${</span><span class="nv">CMD1</span><span class="k">}</span><span class="se">\n</span><span class="k">${</span><span class="nv">CMD2</span><span class="k">}</span><span class="se">\n</span><span class="k">${</span><span class="nv">CMD3</span><span class="k">}</span><span class="se">\n</span><span class="k">${</span><span class="nv">CMD4</span><span class="k">}</span><span class="se">\n</span><span class="k">${</span><span class="nv">CMD5</span><span class="k">}</span><span class="se">\n</span><span class="k">${</span><span class="nv">CMD6</span><span class="k">}</span><span class="se">\n</span><span class="s2">#else,"</span> /etc/cobbler/windows/startnet.template
</code></pre></div></div> <p>Now, take similar steps as with Windows 10 to import and automatically deploy Windows 11 Pro over PXE.</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">mkdir</span> /mnt/Windows11
mount <span class="nt">-o</span> ro,loop ~/Downloads/Win11_24H2_English_x64.iso /mnt/Windows11
cobbler import <span class="nt">--name</span> Win11 <span class="nt">--path</span> /mnt/Windows11
cobbler system add <span class="nt">--name</span> Win11 <span class="nt">--profile</span> Win11-x86_64 <span class="nt">--mac-address</span> <span class="s2">"aa:bb:cc:dd:ee:ff"</span> <span class="nt">--netboot-enabled</span> <span class="nb">true</span> <span class="nt">--enable-ipxe</span> <span class="nb">true
</span>cobbler <span class="nb">sync</span>
</code></pre></div></div> <p>The <strong>PXE Client</strong> VM can now be powered on, and should automatically boot to PXE and install Windows 11 to the VM HDD using the “autounattended.xml” answerfile template.</p> <ul> <li>See the Tips &amp; Troubleshooting section below for a fix for an issue encountered on the PXE client during the start-net.cmd script on both VirualBox and VMWare VMs</li> </ul> <h2 id="tips--troubleshooting">Tips &amp; Troubleshooting</h2> <ol> <li> <p>The <a href="/blog/2024/Cobbler-v3.3.6-Beginners-Guide/">Cobbler 3.3.6 Beginner’s Guide</a> <strong>Tips &amp; Troubleshooting</strong> section contains some basic recommendations and limitations of Cobbler which will not be repeated here.</p> </li> <li> <p>It’s important to understand how Cobbler manages Windows distros and deployments <em>by default</em>, as there are certain limitations and implications not present with other distros.</p> <ul> <li> <p>Cobbler has 3 main templates for Windows distro management, all located in <code class="language-plaintext highlighter-rouge">/etc/cobbler/windows</code> directory, instead of the usual <code class="language-plaintext highlighter-rouge">/var/lib/cobbler/templates</code> and <code class="language-plaintext highlighter-rouge">/var/lib/cobbler/scripts</code> directories</p> <ul> <li> <p><code class="language-plaintext highlighter-rouge">startnet.template</code>: archived/compressed into the WindPE Windows image in order to start Windows <code class="language-plaintext highlighter-rouge">setup.exe</code> with the associated <strong>profile’s</strong> Answerfile</p> </li> <li> <p><code class="language-plaintext highlighter-rouge">answerfile.template</code>: Answerfile with <strong>profile</strong> attributes to be retrieved over SMB for unattended installations.</p> </li> <li> <p><code class="language-plaintext highlighter-rouge">post_ins_cmd.template</code>: Used to retrieve the <code class="language-plaintext highlighter-rouge">autoinstall</code> file (post-install script) defined for the <strong>profile</strong></p> <ul> <li>By default, the autoinstall file <code class="language-plaintext highlighter-rouge">/var/lib/cobbler/templates/win.ks</code> has no effect.</li> </ul> </li> </ul> </li> <li> <p>The above templates are generated based on the automatic installation metadata for <strong>profiles</strong> which define the parameters for the boot options, answerfile, and post-install script <em>(as well as toggle UEFI partitioning mode in answerfiles and change PXE clients to download boot files over TFTP instead of HTTP)</em></p> <ul> <li>The <code class="language-plaintext highlighter-rouge">autoinstall-meta</code> parameters can be configured at the <code class="language-plaintext highlighter-rouge">cobbler system</code> (or <code class="language-plaintext highlighter-rouge">profile</code>) level and given unique names to generate different files for use by diffrent profiles or systems, but neither the <code class="language-plaintext highlighter-rouge">answerfile.template</code> or <code class="language-plaintext highlighter-rouge">post_inst_cmd.template</code> files are system-level aware, they only consist of <strong>profile-level</strong> settings.</li> </ul> </li> <li> <p>There is no way to provide the Windows Answerfile in boot/kernel parameters like many linux distros</p> <ul> <li><a href="https://learn.microsoft.com/en-us/windows-hardware/manufacture/desktop/windows-setup-automation-overview#implicit-answer-file-search-order">Windows Setup implicit answer file search order</a></li> </ul> </li> <li> <p>Only MAC address and other DHCP-related options are used from <em>Windows</em> <code class="language-plaintext highlighter-rouge">cobbler system</code> items.</p> </li> <li> <p>This is all only <em>default</em> behavior in cobbler, and it would be possible to program additional logic into the <code class="language-plaintext highlighter-rouge">startnet.cmd</code> or <code class="language-plaintext highlighter-rouge">post_install.cmd</code> to, for instance, retrieve a diffent answerfile or post-install script based on the hostname (configuratble through DHCP), but that would come with additional limitations and requirements beyond the scope of this guide.</p> </li> </ul> </li> <li> <p><strong>VirtualBox Issues</strong></p> <ul> <li> <p>Specifially, the <code class="language-plaintext highlighter-rouge">ipxe-x86_64.efi</code> bootloader would fail to “initialize devices” and even though using the <code class="language-plaintext highlighter-rouge">ipxe-snponly-x86_64.efi</code> bootloader instead would load properly, the PXE client VM would <em>usually</em> just hang when downloading on of the WinPE files (i.e. <code class="language-plaintext highlighter-rouge">wimboot</code>, <code class="language-plaintext highlighter-rouge">boot.sdi</code>, <code class="language-plaintext highlighter-rouge">bootmgr.exe</code>, <code class="language-plaintext highlighter-rouge">bcd</code>, <code class="language-plaintext highlighter-rouge">winpe.wim</code>)</p> <ul> <li> <p>Tried several troubleshooting steps and could not get a consistent fix:</p> <ul> <li> <p>Tried different virtual network adapters.</p> <ul> <li>Using the “Paravirtualized Network (virtio-net)” adapter did resove this issue with the iPXE boot process and load into the WinPE/wimboot image successfully, but then did not detect any network adapters and failed to begin Windows Setup; further troubleshooting would be beyond the scope of this guide.</li> </ul> </li> <li> <p>Tried running PXE client on another host PC with different VirtualBox version</p> </li> <li> <p>Tried installing the appropriate VirtualBox Extensions for my version of VB.</p> </li> <li> <p>Disabled Memory Isolation in Windows Security on VirtualBox Host.</p> </li> <li> <p>Tried with and without “Virtual Machine Platform” and “Windows Hypervisor Platform” Windows Features installed/enabled.</p> </li> <li> <p>Found no relevant entries/errors in VirtualBox VM logs and nothing abnormal in Cobbler server logs (HTTP, TFTP, DHCP).</p> </li> </ul> </li> </ul> </li> <li> <p>A live Windows 10 installation can be easily converted from MBR (legacy-BIOS) to GPT (UEFI) via powershell commands, which can be used as a workaround for compatibility with VirtualBox UEFI firmware</p> <ul> <li>source: <a href="https://www.windowscentral.com/how-convert-mbr-disk-gpt-move-bios-uefi-windows-10">mbr2gpt</a>.</li> </ul> </li> </ul> </li> <li> <p><strong>start-net.cmd issue</strong></p> <ul> <li> <p>The <code class="language-plaintext highlighter-rouge">smb</code> linux service used to host the installation files for the PXE client on the Cobbler server would be unresponsive during some installations, primarily when running the <code class="language-plaintext highlighter-rouge">startnet.cmd</code> script on the PXE client to start Windows Setup, which caused the installation to stall and error-out occasionally.</p> <ul> <li> <p>After reading through the manpage (<code class="language-plaintext highlighter-rouge">man smb.conf</code>) and trying several different configurations the problem persisted</p> </li> <li> <p>Make the following edit to the <code class="language-plaintext highlighter-rouge">startnet.template</code> file to account for this occasional unresponsiveness/lag from the SMB server when booting into setup by first probing the SMB share until it responds.</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">CMD</span><span class="o">=</span><span class="si">$(</span><span class="nb">echo</span> <span class="s1">'dir \$distros_dir || GOTO wno20'</span> | unix2dos<span class="si">)</span>
<span class="nb">sed</span> <span class="nt">-i</span> <span class="s2">"s,net use z:,</span><span class="k">${</span><span class="nv">CMD</span><span class="k">}</span><span class="se">\n</span><span class="s2">net use z:,"</span> /etc/cobbler/windows/startnet.template
</code></pre></div> </div> </li> </ul> </li> </ul> </li> <li> <p>References</p> <ul> <li> <p><a href="https://learn.microsoft.com/en-us/windows-hardware/manufacture/desktop/windows-setup-automation-overview">https://learn.microsoft.com/en-us/windows-hardware/manufacture/desktop/windows-setup-automation-overview</a></p> </li> <li> <p><a href="https://learn.microsoft.com/en-us/windows-hardware/manufacture/desktop/automate-windows-setup">https://learn.microsoft.com/en-us/windows-hardware/manufacture/desktop/automate-windows-setup</a></p> </li> <li> <p><a href="https://learn.microsoft.com/en-us/windows-hardware/customize/desktop/unattend/">https://learn.microsoft.com/en-us/windows-hardware/customize/desktop/unattend/</a></p> </li> <li> <p><a href="https://learn.microsoft.com/en-us/windows-hardware/customize/desktop/wsim/answer-files-overview">https://learn.microsoft.com/en-us/windows-hardware/customize/desktop/wsim/answer-files-overview</a></p> </li> <li> <p><a href="https://learn.microsoft.com/en-us/windows-hardware/manufacture/desktop/update-windows-settings-and-scripts-create-your-own-answer-file-sxs">https://learn.microsoft.com/en-us/windows-hardware/manufacture/desktop/update-windows-settings-and-scripts-create-your-own-answer-file-sxs</a></p> </li> <li> <p><a href="https://learn.microsoft.com/en-us/windows-hardware/manufacture/desktop/windows-setup-log-files-and-event-logs">https://learn.microsoft.com/en-us/windows-hardware/manufacture/desktop/windows-setup-log-files-and-event-logs</a></p> </li> <li> <p><a href="https://learn.microsoft.com/en-us/windows-server/security/guarded-fabric-shielded-vm/guarded-fabric-sample-unattend-xml-file">https://learn.microsoft.com/en-us/windows-server/security/guarded-fabric-shielded-vm/guarded-fabric-sample-unattend-xml-file</a></p> </li> <li> <p><a href="https://learn.microsoft.com/en-us/windows-hardware/customize/desktop/oobexml-in-windows-11">https://learn.microsoft.com/en-us/windows-hardware/customize/desktop/oobexml-in-windows-11</a></p> </li> <li> <p><a href="https://learn.microsoft.com/en-us/windows-hardware/customize/desktop/customize-oobe-in-windows-11">https://learn.microsoft.com/en-us/windows-hardware/customize/desktop/customize-oobe-in-windows-11</a></p> </li> <li> <p><a href="https://learn.microsoft.com/en-us/windows-hardware/manufacture/desktop/configure-oobexml">https://learn.microsoft.com/en-us/windows-hardware/manufacture/desktop/configure-oobexml</a></p> </li> <li> <p><a href="https://learn.microsoft.com/en-us/windows-hardware/manufacture/desktop/oobexml-settings">https://learn.microsoft.com/en-us/windows-hardware/manufacture/desktop/oobexml-settings</a></p> </li> <li> <p><a href="https://learn.microsoft.com/en-us/windows-hardware/manufacture/desktop/how-oobexml-works">https://learn.microsoft.com/en-us/windows-hardware/manufacture/desktop/how-oobexml-works</a></p> </li> <li> <p><a href="https://learn.microsoft.com/en-us/windows-hardware/customize/desktop/unattend/microsoft-windows-shell-setup-useraccounts">https://learn.microsoft.com/en-us/windows-hardware/customize/desktop/unattend/microsoft-windows-shell-setup-useraccounts</a></p> </li> <li> <p><a href="https://learn.microsoft.com/en-us/windows-hardware/customize/desktop/unattend/microsoft-windows-unattendedjoin-identification-joindomain">https://learn.microsoft.com/en-us/windows-hardware/customize/desktop/unattend/microsoft-windows-unattendedjoin-identification-joindomain</a></p> </li> <li> <p><a href="https://learn.microsoft.com/en-us/windows-hardware/customize/desktop/unattend/microsoft-windows-shell-setup-oobe-vmmodeoptimizations-skipadministratorprofileremoval">https://learn.microsoft.com/en-us/windows-hardware/customize/desktop/unattend/microsoft-windows-shell-setup-oobe-vmmodeoptimizations-skipadministratorprofileremoval</a></p> </li> <li> <p><a href="https://learn.microsoft.com/en-us/windows-hardware/customize/desktop/unattend/microsoft-windows-shell-setup-oobe-hideonlineaccountscreens">https://learn.microsoft.com/en-us/windows-hardware/customize/desktop/unattend/microsoft-windows-shell-setup-oobe-hideonlineaccountscreens</a></p> </li> <li> <p><a href="https://learn.microsoft.com/en-us/windows-hardware/manufacture/desktop/windows-setup-log-files-and-event-logs">https://learn.microsoft.com/en-us/windows-hardware/manufacture/desktop/windows-setup-log-files-and-event-logs</a></p> </li> <li> <p><a href="https://learn.microsoft.com/en-us/windows-hardware/manufacture/desktop/windows-setup-log-files-and-event-logs">https://learn.microsoft.com/en-us/windows-hardware/manufacture/desktop/windows-setup-log-files-and-event-logs</a></p> </li> <li> <p><a href="https://learn.microsoft.com/en-us/windows/deployment/configure-a-pxe-server-to-load-windows-pe">https://learn.microsoft.com/en-us/windows/deployment/configure-a-pxe-server-to-load-windows-pe</a></p> </li> <li> <p><a href="https://ipxe.org/howto/winpe">https://ipxe.org/howto/winpe</a></p> </li> <li> <p><a href="https://cobbler.readthedocs.io/en/latest/user-guide/wingen.html">https://cobbler.readthedocs.io/en/latest/user-guide/wingen.html</a></p> <ul> <li><a href="https://cobbler.readthedocs.io/en/latest/code-autodoc/cobbler.modules.html#module-cobbler.modules.sync_post_wingen">https://cobbler.readthedocs.io/en/latest/code-autodoc/cobbler.modules.html#module-cobbler.modules.sync_post_wingen</a></li> </ul> </li> <li> <p><a href="https://learn.microsoft.com/en-us/windows-hardware/manufacture/desktop/winpe-intro">https://learn.microsoft.com/en-us/windows-hardware/manufacture/desktop/winpe-intro</a></p> </li> <li> <p><a href="https://learn.microsoft.com/en-us/windows-hardware/manufacture/desktop/automate-windows-setup">https://learn.microsoft.com/en-us/windows-hardware/manufacture/desktop/automate-windows-setup</a></p> </li> <li> <p><a href="https://learn.microsoft.com/en-us/windows-hardware/manufacture/desktop/windows-setup-command-line-options">https://learn.microsoft.com/en-us/windows-hardware/manufacture/desktop/windows-setup-command-line-options</a></p> </li> </ul> </li> </ol>]]></content><author><name>Sus-Admin</name></author><category term="cobbler"/><summary type="html"><![CDATA[This guide assumes that you have a Fedora 34 server or workstation system configured to run Cobbler v3.3.7 similarly to the Cobbler v3.3.6 Beginner’s guide.]]></summary></entry><entry><title type="html">Cobbler (v3.3.7) OpenSUSE Deployment Guide</title><link href="https://sus-admin.github.io/blog/2024/Cobbler-v3.3.7-OpenSUSE-Deployment-Guide/" rel="alternate" type="text/html" title="Cobbler (v3.3.7) OpenSUSE Deployment Guide"/><published>2024-12-11T00:00:00+00:00</published><updated>2024-12-11T00:00:00+00:00</updated><id>https://sus-admin.github.io/blog/2024/Cobbler-v3.3.7-OpenSUSE-Deployment-Guide</id><content type="html" xml:base="https://sus-admin.github.io/blog/2024/Cobbler-v3.3.7-OpenSUSE-Deployment-Guide/"><![CDATA[<p>This guide assumes that you have a Fedora 34 server or workstation system configured to run Cobbler v3.3.7 similarly to the <a href="/blog/2024/Cobbler-v3.3.6-Beginners-Guide/">Cobbler v3.3.6 Beginner’s guide</a>.</p> <h2 class="no_toc" id="table-of-contents">Table of Contents</h2> <ol id="markdown-toc"> <li><a href="#objective" id="markdown-toc-objective">Objective</a></li> <li><a href="#opensuse-leap-15-pxe-deployment" id="markdown-toc-opensuse-leap-15-pxe-deployment">OpenSUSE Leap 15 PXE Deployment</a></li> <li><a href="#taking-it-further-leap-micro-deployment" id="markdown-toc-taking-it-further-leap-micro-deployment">Taking it Further (Leap Micro Deployment)</a></li> <li><a href="#tips--troubleshooting" id="markdown-toc-tips--troubleshooting">Tips &amp; Troubleshooting</a></li> </ol> <h2 id="objective">Objective</h2> <p>Starting where the <a href="/blog/2024/Cobbler-v3.3.6-Beginners-Guide/">Beginner’s guide</a> left off, further configure the Cobbler v3.3.7 server to deploy OpenSUSE Leap 15 <em>server</em> via PXE network boot, using the same system and network environment. This guide assumes that you still have <code class="language-plaintext highlighter-rouge">selinux</code> and <code class="language-plaintext highlighter-rouge">firewalld</code> configured and enabled as described in the Beginner’s guide.</p> <h2 id="opensuse-leap-15-pxe-deployment">OpenSUSE Leap 15 PXE Deployment</h2> <p>This guide has been tested with openSUSE Leap 15.4, 15.5, &amp; 15.6, which can be obtained from the sites below:</p> <ul> <li> <p><a href="https://download.opensuse.org/distribution/leap/">download.opensuse.org</a></p> </li> <li> <p><a href="https://provo-mirror.opensuse.org/distribution/leap/">provo-mirror.opensuse.org</a></p> </li> <li> <p><a href="https://cdimage.debian.org/mirror/opensuse.org/distribution/leap/">cdimage.debian.org</a></p> </li> </ul> <p>This guide will detail Leap 15.6 specifically; start by downloading the installation media on the Cobbler server:</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cd</span> ~/Downloads
wget https://provo-mirror.opensuse.org/distribution/leap/15.6/iso/openSUSE-Leap-15.6-DVD-x86_64-Media.iso
</code></pre></div></div> <p>Mount the installation media and run the <code class="language-plaintext highlighter-rouge">cobbler import</code>:</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span> <span class="nt">-d</span> /mnt/SUSE <span class="o">]</span> <span class="o">||</span> <span class="nb">mkdir</span> /mnt/SUSE
mount <span class="nt">-t</span> iso9660 <span class="nt">-o</span> loop,ro ~/Downloads/openSUSE-Leap-15.6-DVD-x86_64-Media.iso /mnt/SUSE
cobbler import <span class="nt">--name</span><span class="o">=</span>SUSE-15.6 <span class="nt">--arch</span><span class="o">=</span>x86_64 <span class="nt">--path</span><span class="o">=</span>/mnt/SUSE
</code></pre></div></div> <p>Update the <code class="language-plaintext highlighter-rouge">kernel-options</code> for the newly imported Cobbler Distro:</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>cobbler distro edit <span class="nt">--name</span> SUSE-15.6-x86_64 <span class="nt">--kernel-options</span> <span class="s1">'install=$tree'</span>
</code></pre></div></div> <p>Create the necessary autoinstall template files, based on the originals included with cobbler, to generate a compatible <code class="language-plaintext highlighter-rouge">autoyast.xml</code> autoinstall file</p> <ul> <li><strong>TIP:</strong> execute the below text blocks on the Cobbler server CLI one-by-one exactly as shown below to edit the files appropriately; the final files (including the optional chagnes made in the next step) will be included at the very bottom of this guide for reference</li> </ul> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cat</span> /var/lib/cobbler/templates/sample_autoyast.xml | <span class="se">\</span>
    <span class="nb">sed</span> <span class="s1">'s,english,us,'</span> | <span class="se">\</span>
    <span class="nb">grep</span> <span class="nt">-v</span> runlevel | <span class="nb">grep</span> <span class="nt">-v</span> <span class="s2">"&lt;default&gt;3&lt;/default&gt;"</span> | <span class="se">\</span>
    <span class="nb">sed</span> <span class="s1">'s,networking.xml,suse-15.6-networking.xml,'</span> | <span class="se">\</span>
    <span class="nb">sed</span> <span class="s1">'s,suse_scriptwrapper.xml,suse-15.6_scriptwrapper.xml,'</span> | <span class="se">\</span>
    <span class="nb">tee</span> /var/lib/cobbler/templates/suse-15.6-autoyast.xml
</code></pre></div></div> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cat</span> /var/lib/cobbler/snippets/networking.xml | <span class="se">\</span>
    <span class="nb">grep</span> <span class="nt">-v</span> dhcp_resolv | <span class="se">\</span>
    <span class="nb">sed</span> <span class="s1">'s,^.*&lt;keep_install_network.*/keep_install_network&gt;,## Figure out if we'</span><span class="se">\'</span><span class="s1">'re automating OS installation for a system or a profile\n#if $getVar('</span><span class="se">\'</span><span class="s1">'system_name'</span><span class="se">\'</span><span class="s1">'\,'</span><span class="se">\'\'</span><span class="s1">') != '</span><span class="se">\'\'</span><span class="s1">'\n    &lt;keep_install_network config:type="boolean"&gt;false&lt;/keep_install_network&gt;\n#else\n    &lt;keep_install_network config:type="boolean"&gt;true&lt;/keep_install_network&gt;\n#end if,'</span> | <span class="se">\</span>
    <span class="nb">sed</span> <span class="s1">'s,&lt;managed.*/managed&gt;,&lt;backend&gt;network_manager&lt;/backend&gt;,'</span> | <span class="se">\</span>
    <span class="nb">sed</span> <span class="s1">'s,&lt;nameservers config:type="list"&gt;,#if $name_servers and $name_servers[0] != "":\n      &lt;nameservers config:type="list"&gt;,'</span> | <span class="se">\</span>
    <span class="nb">sed</span> <span class="s1">'s,&lt;/nameservers&gt;,&lt;/nameservers&gt;\n      #end if,'</span> | <span class="se">\</span>
    <span class="nb">sed</span> <span class="s1">'/    &lt;net-udev config:type="list"&gt;/,/    #if $getVar("system_name","") != ""/c\ \ \ \ #if $getVar("system_name","") != ""\n\ \ \ \ &lt;net-udev config:type="list"&gt;'</span> | <span class="se">\</span>
    <span class="nb">sed</span> <span class="nt">-z</span> <span class="s1">'s,#end if\n    &lt;/net-udev&gt;,&lt;/net-udev&gt;\n    #end if,'</span> | <span class="se">\</span>
    <span class="nb">tee</span> /var/lib/cobbler/snippets/suse-15.6-networking.xml
</code></pre></div></div> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cat</span> /var/lib/cobbler/snippets/suse_scriptwrapper.xml | <span class="se">\</span>
    <span class="nb">grep</span> <span class="nt">-v</span> network_needed | <span class="se">\</span>
    <span class="nb">grep</span> <span class="nt">-v</span> interpreter | <span class="se">\</span>
    <span class="nb">tee</span> /var/lib/cobbler/snippets/suse-15.6_scriptwrapper.xml
</code></pre></div></div> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cp</span> /var/lib/cobbler/snippets/autoinstall_start /var/lib/cobbler/snippets/autoinstall_start.bkp
<span class="nb">cp</span> /var/lib/cobbler/snippets/autoinstall_done /var/lib/cobbler/snippets/autoinstall_done.bkp
<span class="nb">sed</span> <span class="nt">-i</span> <span class="nt">-z</span> <span class="s1">'s,#if $run_install_triggers\n        #if $breed == .redhat.,#if $run_install_triggers\n        #if $breed == '</span><span class="se">\'</span><span class="s1">'redhat'</span><span class="se">\'</span><span class="s1">' or $breed == '</span><span class="se">\'</span><span class="s1">'suse'</span><span class="se">\'</span><span class="s1">','</span> /var/lib/cobbler/snippets/autoinstall_start /var/lib/cobbler/snippets/autoinstall_done
</code></pre></div></div> <p>Optionally, further configure the autoyast template to install the <code class="language-plaintext highlighter-rouge">sudo</code>, <code class="language-plaintext highlighter-rouge">openssh</code>, &amp; <code class="language-plaintext highlighter-rouge">chrony</code> packages, setup system NTP client, set the timezone precisely, enable the <code class="language-plaintext highlighter-rouge">sshd</code> systemd service, and configure a new linux user <strong><em>suse</em></strong> with the same password as the root user.</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sed</span> <span class="s1">'s,^  &lt;/language&gt;,  &lt;/language&gt;\n  &lt;timezone&gt;\n    &lt;hwclock&gt;UTC&lt;/hwclock&gt;\n    &lt;timezone&gt;EST5EDT&lt;/timezone&gt;\n  &lt;/timezone&gt;\n  &lt;software&gt;\n    &lt;packages config:type="list"&gt;\n      &lt;package&gt;chrony&lt;/package&gt;\n      &lt;package&gt;sudo&lt;/package&gt;\n      &lt;package&gt;openssh&lt;/package&gt;\n    &lt;/packages&gt;\n  &lt;/software&gt;\n  &lt;services-manager&gt;\n    &lt;services&gt;\n      &lt;enable config:type="list"&gt;\n        &lt;service&gt;sshd&lt;/service&gt;\n      &lt;/enable&gt;\n    &lt;/services&gt;\n  &lt;/services-manager&gt;,'</span> /var/lib/cobbler/templates/suse-15.6-autoyast.xml
<span class="nb">sed</span> <span class="s1">'s,$SNIPPET(.hosts.xml.),$SNIPPET('</span><span class="se">\'</span><span class="s1">'hosts.xml'</span><span class="se">\'</span><span class="s1">')\n  &lt;ntp-client&gt;\n    &lt;ntp_policy&gt;auto&lt;/ntp_policy&gt;\n    &lt;ntp_servers config:type="list"&gt;\n      &lt;ntp_server&gt;\n        &lt;address&gt;us.pool.ntp.org&lt;/address&gt;\n        &lt;iburst config:type="boolean"&gt;false&lt;/iburst&gt;\n        &lt;offline config:type="boolean"&gt;false&lt;/offline&gt;\n      &lt;/ntp_server&gt;\n      &lt;ntp_server&gt;\n        &lt;address&gt;2.opensuse.pool.ntp.org&lt;/address&gt;\n        &lt;iburst config:type="boolean"&gt;false&lt;/iburst&gt;\n        &lt;offline config:type="boolean"&gt;false&lt;/offline&gt;\n      &lt;/ntp_server&gt;\n    &lt;/ntp_servers&gt;\n    &lt;ntp_sync&gt;15&lt;/ntp_sync&gt;\n  &lt;/ntp-client&gt;,'</span> /var/lib/cobbler/templates/suse-15.6-autoyast.xml
<span class="nb">sed</span> <span class="s1">'s,&lt;/user&gt;,&lt;/user&gt;\n    &lt;user&gt;\n      &lt;encrypted config:type="boolean"&gt;true&lt;/encrypted&gt;\n      &lt;username&gt;suse&lt;/username&gt;\n      &lt;user_password&gt;$default_password_crypted&lt;/user_password&gt;\n    &lt;/user&gt;,'</span> /var/lib/cobbler/templates/suse-15.6-autoyast.xml
</code></pre></div></div> <p>Configure the Cobbler Profile to use the new autoinstall (<code class="language-plaintext highlighter-rouge">autoyast.xml</code>) template:</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>cobbler profile edit <span class="nt">--name</span> SUSE-15.6-x86_64 <span class="nt">--autoinstall</span> suse-15.6-autoyast.xml 
</code></pre></div></div> <p>Finally, create a new Cobbler System to automatically boot and install openSUSE Leap 15.6, replacing the <em>“aa:bb:cc:dd:ee:ff”</em> with the MAC address of your PXE client, being sure not to use a duplicate MAC or IP addresse of any other Cobbler System, and then sync up Cobbler:</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>cobbler system add <span class="nt">--name</span> SUSE-15.6 <span class="nt">--profile</span> SUSE-15.6-x86_64 <span class="nt">--netboot-enabled</span> <span class="nb">true</span> <span class="nt">--hostname</span> SUSE-15-6 <span class="nt">--interface</span> eth0 <span class="nt">--static</span> <span class="nb">true</span> <span class="nt">--mac-address</span> <span class="s2">"aa:bb:cc:dd:ee:ff"</span> <span class="nt">--ip-address</span> 10.0.0.15 <span class="nt">--gateway</span> 10.0.0.1 <span class="nt">--netmask</span> 255.255.255.0 <span class="nt">--name-servers</span> <span class="s2">"10.0.0.1 1.1.1.1 10.0.0.10"</span>
cobbler <span class="nb">sync</span>
</code></pre></div></div> <p>The <strong>PXE Client</strong> VM can now be powered on, and should automatically boot to PXE and install openSUSE Leap 15.6 to the VM HDD using the “suse-15.6-autoyast.xml” autoyast template created above.</p> <h2 id="taking-it-further-leap-micro-deployment">Taking it Further (Leap Micro Deployment)</h2> <p>With openSUSE Leap 15 deploying successfully as described above, the Cobbler server is also prepped to deploy openSUSE Leap Micro <em>(v5.5 tested)</em></p> <p>Download the installation media and use the same autoinstall file and options to configure a new Cobbler System for deploying openSUSE Leap Micro 5.5</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cd</span> ~/Downloads <span class="o">&amp;&amp;</span> wget https://slc-mirror.opensuse.org/distribution/leap-micro/5.5/product/iso/openSUSE-Leap-Micro-5.5-DVD-x86_64-Media.iso

mount <span class="nt">-t</span> iso9660 <span class="nt">-o</span> loop,ro ~/Downloads/openSUSE-Leap-Micro-5.5-DVD-x86_64-Media.iso /mnt/SUSE
cobbler import <span class="nt">--name</span><span class="o">=</span>Leap-micro-5.5 <span class="nt">--arch</span><span class="o">=</span>x86_64 <span class="nt">--path</span><span class="o">=</span>/mnt/SUSE

cobbler distro edit <span class="nt">--name</span> Leap-micro-5.5-x86_64 <span class="nt">--kernel-options</span> <span class="s1">'install=$tree'</span>
cobbler profile edit <span class="nt">--name</span> Leap-micro-5.5-x86_64 <span class="nt">--autoinstall</span> suse-15.6-autoyast.xml 
cobbler system add <span class="nt">--name</span> Leap-micro <span class="nt">--profile</span> Leap-micro-5.5-x86_64 <span class="nt">--netboot-enabled</span> <span class="nb">true</span> <span class="nt">--enable-ipxe</span> <span class="nb">false</span> <span class="nt">--hostname</span> Leap-micro <span class="nt">--interface</span> eth0 <span class="nt">--static</span> <span class="nb">true</span> <span class="nt">--mac-address</span> <span class="s2">"aa:bb:cc:dd:ee:ff"</span> <span class="nt">--ip-address</span> 10.0.0.15 <span class="nt">--gateway</span> 10.0.0.1 <span class="nt">--netmask</span> 255.255.255.0 <span class="nt">--name-servers</span> <span class="s2">"10.0.0.1 1.1.1.1 10.0.0.10"</span>
cobbler <span class="nb">sync</span>
</code></pre></div></div> <h2 id="tips--troubleshooting">Tips &amp; Troubleshooting</h2> <ol> <li> <p>The <a href="/blog/2024/Cobbler-v3.3.6-Beginners-Guide/">Cobbler 3.3.6 Beginner’s Guide</a> <strong>Tips &amp; Troubleshooting</strong> section contains some basic recommendations and limitations of Cobbler which will not be repeated here.</p> </li> <li> <p>References</p> <ul> <li> <p><a href="https://cobbler.readthedocs.io/en/v3.3.6/cobblerd.html#autoinstallation-autoyast-kickstart">https://cobbler.readthedocs.io/en/v3.3.6/cobblerd.html#autoinstallation-autoyast-kickstart</a></p> </li> <li> <p><a href="https://doc.opensuse.org/projects/autoyast/">https://doc.opensuse.org/projects/autoyast/</a></p> <ul> <li><a href="https://doc.opensuse.org/projects/autoyast/#CreateProfile-CMS-new">https://doc.opensuse.org/projects/autoyast/#CreateProfile-CMS-new</a></li> </ul> </li> <li> <p><a href="https://doc.opensuse.org/documentation/leap/archive/15.4/autoyast/html/book-autoyast/Invoking.html">https://doc.opensuse.org/documentation/leap/archive/15.4/autoyast/html/book-autoyast/Invoking.html</a></p> </li> <li> <p><a href="https://doc.opensuse.org/documentation/leap/archive/15.4/autoyast/single-html/book-autoyast/">https://doc.opensuse.org/documentation/leap/archive/15.4/autoyast/single-html/book-autoyast/</a></p> </li> <li> <p><a href="https://documentation.suse.com/sles/15-SP5/html/SLES-all/book-autoyast.html">https://documentation.suse.com/sles/15-SP5/html/SLES-all/book-autoyast.html</a></p> </li> <li> <p><a href="https://documentation.suse.com/en-us/sles/15-SP4/html/SLES-all/cha-autoyast-create-control-file.html">https://documentation.suse.com/en-us/sles/15-SP4/html/SLES-all/cha-autoyast-create-control-file.html</a></p> <ul> <li><a href="https://documentation.suse.com/en-us/sles/15-SP4/html/SLES-all/cha-autoyast-create-control-file.html#CreateProfile-Manual">https://documentation.suse.com/en-us/sles/15-SP4/html/SLES-all/cha-autoyast-create-control-file.html#CreateProfile-Manual</a></li> </ul> </li> <li> <p><a href="https://doc.opensuse.org/documentation/leap/archive/15.4/autoyast/single-html/book-autoyast/">https://doc.opensuse.org/documentation/leap/archive/15.4/autoyast/single-html/book-autoyast/</a></p> </li> <li> <p><a href="https://en.opensuse.org/SDB:PXE_boot_installation">https://en.opensuse.org/SDB:PXE_boot_installation</a></p> </li> <li> <p><a href="https://www.suse.com/support/kb/doc/?id=000020329">https://www.suse.com/support/kb/doc/?id=000020329</a></p> </li> <li> <p><a href="https://www.linuxquestions.org/questions/linux-server-73/sles-equivalent-of-root-anaconda-ks-cfg-4175543325/">https://www.linuxquestions.org/questions/linux-server-73/sles-equivalent-of-root-anaconda-ks-cfg-4175543325/</a></p> </li> <li> <p><a href="https://www.w3schools.com/xml/xml_validator.asp">https://www.w3schools.com/xml/xml_validator.asp</a></p> </li> <li> <p><a href="https://forums.opensuse.org/t/pxe-autoyast-15-3-15-4/150848">https://forums.opensuse.org/t/pxe-autoyast-15-3-15-4/150848</a></p> </li> <li> <p><a href="https://opensuse-autoinstall.opensuse.narkive.com/8tBZNWIG/debugging-autoyast">https://opensuse-autoinstall.opensuse.narkive.com/8tBZNWIG/debugging-autoyast</a></p> </li> <li> <p><a href="https://opensuse-autoinstall.opensuse.narkive.com/441KAfMq/how-to-configure-services-using-autoyast">https://opensuse-autoinstall.opensuse.narkive.com/441KAfMq/how-to-configure-services-using-autoyast</a></p> </li> </ul> </li> <li> <p>Edited files</p> <ul> <li> <p><code class="language-plaintext highlighter-rouge">/var/lib/cobbler/templates/suse-15.6-autoyast.xml</code></p> <div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;?xml version="1.0"?&gt;</span>
<span class="cp">&lt;!DOCTYPE profile&gt;</span>
<span class="nt">&lt;profile</span> <span class="na">xmlns=</span><span class="s">"http://www.suse.com/1.0/yast2ns"</span> <span class="na">xmlns:config=</span><span class="s">"http://www.suse.com/1.0/configns"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;deploy_image&gt;</span>
    <span class="nt">&lt;image_installation</span> <span class="na">config:type=</span><span class="s">"boolean"</span><span class="nt">&gt;</span>false<span class="nt">&lt;/image_installation&gt;</span>
  <span class="nt">&lt;/deploy_image&gt;</span>
  ## without the next 6 lines autoyast will ask for confirmation bevore installation
  <span class="nt">&lt;general&gt;</span>
    <span class="nt">&lt;mode&gt;</span>
      <span class="nt">&lt;confirm</span> <span class="na">config:type=</span><span class="s">"boolean"</span><span class="nt">&gt;</span>false<span class="nt">&lt;/confirm&gt;</span>
      <span class="nt">&lt;final_reboot</span> <span class="na">config:type=</span><span class="s">"boolean"</span><span class="nt">&gt;</span>true<span class="nt">&lt;/final_reboot&gt;</span>
    <span class="nt">&lt;/mode&gt;</span>
  <span class="nt">&lt;/general&gt;</span>
  $SNIPPET('addons.xml')
  $SNIPPET('hosts.xml')
  <span class="nt">&lt;ntp-client&gt;</span>
    <span class="nt">&lt;ntp_policy&gt;</span>auto<span class="nt">&lt;/ntp_policy&gt;</span>
    <span class="nt">&lt;ntp_servers</span> <span class="na">config:type=</span><span class="s">"list"</span><span class="nt">&gt;</span>
      <span class="nt">&lt;ntp_server&gt;</span>
        <span class="nt">&lt;address&gt;</span>us.pool.ntp.org<span class="nt">&lt;/address&gt;</span>
        <span class="nt">&lt;iburst</span> <span class="na">config:type=</span><span class="s">"boolean"</span><span class="nt">&gt;</span>false<span class="nt">&lt;/iburst&gt;</span>
        <span class="nt">&lt;offline</span> <span class="na">config:type=</span><span class="s">"boolean"</span><span class="nt">&gt;</span>false<span class="nt">&lt;/offline&gt;</span>
      <span class="nt">&lt;/ntp_server&gt;</span>
      <span class="nt">&lt;ntp_server&gt;</span>
        <span class="nt">&lt;address&gt;</span>2.opensuse.pool.ntp.org<span class="nt">&lt;/address&gt;</span>
        <span class="nt">&lt;iburst</span> <span class="na">config:type=</span><span class="s">"boolean"</span><span class="nt">&gt;</span>false<span class="nt">&lt;/iburst&gt;</span>
        <span class="nt">&lt;offline</span> <span class="na">config:type=</span><span class="s">"boolean"</span><span class="nt">&gt;</span>false<span class="nt">&lt;/offline&gt;</span>
      <span class="nt">&lt;/ntp_server&gt;</span>
    <span class="nt">&lt;/ntp_servers&gt;</span>
    <span class="nt">&lt;ntp_sync&gt;</span>15<span class="nt">&lt;/ntp_sync&gt;</span>
  <span class="nt">&lt;/ntp-client&gt;</span>
  $SNIPPET('kdump.xml')
  <span class="nt">&lt;keyboard&gt;</span>
    <span class="nt">&lt;keymap&gt;</span>us<span class="nt">&lt;/keymap&gt;</span>
  <span class="nt">&lt;/keyboard&gt;</span>
  <span class="nt">&lt;language&gt;</span>
    <span class="nt">&lt;language&gt;</span>en_US<span class="nt">&lt;/language&gt;</span>
    <span class="nt">&lt;languages&gt;&lt;/languages&gt;</span>
  <span class="nt">&lt;/language&gt;</span>
  <span class="nt">&lt;timezone&gt;</span>
    <span class="nt">&lt;hwclock&gt;</span>UTC<span class="nt">&lt;/hwclock&gt;</span>
    <span class="nt">&lt;timezone&gt;</span>EST5EDT<span class="nt">&lt;/timezone&gt;</span>
  <span class="nt">&lt;/timezone&gt;</span>
  <span class="nt">&lt;software&gt;</span>
    <span class="nt">&lt;packages</span> <span class="na">config:type=</span><span class="s">"list"</span><span class="nt">&gt;</span>
      <span class="nt">&lt;package&gt;</span>chrony<span class="nt">&lt;/package&gt;</span>
      <span class="nt">&lt;package&gt;</span>sudo<span class="nt">&lt;/package&gt;</span>
      <span class="nt">&lt;package&gt;</span>openssh<span class="nt">&lt;/package&gt;</span>
    <span class="nt">&lt;/packages&gt;</span>
  <span class="nt">&lt;/software&gt;</span>
  <span class="nt">&lt;services-manager&gt;</span>
    <span class="nt">&lt;services&gt;</span>
      <span class="nt">&lt;enable</span> <span class="na">config:type=</span><span class="s">"list"</span><span class="nt">&gt;</span>
        <span class="nt">&lt;service&gt;</span>sshd<span class="nt">&lt;/service&gt;</span>
      <span class="nt">&lt;/enable&gt;</span>
    <span class="nt">&lt;/services&gt;</span>
  <span class="nt">&lt;/services-manager&gt;</span>
  <span class="nt">&lt;login_settings/&gt;</span>
  $SNIPPET('suse-15.6-networking.xml')
  <span class="nt">&lt;users</span> <span class="na">config:type=</span><span class="s">"list"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;user&gt;</span>
      <span class="nt">&lt;encrypted</span> <span class="na">config:type=</span><span class="s">"boolean"</span><span class="nt">&gt;</span>true<span class="nt">&lt;/encrypted&gt;</span>
      <span class="nt">&lt;fullname&gt;</span>root<span class="nt">&lt;/fullname&gt;</span>
      <span class="nt">&lt;gid&gt;</span>0<span class="nt">&lt;/gid&gt;</span>
      <span class="nt">&lt;home&gt;</span>/root<span class="nt">&lt;/home&gt;</span>
      <span class="nt">&lt;password_settings&gt;</span>
        <span class="nt">&lt;expire&gt;&lt;/expire&gt;</span>
        <span class="nt">&lt;flag&gt;&lt;/flag&gt;</span>
        <span class="nt">&lt;inact&gt;&lt;/inact&gt;</span>
        <span class="nt">&lt;max&gt;&lt;/max&gt;</span>
        <span class="nt">&lt;min&gt;&lt;/min&gt;</span>
        <span class="nt">&lt;warn&gt;&lt;/warn&gt;</span>
      <span class="nt">&lt;/password_settings&gt;</span>
      <span class="nt">&lt;shell&gt;</span>/bin/bash<span class="nt">&lt;/shell&gt;</span>
      <span class="nt">&lt;uid&gt;</span>0<span class="nt">&lt;/uid&gt;</span>
        <span class="nt">&lt;user_password&gt;</span>$default_password_crypted<span class="nt">&lt;/user_password&gt;</span>
      <span class="nt">&lt;username&gt;</span>root<span class="nt">&lt;/username&gt;</span>
    <span class="nt">&lt;/user&gt;</span>
    <span class="nt">&lt;user&gt;</span>
      <span class="nt">&lt;encrypted</span> <span class="na">config:type=</span><span class="s">"boolean"</span><span class="nt">&gt;</span>true<span class="nt">&lt;/encrypted&gt;</span>
      <span class="nt">&lt;username&gt;</span>suse<span class="nt">&lt;/username&gt;</span>
      <span class="nt">&lt;user_password&gt;</span>$default_password_crypted<span class="nt">&lt;/user_password&gt;</span>
    <span class="nt">&lt;/user&gt;</span>
  <span class="nt">&lt;/users&gt;</span>
  <span class="nt">&lt;scripts&gt;</span>
    ## we have to include the pre-scripts tag to get autoinstall_start included
    <span class="nt">&lt;pre-scripts</span> <span class="na">config:type=</span><span class="s">"list"</span><span class="nt">&gt;</span>
      #set global $wrappedscript = 'autoinstall_start'
      $SNIPPET('suse-15.6_scriptwrapper.xml')
        ## SuSE has an annoying habit on ppc64 of changing the system
        ## boot order after installation. This makes it non-trivial to
        ## automatically re-install future OS.
        #set global $wrappedscript = 'save_boot_device'
        $SNIPPET('suse-15.6_scriptwrapper.xml')
    <span class="nt">&lt;/pre-scripts&gt;</span>
    <span class="nt">&lt;post-scripts</span> <span class="na">config:type=</span><span class="s">"list"</span><span class="nt">&gt;</span>
        ##
        ## This plugin wrapper provides the flexibility to call pure shell
        ## snippets which can be used directly on autoinst file and with
        ## wrapper on SuSE.
        ##
        ## To use it
        ## - exchange name_of_pure_shell_snippet with the name of this shell snippet
        ## - and remove the '##' in front of the line with suse-15.6_scriptwrapper.xml
        ##
        #set global $wrappedscript = 'name_of_pure_shell_snippet'
        ## $SNIPPET('suse-15.6_scriptwrapper.xml')
      
        ## SuSE has an annoying habit on ppc64 of changing the system
        ## boot order after installation. This makes it non-trivial to
        ## automatically re-install future OS.
        #set global $wrappedscript = 'restore_boot_device'
        $SNIPPET('suse-15.6_scriptwrapper.xml')
    <span class="nt">&lt;/post-scripts&gt;</span>
    ## we have to include the init-scripts tag to get autoinstall_done included
    <span class="nt">&lt;init-scripts</span> <span class="na">config:type=</span><span class="s">"list"</span><span class="nt">&gt;</span>
      #set global $wrappedscript = 'autoinstall_done'
      $SNIPPET('suse-15.6_scriptwrapper.xml')
    <span class="nt">&lt;/init-scripts&gt;</span>
  <span class="nt">&lt;/scripts&gt;</span>
<span class="nt">&lt;/profile&gt;</span>
</code></pre></div> </div> </li> <li> <p><code class="language-plaintext highlighter-rouge">/var/lib/cobbler/snippets/suse-15.6-networking.xml</code></p> <div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code>#set $osversion = $getVar("os_version","")
#set $hostname = $getVar("hostname","")
#if $hostname == ""
#set $hostname = $getVar("system_name","cobbler")
#end if
#if $getVar("dns_name_eth0","") != ""
        #set $my_hostname = $hostname.split('.',1)[:1][0]
        #set $my_domainname = $dns_name_eth0.split('.',1)[1:][0]
#else
        #set $my_hostname = $hostname
        #set $my_domainname = "site"
#end if
      
  <span class="nt">&lt;networking&gt;</span>
## Figure out if we're automating OS installation for a system or a profile
#if $getVar('system_name','') != ''
    <span class="nt">&lt;keep_install_network</span> <span class="na">config:type=</span><span class="s">"boolean"</span><span class="nt">&gt;</span>false<span class="nt">&lt;/keep_install_network&gt;</span>
#else
    <span class="nt">&lt;keep_install_network</span> <span class="na">config:type=</span><span class="s">"boolean"</span><span class="nt">&gt;</span>true<span class="nt">&lt;/keep_install_network&gt;</span>
#end if
    <span class="nt">&lt;dhcp_options&gt;</span>
      <span class="nt">&lt;dhclient_client_id&gt;&lt;/dhclient_client_id&gt;</span>
      <span class="nt">&lt;dhclient_hostname_option&gt;&lt;/dhclient_hostname_option&gt;</span>
    <span class="nt">&lt;/dhcp_options&gt;</span>
    <span class="nt">&lt;dns&gt;</span>
      <span class="nt">&lt;dhcp_hostname</span> <span class="na">config:type=</span><span class="s">"boolean"</span><span class="nt">&gt;</span>false<span class="nt">&lt;/dhcp_hostname&gt;</span>
      <span class="nt">&lt;write_hostname</span> <span class="na">config:type=</span><span class="s">"boolean"</span><span class="nt">&gt;</span>false<span class="nt">&lt;/write_hostname&gt;</span>
      <span class="nt">&lt;resolv_conf_policy&gt;&lt;/resolv_conf_policy&gt;</span>
      <span class="nt">&lt;hostname&gt;</span>$my_hostname<span class="nt">&lt;/hostname&gt;</span>
      <span class="nt">&lt;domain&gt;</span>$my_domainname<span class="nt">&lt;/domain&gt;</span>
      #if $getVar("name_servers_search",[]) != []
      <span class="nt">&lt;searchlist</span> <span class="na">config:type=</span><span class="s">"list"</span><span class="nt">&gt;</span>
      #for $sd in $name_servers_search
        <span class="nt">&lt;search&gt;</span>$sd<span class="nt">&lt;/search&gt;</span>
      #end for
      <span class="nt">&lt;/searchlist&gt;</span>
      #end if
      #if $name_servers and $name_servers[0] != "":
      <span class="nt">&lt;nameservers</span> <span class="na">config:type=</span><span class="s">"list"</span><span class="nt">&gt;</span>
      #for $ns in $name_servers
        <span class="nt">&lt;nameserver&gt;</span>$ns<span class="nt">&lt;/nameserver&gt;</span>
      #end for
      <span class="nt">&lt;/nameservers&gt;</span>
      #end if
    <span class="nt">&lt;/dns&gt;</span>
    <span class="nt">&lt;interfaces</span> <span class="na">config:type=</span><span class="s">"list"</span><span class="nt">&gt;</span>
    #if $getVar("system_name","") != ""
    #import re
    #set $vlanpattern = $re.compile("[a-zA-Z0-9]+[\.][0-9]+")
    #set $ikeys = $interfaces.keys()
    #for $iface in $ikeys
      #set $idata                = $interfaces[$iface]
      #set $mac                  = $idata.get("mac_address", "").lower()
      #set $static               = $idata.get("static", "")
      #set $ip                   = $idata.get("ip_address", "")
      #set $netmask              = $idata.get("netmask", "")
      #set $static_routes        = $idata.get("static_routes", "")
      #set $iface_type           = $idata.get("interface_type", "").lower()
      #set $iface_master         = $idata.get("interface_master", "")
      #set $bonding_opts         = $idata.get("bonding_opts", "").lower()
      #set $ipv6_address         = $idata.get("ipv6_address", "")
      #set $ipv6_secondaries     = $idata.get("ipv6_secondaries", "")
      #set $ipv6_mtu             = $idata.get("ipv6_mtu", "")
      #set $ipv6_default_gateway = $idata.get("ipv6_default_gateway", "")
      #set $ipv6_static_routes   = $idata.get("ipv6_static_routes", "")
      ## start of interface section
      <span class="nt">&lt;interface&gt;</span>
      #if $iface_type in ("bond", "master")
        <span class="nt">&lt;bonding_master&gt;</span>yes<span class="nt">&lt;/bonding_master&gt;</span>
        <span class="nt">&lt;bonding_module_opts&gt;</span>$bonding_opts<span class="nt">&lt;/bonding_module_opts&gt;</span>
        #set $loop_ikeys = $interfaces.keys()
        #set $loop_counter = 0
        #for $loop_iface in $loop_ikeys
          #set $loop_idata          = $interfaces[$loop_iface]
          #set $loop_interface_type = $loop_idata.get("interface_type", "").lower()
          #if $loop_interface_type in ("slave","bond_slave")
             #if $loop_idata["interface_master"] != ""
                #if $loop_idata["interface_master"].lower() == $iface.lower()
        <span class="nt">&lt;bonding_slave</span><span class="err">$loop_counter</span><span class="nt">&gt;</span>$loop_iface<span class="err">&lt;</span>/bonding_slave$loop_counter&gt;
                   #set $loop_counter += 1
                #end if
             #end if
          #end if
        #end for
        #if $static
        <span class="nt">&lt;bootproto&gt;</span>static<span class="nt">&lt;/bootproto&gt;</span>
        #else
        <span class="nt">&lt;bootproto&gt;</span>dhcp<span class="nt">&lt;/bootproto&gt;</span>
        #end if
        <span class="nt">&lt;device&gt;</span>$iface<span class="nt">&lt;/device&gt;</span>
        <span class="nt">&lt;ipaddr&gt;</span>$ip<span class="nt">&lt;/ipaddr&gt;</span>
        <span class="nt">&lt;netmask&gt;</span>$netmask<span class="nt">&lt;/netmask&gt;</span>
        <span class="nt">&lt;startmode&gt;</span>auto<span class="nt">&lt;/startmode&gt;</span>
        <span class="nt">&lt;usercontrol&gt;</span>no<span class="nt">&lt;/usercontrol&gt;</span>
      #elif $iface_type in ("slave","bond_slave","bridge_slave")
        <span class="nt">&lt;bootproto&gt;</span>none<span class="nt">&lt;/bootproto&gt;</span>
        <span class="nt">&lt;device&gt;</span>$iface<span class="nt">&lt;/device&gt;</span>
        #if $osversion == "sles12" or re.match('^sles12sp[1234]$', $osversion)
        <span class="nt">&lt;startmode&gt;</span>hotplug<span class="nt">&lt;/startmode&gt;</span>
        #else
        <span class="nt">&lt;startmode&gt;</span>off<span class="nt">&lt;/startmode&gt;</span>
        #end if
        <span class="nt">&lt;usercontrol&gt;</span>no<span class="nt">&lt;/usercontrol&gt;</span>
      #elif $iface_type in ("","na")
        #if $static
        <span class="nt">&lt;bootproto&gt;</span>static<span class="nt">&lt;/bootproto&gt;</span>
        #else
        <span class="nt">&lt;bootproto&gt;</span>dhcp<span class="nt">&lt;/bootproto&gt;</span>
        #end if
        <span class="nt">&lt;device&gt;</span>$iface<span class="nt">&lt;/device&gt;</span>
        <span class="nt">&lt;lladdr&gt;</span>$mac<span class="nt">&lt;/lladdr&gt;</span>
        <span class="nt">&lt;ipaddr&gt;</span>$ip<span class="nt">&lt;/ipaddr&gt;</span>
        <span class="nt">&lt;netmask&gt;</span>$netmask<span class="nt">&lt;/netmask&gt;</span>
        <span class="nt">&lt;startmode&gt;</span>auto<span class="nt">&lt;/startmode&gt;</span>
        <span class="nt">&lt;usercontrol&gt;</span>no<span class="nt">&lt;/usercontrol&gt;</span>
      #end if
      ## ===================================================================
      ## VLAN configuration
      ## ===================================================================
      #if $vlanpattern.match($iface)
        #set [$etherdevice, $vlanid] = $iface.split(".")
        <span class="nt">&lt;etherdevice&gt;</span>$etherdevice<span class="nt">&lt;/etherdevice&gt;</span>
        <span class="nt">&lt;vlan_id&gt;</span>$vlanid<span class="nt">&lt;/vlan_id&gt;</span>
      #end if
      ## ===================================================================
      ## IPv6 support
      ## ===================================================================
      #if $ipv6_address != ""
        <span class="nt">&lt;aliases&gt;</span>
          <span class="nt">&lt;alias0&gt;</span>
            <span class="nt">&lt;IPADDR&gt;</span>$ipv6_address<span class="nt">&lt;/IPADDR&gt;</span>
            <span class="nt">&lt;LABEL&gt;</span>a0<span class="nt">&lt;/LABEL&gt;</span>
            <span class="nt">&lt;PREFIXLEN&gt;</span>64<span class="nt">&lt;/PREFIXLEN&gt;</span>
          <span class="nt">&lt;/alias0&gt;</span>
        #if $ipv6_secondaries != ""
          #set $s = 1
          #for $alias in $ipv6_secondaries
          <span class="nt">&lt;alias</span><span class="err">${s}</span><span class="nt">&gt;</span>
            <span class="nt">&lt;IPADDR&gt;</span>$alias<span class="nt">&lt;/IPADDR&gt;</span>
            <span class="nt">&lt;LABEL&gt;</span>a${s}<span class="nt">&lt;/LABEL&gt;</span>
            <span class="nt">&lt;PREFIXLEN&gt;</span>64<span class="nt">&lt;/PREFIXLEN&gt;</span>
          <span class="err">&lt;</span>/alias${s}&gt;
            #set $s += 1
          #end for
        #end if
        <span class="nt">&lt;/aliases&gt;</span>
      #end if
      <span class="nt">&lt;/interface&gt;</span>
    #end for
    #end if
    <span class="nt">&lt;/interfaces&gt;</span>
    <span class="nt">&lt;backend&gt;</span>network_manager<span class="nt">&lt;/backend&gt;</span>
    #if $getVar("system_name","") != ""
    <span class="nt">&lt;net-udev</span> <span class="na">config:type=</span><span class="s">"list"</span><span class="nt">&gt;</span>
    #set $ikeys = $interfaces.keys()
    #for $iface in $ikeys
      #set $idata = $interfaces[$iface]
      #set $mac            = $idata["mac_address"]
      #set $interface_type = $idata["interface_type"]
      #if $mac.lower() != ""
      #if $interface_type.lower() not in ["bond","bridge"]
      <span class="nt">&lt;rule&gt;</span>
        <span class="nt">&lt;name&gt;</span>$iface<span class="nt">&lt;/name&gt;</span>
        <span class="nt">&lt;rule&gt;</span>ATTR{address}<span class="nt">&lt;/rule&gt;</span>
        <span class="nt">&lt;value&gt;</span>$mac.lower()<span class="nt">&lt;/value&gt;</span>
      <span class="nt">&lt;/rule&gt;</span>
      #end if
      #end if
    #end for
    <span class="nt">&lt;/net-udev&gt;</span>
    #end if
    <span class="nt">&lt;routing&gt;</span>
      <span class="nt">&lt;ip_forward</span> <span class="na">config:type=</span><span class="s">"boolean"</span><span class="nt">&gt;</span>false<span class="nt">&lt;/ip_forward&gt;</span>
      #if $getVar("system_name","") != ""
      <span class="nt">&lt;routes</span> <span class="na">config:type=</span><span class="s">"list"</span><span class="nt">&gt;</span>
        <span class="nt">&lt;route&gt;</span>
          <span class="nt">&lt;destination&gt;</span>default<span class="nt">&lt;/destination&gt;</span>
          <span class="nt">&lt;netmask&gt;</span>-<span class="nt">&lt;/netmask&gt;</span>
          <span class="nt">&lt;device&gt;</span>-<span class="nt">&lt;/device&gt;</span>
          <span class="nt">&lt;gateway&gt;</span>$gateway<span class="nt">&lt;/gateway&gt;</span>
        <span class="nt">&lt;/route&gt;</span>
        ## ===================================================================
        ## IPv4 static route setup
        ## ===================================================================
        #for $iface in $ikeys
          #set $idata         = $interfaces[$iface]
          #set $static_routes = $idata.get("static_routes", "")
          #for $route in $static_routes
            #set routepattern = $re.compile("[0-9/.]+:[0-9.]+")
            #if $routepattern.match($route)
              #set $routebits = $route.split(":")
              #set [$network, $router] = $route.split(":")
        <span class="nt">&lt;route&gt;</span>
          <span class="nt">&lt;destination&gt;</span>$network<span class="nt">&lt;/destination&gt;</span>
          <span class="nt">&lt;netmask&gt;</span>-<span class="nt">&lt;/netmask&gt;</span>
          <span class="nt">&lt;device&gt;</span>$iface<span class="nt">&lt;/device&gt;</span>
          <span class="nt">&lt;gateway&gt;</span>$router<span class="nt">&lt;/gateway&gt;</span>
        <span class="nt">&lt;/route&gt;</span>
            #end if
          #end for
        #end for
        ## ===================================================================
        ## IPv6 routing setup
        ## ===================================================================
        #for $iface in $ikeys
          #set $idata                = $interfaces[$iface]
          #set $ipv6_static_routes   = $idata.get("ipv6_static_routes", "")
          #set $ipv6_default_gateway = $idata.get("ipv6_default_gateway", "")
          #if $ipv6_default_gateway != ""
        <span class="nt">&lt;route&gt;</span>
          <span class="nt">&lt;destination&gt;</span>default<span class="nt">&lt;/destination&gt;</span>
          <span class="nt">&lt;netmask&gt;</span>-<span class="nt">&lt;/netmask&gt;</span>
          <span class="nt">&lt;device&gt;</span>$iface<span class="nt">&lt;/device&gt;</span>
          <span class="nt">&lt;gateway&gt;</span>$ipv6_default_gateway<span class="nt">&lt;/gateway&gt;</span>
        <span class="nt">&lt;/route&gt;</span>
          #end if
          #for $route in $ipv6_static_routes
            #set routepattern = $re.compile("[0-9a-fA-F:/]+,[0-9a-fA-F:]+")
            #if $routepattern.match($route)
              #set $routebits = $route.split(",")
              #set [$network, $router] = $route.split(",")
        <span class="nt">&lt;route&gt;</span>
          <span class="nt">&lt;destination&gt;</span>$network<span class="nt">&lt;/destination&gt;</span>
          <span class="nt">&lt;netmask&gt;</span>-<span class="nt">&lt;/netmask&gt;</span>
          <span class="nt">&lt;device&gt;</span>$iface<span class="nt">&lt;/device&gt;</span>
          <span class="nt">&lt;gateway&gt;</span>$router<span class="nt">&lt;/gateway&gt;</span>
        <span class="nt">&lt;/route&gt;</span>
            #end if
          #end for
        #end for
      <span class="nt">&lt;/routes&gt;</span>
      #end if
    <span class="nt">&lt;/routing&gt;</span>
  <span class="nt">&lt;/networking&gt;</span>
</code></pre></div> </div> </li> <li> <p><code class="language-plaintext highlighter-rouge">/var/lib/cobbler/snippets/suse-15.6_scriptwrapper.xml</code></p> <div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;script&gt;</span>
##        <span class="nt">&lt;debug</span> <span class="na">config:type=</span><span class="s">"boolean"</span><span class="nt">&gt;</span>true<span class="nt">&lt;/debug&gt;</span>
##        <span class="nt">&lt;feedback</span> <span class="na">config:type=</span><span class="s">"boolean"</span><span class="nt">&gt;</span>false<span class="nt">&lt;/feedback&gt;</span>
##        <span class="nt">&lt;location&gt;&lt;/location&gt;</span>
#set $filename = $wrappedscript.replace('/', '_')
        <span class="nt">&lt;filename&gt;</span>$filename<span class="nt">&lt;/filename&gt;</span>
        <span class="nt">&lt;source&gt;</span><span class="cp">&lt;![CDATA[
$SNIPPET($wrappedscript)
        ]]&gt;</span><span class="nt">&lt;/source&gt;</span>
      <span class="nt">&lt;/script&gt;</span>
</code></pre></div> </div> </li> <li> <p><code class="language-plaintext highlighter-rouge">/var/lib/cobbler/snippets/autoinstall_start</code></p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#set system_name = $getVar('system_name','')</span>
<span class="c">#set profile_name = $getVar('profile_name','')</span>
<span class="c">#if $system_name != ''</span>
    <span class="c">#set object_type = 'system'</span>
    <span class="c">#set object_name = $system_name</span>
<span class="c">#else if $profile_name != ''</span>
    <span class="c">#set object_type = 'profile'</span>
    <span class="c">#set object_name = $profile_name</span>
<span class="c">#else</span>
    <span class="c">#set object_type = ''</span>
    <span class="c">#set object_name = ''</span>
<span class="c">#end if</span>
<span class="c">#set breed = $getVar('breed','')</span>
<span class="c">#set srv = $getVar('http_server','')</span>
<span class="c">#set run_install_triggers = $getVar('run_install_triggers','')</span>
<span class="c">#set runpre = ""</span>
<span class="c">#if $object_type != ''</span>
    <span class="c">## RUN PRE TRIGGER</span>
    <span class="c">#if $run_install_triggers</span>
        <span class="c">#if $breed == 'redhat' or $breed == 'suse'</span>
            <span class="c">#set runpre = "\ncurl \"http://%s/cblr/svc/op/trig/mode/pre/%s/%s\" -o /dev/null" % (srv, object_type, object_name)</span>
        <span class="c">#else</span>
            <span class="c">#set runpre = "\nwget \"http://%s/cblr/svc/op/trig/mode/pre/%s/%s\" -O /dev/null" % (srv, object_type, object_name)</span>
        <span class="c">#end if</span>
    <span class="c">#end if</span>
<span class="c">#end if</span>
<span class="c">#echo $runpre</span>
</code></pre></div> </div> </li> <li> <p><code class="language-plaintext highlighter-rouge">/var/lib/cobbler/snippets/autoinstall_done</code></p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#set system_name = $getVar('system_name','')</span>
<span class="c">#set profile_name = $getVar('profile_name','')</span>
<span class="c">#if $system_name != ''</span>
    <span class="c">#set object_type = 'system'</span>
    <span class="c">#set object_name = $system_name</span>
<span class="c">#else if $profile_name != ''</span>
    <span class="c">#set object_type = 'profile'</span>
    <span class="c">#set object_name = $profile_name</span>
<span class="c">#else</span>
    <span class="c">#set object_type = ''</span>
    <span class="c">#set object_name = ''</span>
<span class="c">#end if</span>
<span class="c">#set breed = $getVar('breed','')</span>
<span class="c">#set os_version = $getVar('os_version','')</span>
<span class="c">#set srv = $getVar('http_server','')</span>
<span class="c">#set autoinstall = $getVar('autoinstall','')</span>
<span class="c">#set run_install_triggers = $getVar('run_install_triggers','')</span>
<span class="c">#set pxe_just_once = $getVar('pxe_just_once','')</span>
<span class="c">#set nopxe = ""</span>
<span class="c">#set save_autoinstall = ""</span>
<span class="c">#set runpost = ""</span>
<span class="c">#if $system_name != ''</span>
    <span class="c">## PXE JUST ONCE</span>
    <span class="c">#if $pxe_just_once</span>
        <span class="c">#if $breed == 'redhat'</span>
            <span class="c">#set nopxe = "\ncurl \"http://%s/cblr/svc/op/nopxe/system/%s\" -o /dev/null" % (srv, system_name)</span>
        <span class="c">#else if $breed == 'vmware' and $os_version == 'esx4'</span>
            <span class="c">#set nopxe = "\ncurl \"http://%s/cblr/svc/op/nopxe/system/%s\" -o /dev/null" % (srv, system_name)</span>
        <span class="c">#else</span>
            <span class="c">#set nopxe = "\nwget \"http://%s/cblr/svc/op/nopxe/system/%s\" -O /dev/null" % (srv, system_name)</span>
        <span class="c">#end if</span>
    <span class="c">#end if</span>
<span class="c">#end if</span>
<span class="c">#if $object_type != ''</span>
    <span class="c">## SAVE AUTO INSTALLATION</span>
    <span class="c">#if $autoinstall != ''</span>
        <span class="c">#if $breed == 'redhat'</span>
            <span class="c">#set save_autoinstall = "\ncurl \"http://%s/cblr/svc/op/autoinstall/%s/%s\" -o /root/cobbler.ks" % (srv, object_type, object_name)</span>
        <span class="c">#else if $breed == 'suse'</span>
            <span class="c">#set save_autoinstall = "\ncurl \"http://%s/cblr/svc/op/autoinstall/%s/%s\" -o /root/cobbler.xml" % (srv, object_type, object_name)</span>
        <span class="c">#else if $breed == 'vmware' and $os_version == 'esx4'</span>
            <span class="c">#set save_autoinstall = "\ncurl \"http://%s/cblr/svc/op/autoinstall/%s/%s\" -o /root/cobbler.ks" % (srv, object_type, object_name)</span>
        <span class="c">#else if $breed == 'vmware'</span>
            <span class="c">#set save_autoinstall = "\nwget \"http://%s/cblr/svc/op/autoinstall/%s/%s\" -O /var/log/cobbler.ks" % (srv, object_type, object_name)</span>
        <span class="c">#else if $breed == 'debian' or $breed == 'ubuntu'</span>
            <span class="c">#set save_autoinstall = "\nwget \"http://%s/cblr/svc/op/autoinstall/%s/%s\" -O /var/log/cobbler.seed" % (srv, object_type, object_name)</span>
        <span class="c">#end if</span>
    <span class="c">#end if</span>
    <span class="c">## RUN POST TRIGGER</span>
    <span class="c">#if $run_install_triggers</span>
        <span class="c">#if $breed == 'redhat' or $breed == 'suse'</span>
            <span class="c">#set runpost = "\ncurl \"http://%s/cblr/svc/op/trig/mode/post/%s/%s\" -o /dev/null" % (srv, object_type, object_name)</span>
        <span class="c">#else if $breed == 'vmware' and $os_version == 'esx4'</span>
            <span class="c">#set runpost = "\ncurl \"http://%s/cblr/svc/op/trig/mode/post/%s/%s\" -o /dev/null" % (srv, object_type, object_name)</span>
        <span class="c">#else</span>
            <span class="c">#set runpost = "\nwget \"http://%s/cblr/svc/op/trig/mode/post/%s/%s\" -O /dev/null" % (srv, object_type, object_name)</span>
        <span class="c">#end if</span>
    <span class="c">#end if</span>
<span class="c">#end if</span>
<span class="c">#echo $nopxe</span>
<span class="c">#echo $save_autoinstall</span>
<span class="c">#echo $runpost</span>
</code></pre></div> </div> </li> </ul> </li> </ol>]]></content><author><name>Sus-Admin</name></author><category term="cobbler"/><summary type="html"><![CDATA[This guide assumes that you have a Fedora 34 server or workstation system configured to run Cobbler v3.3.7 similarly to the Cobbler v3.3.6 Beginner’s guide.]]></summary></entry><entry><title type="html">Cobbler (v3.3.7) Ubuntu Deployment Guide</title><link href="https://sus-admin.github.io/blog/2024/Cobbler-v3.3.7-Ubuntu-Deployment-Guide/" rel="alternate" type="text/html" title="Cobbler (v3.3.7) Ubuntu Deployment Guide"/><published>2024-12-11T00:00:00+00:00</published><updated>2024-12-11T00:00:00+00:00</updated><id>https://sus-admin.github.io/blog/2024/Cobbler-v3.3.7-Ubuntu-Deployment-Guide</id><content type="html" xml:base="https://sus-admin.github.io/blog/2024/Cobbler-v3.3.7-Ubuntu-Deployment-Guide/"><![CDATA[<p>This guide assumes that you have a Fedora 34 server or workstation system configured to run Cobbler v3.3.7 similarly to the <a href="/blog/2024/Cobbler-v3.3.6-Beginners-Guide/">Cobbler v3.3.6 Beginner’s guide</a>.</p> <h2 class="no_toc" id="table-of-contents">Table of Contents</h2> <ol id="markdown-toc"> <li><a href="#objective" id="markdown-toc-objective">Objective</a> <ol> <li><a href="#caveats" id="markdown-toc-caveats">Caveats</a></li> </ol> </li> <li><a href="#cobbler-server-prep" id="markdown-toc-cobbler-server-prep">Cobbler Server Prep</a> <ol> <li><a href="#dependencies" id="markdown-toc-dependencies">Dependencies</a></li> </ol> </li> <li><a href="#ubuntu-2004-pxe-deployment" id="markdown-toc-ubuntu-2004-pxe-deployment">Ubuntu 20.04 PXE Deployment</a></li> <li><a href="#ubuntu-2204-pxe-deployment" id="markdown-toc-ubuntu-2204-pxe-deployment">Ubuntu 22.04 PXE Deployment</a></li> <li><a href="#ubuntu-2404-pxe-deployment" id="markdown-toc-ubuntu-2404-pxe-deployment">Ubuntu 24.04 PXE Deployment</a></li> <li><a href="#tips--troubleshooting" id="markdown-toc-tips--troubleshooting">Tips &amp; Troubleshooting</a></li> </ol> <h2 id="objective">Objective</h2> <p>Starting where the <a href="/blog/2024/Cobbler-v3.3.6-Beginners-Guide/">Beginner’s guide</a> left off, further configure the Cobbler v3.3.7 server to deploy the latest 3 releases of Ubuntu Server LTS <em>(Ubuntu 20.04, 22.04, 24.04)</em> via PXE network boot, using the same system and network environment. This guide assumes that you still have <code class="language-plaintext highlighter-rouge">selinux</code> and <code class="language-plaintext highlighter-rouge">firewalld</code> configured and enabled as described in the Beginner’s guide.</p> <h3 id="caveats">Caveats</h3> <ul> <li> <p>starting with Ubuntu 20.04, Canonical switched to using their <a href="https://github.com/canonical/cloud-init">in-house</a> <a href="https://cloud-init.io/"><code class="language-plaintext highlighter-rouge">cloud-init</code></a> autoinstall solution, which Cobbler 3.3.7 does not support natively, requiring a few <em>advanced</em> configurations.</p> <ul> <li>Ubuntu did offer compatability/support with the Debian’s <em>preseed</em> autoinstallation model in the <a href="https://cdimage.ubuntu.com/ubuntu-legacy-server/releases/20.04/release/">Ubuntu 20.04 Legacy</a> release, but this guide only provides procedures for deploying Ubuntu systems using <code class="language-plaintext highlighter-rouge">cloud-init</code>.</li> </ul> </li> <li> <p>Despite my efforts (and unlike the <a href="/blog/2024/Cobbler-v3.3.6-Beginners-Guide/">Beginner’s Guide</a>) <strong>Ubuntu 20.04 PXE clients will require an internet connection</strong> at the time of installation, since the <code class="language-plaintext highlighter-rouge">fallback: offline-install</code> option is not available in that version’s <code class="language-plaintext highlighter-rouge">cloud-init</code> implementation and was only introduced as of <a href="https://discourse.ubuntu.com/t/jammy-jellyfish-release-notes/24668">Ubuntu 22.04 release</a>..</p> <ul> <li>Also unlike my <a href="/blog/2024/Cobbler-v3.3.7-Debian-Deployment-Guide/">other</a> <a href="/blog/2024/Cobbler-v3.3.7-OpenSUSE-Deployment-Guide/">guides</a>, this PXE deployment will use the installation media (ISO file) instead of a repo mirror when installing the target OS <em>(except for Ubuntu 20.04, however it still requires to use the ISO file in PXE process, so it’s very similar and consistent)</em>, so even though the distribution will be imported as usual, it’s important to make the ISO file available over HTTP as well.</li> </ul> </li> </ul> <h2 id="cobbler-server-prep">Cobbler Server Prep</h2> <p>Cobbler v3.3.7 does not come with a sample template for the <code class="language-plaintext highlighter-rouge">cloud-init</code> autoinstall files, so create those before getting started, as well as some Cobbler sync-triggers to correct the bootloader configurations for compatability with <code class="language-plaintext highlighter-rouge">cloud-init</code>.</p> <h3 id="dependencies">Dependencies</h3> <p>Create the new Cobbler template and snippets necessary to generate the <code class="language-plaintext highlighter-rouge">cloud-init</code> autoinstall config file by copying the 3 text blocks below to new files with the name and path noted above each text block:</p> <ul> <li> <p><code class="language-plaintext highlighter-rouge">/var/lib/cobbler/templates/cloud-init_user-data</code></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>#cloud-config
autoinstall:
  version: 1
  apt:
    preserve_sources_list: true
    primary:
    - arches: [amd64, i386]
      uri: http://$http_server/cblr/links/$distro
##      uri: http://us.archive.ubuntu.com/ubuntu
    - arches: [default]
##      uri: http://$http_server/cblr/links/$distro
      uri: http://ports.ubuntu.com/ubuntu-ports
    fallback: offline-install
  identity:
$SNIPPET('cloud-init_hostname')
    password: $default_password_crypted
    realname: ubuntu
    username: ubuntu
  kernel:
    package: linux-generic
  keyboard:
    layout: us
    toggle: null
    variant: ''
  locale: en_US.UTF-8
$SNIPPET('cloud-init_network')
  ssh:
    allow-pw: true
    install-server: true
  storage:
    layout:
      name: lvm
      sizing-policy: all
  package_update: false
  package_upgrade: false
  late-commands:
## Figure out if we're automating OS installation for a system or a profile
#if $getVar('system_name','') != ''
#set $what = "system"
#else
#set $what = "profile"
#end if
    - wget -O /target/tmp/autoinstall-user-data.yaml http://$http_server/cblr/svc/op/autoinstall/$what/$name
    - chroot /target /bin/bash -s ssh-keygen -t rsa -b 2048 -m ssh2 -N "" -f /root/.ssh/id_rsa
</code></pre></div> </div> </li> <li> <p><code class="language-plaintext highlighter-rouge">/var/lib/cobbler/snippets/cloud-init_hostname</code></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>#if $getVar("system_name","") != ""
    #if $hostname != ""
    hostname: $hostname
    #else
    #set $myhostname = $getVar('name','').replace("_","-")
    hostname: $myhostname
    #end if
#else
## profile based install so just provide one interface for starters
#set $myhostname = $getVar('hostname',$getVar('name','cobbler')).replace("_","-")
    hostname: $myhostname
#end if
</code></pre></div> </div> </li> <li> <p><code class="language-plaintext highlighter-rouge">/var/lib/cobbler/snippets/cloud-init_network</code></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>#if $getVar("system_name","") != ""
  network:
    ethernets:
    #set ikeys = $interfaces.keys()
    #import re
    #for $iname in $ikeys
        #set $idata = $interfaces[$iname]
        ## Ignore BMC interface
        #if $idata["interface_type"].lower() == "bmc"
            #continue
        #end if
    #end for
    #for $iname in $ikeys
        #set $idata    = $interfaces[$iname]
        #set $mac      = $idata["mac_address"]
        #set $static   = $idata["static"]
        #set $ip       = $idata["ip_address"]
        #set $netmask  = $idata["netmask"]
        #set $type     = $idata["interface_type"]
        ## Ignore BMC interface
        #if $type == "bmc"
            #continue
        #end if
      $iname:
        match:
          macaddress: $mac
        #if $static == True:
            #if $ip != "":
                #if $netmask != "":
                    #set $mask = sum([bin(int(x)).count('1') for x in $netmask.split('.')])
        dhcp4: false
        addresses:
          - $ip/$mask
                #else
        dhcp4: false
        addresses:
          - $ip/24
                #end if
                #if $gateway != "":
        gateway4: $gateway
                #end if
                #if $name_servers and $name_servers[0] != "":
        nameservers:
          addresses:
                    #for $dns in $name_servers
            - $dns
                    #end for
                #end if
            #else
        dhcp4: true
            #end if
        #else
        dhcp4: true
        #end if
    #end for
    version: 2
#else
## profile based install so use DHCP
  network:
    ethernets: 
      eth0:
        dhcp4: true
    version: 2
#end if
</code></pre></div> </div> </li> </ul> <blockquote> <p>The above section should resemble the standard <a href="https://netplan.readthedocs.io/en/latest/netplan-yaml/">netplan</a> YAML configuration file for Ubuntu once generated.</p> <p><strong>Assumptions:</strong> For automated Cobbler System deployments (not Profiles…), each system interface defined should have the corresponding MAC address defined (a standard requirement in Cobbler). Less intuitively, this solution only adds DNS servers to static interfaces with an IP address defined, since DNS servers are set per-system in Cobbler, but per-interface in Ubuntu cloud-init/netplan; the above snippet will revert any interface to DHCP if it is set to static but has no IP defined.</p> </blockquote> <p>Create 2 Cobbler sync-triggers to correct the GRUB and PXELINUX boot configurations to support Ubuntu <code class="language-plaintext highlighter-rouge">cloud-init</code> installations, which will run each time the <code class="language-plaintext highlighter-rouge">cobbler sync</code> action is performed:</p> <ul> <li> <p><code class="language-plaintext highlighter-rouge">/var/lib/cobbler/triggers/sync/post/fix-ubuntu-profiles-GRUB_PXE.sh</code></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>#!/bin/bash 
for PROFILE in $(cobbler profile list); do
    DIST=$(cobbler profile report --name $PROFILE | grep ^Distribution | awk {' print $3 '});
    VER=$(cobbler distro report --name $DIST | grep "OS Version" | awk {' print $4 '});
    [[ ($VER == "focal" || $VER == "jammy" || $VER == "noble") ]] || continue;
    sed -i "s,auto-install/enable=true priority=critical netcfg/choose_interface=auto url=http://10.0.0.10/cblr/svc/op/autoinstall/profile/${PROFILE} hostname=.* domain=local.lan suite=${VER},," /var/lib/tftpboot/grub/x86_64_menu_items.cfg;
    sed -i "s,auto-install/enable=true priority=critical netcfg/choose_interface=auto url=http://10.0.0.10/cblr/svc/op/autoinstall/profile/${PROFILE} hostname=.* domain=local.lan suite=${VER},," /var/lib/tftpboot/pxelinux.cfg/default;
    DIST="" &amp;&amp; VER="";
done
</code></pre></div> </div> </li> <li> <p><code class="language-plaintext highlighter-rouge">/var/lib/cobbler/triggers/sync/post/fix-ubuntu-systems-GRUB_PXE.sh</code></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>#!/bin/bash 
for SYSTEM in $(cobbler system list); do
    PROFILE=$(cobbler system report --name $SYSTEM | grep ^Profile | awk {' print $3 '})
    DIST=$(cobbler profile report --name $PROFILE | grep ^Distribution | awk {' print $3 '});
    VER=$(cobbler distro report --name $DIST | grep "OS Version" | awk {' print $4 '});
    [[ ($VER == "focal" || $VER == "jammy" || $VER == "noble") ]] || continue;
    MAC=$(cobbler system report --name $SYSTEM | grep "MAC Addr" | awk {' print $4 '})
    sed -i "s,auto-install/enable=true priority=critical netcfg/choose_interface=auto url=http://10.0.0.10/cblr/svc/op/autoinstall/system/${SYSTEM} hostname=.* domain=local.lan suite=${VER},," /var/lib/tftpboot/grub/system/$MAC;
    MAC=$(echo $MAC | sed 's,:,-,g');
    sed -i "s,auto-install/enable=true priority=critical netcfg/choose_interface=auto url=http://10.0.0.10/cblr/svc/op/autoinstall/profile/${PROFILE} hostname=.* domain=local.lan suite=${VER},," /var/lib/tftpboot/pxelinux.cfg/01-$MAC;
	PROFILE="" &amp;&amp; DIST="" &amp;&amp; VER="" &amp;&amp; MAC="";
done
</code></pre></div> </div> </li> </ul> <p>Mark the above 2 cobbler sync-triggers as executable</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">chmod </span>u+x /var/lib/cobbler/triggers/sync/post/fix-ubuntu-profiles-GRUB_PXE.sh
<span class="nb">chmod </span>u+x /var/lib/cobbler/triggers/sync/post/fix-ubuntu-systems-GRUB_PXE.sh
</code></pre></div></div> <blockquote> <p>More info on cobbler triggers in the <strong>Tips &amp; Troubleshooting</strong> section below</p> </blockquote> <p>Download the latest 3 releases of Ubuntu Server LTS</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cd</span> ~/Downloads <span class="o">&amp;&amp;</span> wget https://releases.ubuntu.com/24.04/ubuntu-24.04.1-live-server-amd64.iso
<span class="nb">cd</span> ~/Downloads <span class="o">&amp;&amp;</span> wget https://releases.ubuntu.com/22.04/ubuntu-22.04.5-live-server-amd64.iso
<span class="nb">cd</span> ~/Downloads <span class="o">&amp;&amp;</span> wget https://releases.ubuntu.com/20.04/ubuntu-20.04.6-live-server-amd64.iso
</code></pre></div></div> <h2 id="ubuntu-2004-pxe-deployment">Ubuntu 20.04 PXE Deployment</h2> <p>Mount the Ubuntu 20.04 live server installer and import to Cobbler</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span> <span class="nt">-d</span> /mnt/Ubuntu] <span class="o">||</span> <span class="nb">mkdir</span> /mnt/Ubuntu
mount <span class="nt">-t</span> iso9660 <span class="nt">-o</span> loop,ro ~/Downloads/ubuntu-20.04.6-live-server-amd64.iso /mnt/Ubuntu
cobbler import <span class="nt">--name</span> Ubuntu20 <span class="nt">--path</span> /mnt/Ubuntu
</code></pre></div></div> <p>Copy the installation media to the public HTTP share <em>(The location of this file will be used in the</em> <code class="language-plaintext highlighter-rouge">kernel-options</code> <em>for relavent Cobbler Distros/Profiles/Systems)</em></p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">mkdir</span> <span class="nt">-p</span> /var/www/cobbler/pub/cloud-init/Ubuntu20
<span class="nb">cp</span> ~/Downloads/ubuntu-20.04.6-live-server-amd64.iso /var/www/cobbler/pub/cloud-init/Ubuntu20/.
</code></pre></div></div> <p>Edit the kernel options for the new Cobbler Distro to install Ubuntu automatically by default:</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">NAME</span><span class="o">=</span><span class="s2">"Ubuntu20-casper-x86_64"</span> <span class="o">&amp;&amp;</span> cobbler distro edit <span class="nt">--name</span> <span class="nv">$NAME</span> <span class="nt">--kernel-options</span> <span class="s2">"root=/dev/ram0 ramdisk_size=1500000 ip=dhcp url=http://10.0.0.10/cblr/pub/cloud-init/Ubuntu20/ubuntu-20.04.6-live-server-amd64.iso autoinstall cloud-config-url=http://10.0.0.10/cblr/svc/op/autoinstall/profile/</span><span class="nv">$NAME</span><span class="s2">"</span> <span class="o">&amp;&amp;</span> <span class="nb">unset </span>NAME
</code></pre></div></div> <blockquote> <p>alternatively, use the following kernel-options to <strong>install Ubuntu manually</strong> via PXE network boot</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>cobbler distro edit <span class="nt">--name</span> Ubuntu20-casper-x86_64 <span class="nt">--kernel-options</span> <span class="s1">'root=/dev/ram0 ramdisk_size=1500000 ip=dhcp url=http://10.0.0.10/cblr/pub/cloud-init/Ubuntu20/ubuntu-20.04.6-live-server-amd64.iso cloud-config-url=/dev/null'</span>
</code></pre></div> </div> <p>More info on these configs in the <strong>Tips &amp; Troubleshooting</strong> section below.</p> </blockquote> <p>Since the PXE client will install the OS from the internet, create a new autoinstall (<code class="language-plaintext highlighter-rouge">cloud-init</code>) template from the file created above, changing the <code class="language-plaintext highlighter-rouge">apt</code> uri.</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sed</span> <span class="nt">-z</span> <span class="s1">'s,      uri: http://$http_server/cblr/links/$distro\n##      uri: http://us.archive.ubuntu.com/ubuntu,##      uri: http://$http_server/cblr/links/$distro\n      uri: http://us.archive.ubuntu.com/ubuntu,'</span> /var/lib/cobbler/templates/cloud-init_user-data | <span class="nb">tee</span> /var/lib/cobbler/templates/Ubuntu20_cloud-init_user-data
</code></pre></div></div> <p>Then configure it as the autoinstallation template for the Ubuntu 20.04 Cobbler Profile</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>cobbler profile edit <span class="nt">--name</span> Ubuntu20-casper-x86_64 <span class="nt">--autoinstall</span> Ubuntu20_cloud-init_user-data
</code></pre></div></div> <p>Create a new Cobbler System to install Ubuntu 20.04 automatically based on the system’s (PXE client’s) MAC address, replacing the <em>“aa:bb:cc:dd:ee:ff”</em> with the MAC address of your PXE client, and being sure not to use a duplicate MAC or IP addresse of any other Cobbler System:</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">NAME</span><span class="o">=</span><span class="s2">"Ubuntu20-auto"</span> <span class="o">&amp;&amp;</span> cobbler system add <span class="nt">--name</span> <span class="nv">$NAME</span> <span class="nt">--profile</span> Ubuntu20-casper-x86_64 <span class="nt">--kernel-options</span> <span class="s2">"root=/dev/ram0 ramdisk_size=1500000 ip=dhcp url=http://10.0.0.10/cblr/pub/cloud-init/Ubuntu20/ubuntu-20.04.6-live-server-amd64.iso autoinstall cloud-config-url=http://10.0.0.10/cblr/svc/op/autoinstall/system/</span><span class="nv">$NAME</span><span class="s2">"</span> <span class="nt">--mac-address</span> <span class="s2">"aa:bb:cc:dd:ee:ff"</span> <span class="nt">--static</span> <span class="nb">true</span> <span class="nt">--ip-address</span> <span class="s2">"10.0.0.20"</span> <span class="nt">--netmask</span> <span class="s2">"255.255.255.0"</span> <span class="nt">--gateway</span> <span class="s2">"10.0.0.1"</span> <span class="nt">--name-servers</span> <span class="s2">"10.0.0.1 1.1.1.1 10.0.0.10"</span> <span class="nt">--hostname</span> <span class="s2">"Ubuntu20"</span> <span class="nt">--netboot-enabled</span> <span class="nb">true</span> <span class="o">&amp;&amp;</span> <span class="nb">unset </span>NAME
</code></pre></div></div> <blockquote> <p>Alternatively, configure the Cobbler System kernel-options to run as a <strong>manual</strong> installation:</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>cobbler system add <span class="nt">--name</span> Ubuntu20 <span class="nt">--profile</span> Ubuntu20-casper-x86_64 <span class="nt">--kernel-options</span> <span class="s1">'root=/dev/ram0 ramdisk_size=1500000 ip=dhcp url=http://10.0.0.10/cblr/pub/cloud-init/Ubuntu20/ubuntu-20.04.6-live-server-amd64.iso autoinstall cloud-config-url=/dev/null'</span> <span class="nt">--mac-address</span> <span class="s2">"aa:bb:cc:dd:ee:ff"</span>
</code></pre></div> </div> </blockquote> <p>Finally, sync up Cobbler, then the <strong>PXE Client</strong> VM can be powered on and should automatically boot to PXE and install Ubuntu 20.04 to the VM HDD using the “Ubuntu20_cloud-init_user-data” <code class="language-plaintext highlighter-rouge">cloud-init</code> template created above.</p> <ul> <li>The resulting system will have the <code class="language-plaintext highlighter-rouge">root</code> super-user account disabled, and will only be accessible with the <code class="language-plaintext highlighter-rouge">ubuntu</code> user specified in the <em>cloud-init</em> config file.</li> </ul> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>cobbler <span class="nb">sync</span>
</code></pre></div></div> <blockquote> <p>the PXE Client will not install Ubuntu from the local mirror @ <code class="language-plaintext highlighter-rouge">/var/www/cobbler/distro_mirror</code>, and since the <code class="language-plaintext highlighter-rouge">fallback: ofline-install</code> option was not available for Ubuntu 20.04 <code class="language-plaintext highlighter-rouge">cloud-init</code>, this distro <strong>requires an internet connection</strong> to install, as detailed in this guide.</p> </blockquote> <h2 id="ubuntu-2204-pxe-deployment">Ubuntu 22.04 PXE Deployment</h2> <p>Take similar steps as above to import and automatically deploy Ubuntu 22.04 LTS Server over PXE, using the original <code class="language-plaintext highlighter-rouge">cloud-init_user-data</code> autoinstall template created above.</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span> <span class="nt">-d</span> /mnt/Ubuntu <span class="o">]</span> <span class="o">||</span> <span class="nb">mkdir</span> /mnt/Ubuntu
mount <span class="nt">-t</span> iso9660 <span class="nt">-o</span> loop,ro /home/fedora/Downloads/ubuntu-22.04.5-live-server-amd64.iso /mnt/Ubuntu
cobbler import <span class="nt">--name</span> Ubuntu22 <span class="nt">--path</span> /mnt/Ubuntu

<span class="nb">mkdir</span> <span class="nt">-p</span> /var/www/cobbler/pub/cloud-init/Ubuntu22
<span class="nb">cp</span> ~/Downloads/ubuntu-22.04.5-live-server-amd64.iso /var/www/cobbler/pub/cloud-init/Ubuntu22/.

<span class="nv">NAME</span><span class="o">=</span><span class="s2">"Ubuntu22-casper-x86_64"</span> <span class="o">&amp;&amp;</span> cobbler distro edit <span class="nt">--name</span> <span class="nv">$NAME</span> <span class="nt">--kernel-options</span> <span class="s2">"root=/dev/ram0 ramdisk_size=1500000 ip=dhcp url=http://10.0.0.10/cblr/pub/cloud-init/Ubuntu22/ubuntu-22.04.5-live-server-amd64.iso autoinstall cloud-config-url=http://10.0.0.10/cblr/svc/op/autoinstall/profile/</span><span class="nv">$NAME</span><span class="s2">"</span> <span class="o">&amp;&amp;</span> <span class="nb">unset </span>NAME

cobbler profile edit <span class="nt">--name</span> Ubuntu22-casper-x86_64 <span class="nt">--autoinstall</span> cloud-init_user-data

<span class="nv">NAME</span><span class="o">=</span><span class="s2">"Ubuntu22-auto"</span> <span class="o">&amp;&amp;</span> cobbler system add <span class="nt">--name</span> <span class="nv">$NAME</span> <span class="nt">--profile</span> Ubuntu22-casper-x86_64 <span class="nt">--kernel-options</span> <span class="s2">"root=/dev/ram0 ramdisk_size=1500000 ip=dhcp url=http://10.0.0.10/cblr/pub/cloud-init/Ubuntu22/ubuntu-22.04.5-live-server-amd64.iso autoinstall cloud-config-url=http://10.0.0.10/cblr/svc/op/autoinstall/system/</span><span class="nv">$NAME</span><span class="s2">"</span> <span class="nt">--mac-address</span> <span class="s2">"aa:bb:cc:dd:ee:ff"</span> <span class="nt">--static</span> <span class="nb">true</span> <span class="nt">--ip-address</span> <span class="s2">"10.0.0.22"</span> <span class="nt">--netmask</span> <span class="s2">"255.255.255.0"</span> <span class="nt">--gateway</span> <span class="s2">"10.0.0.1"</span> <span class="nt">--name-servers</span> <span class="s2">"10.0.0.1 1.1.1.1 10.0.0.10"</span> <span class="nt">--hostname</span> <span class="s2">"Ubuntu22"</span> <span class="nt">--netboot-enabled</span> <span class="nb">true</span> <span class="o">&amp;&amp;</span> <span class="nb">unset </span>NAME

cobbler <span class="nb">sync</span>
</code></pre></div></div> <blockquote> <p>Again, the PXE Client is not installing via the local repo @ <code class="language-plaintext highlighter-rouge">/var/www/cobbler/distro_mirror</code>, but now that the <code class="language-plaintext highlighter-rouge">fallback: offline-install</code> option is available with Ubuntu 22.04 <code class="language-plaintext highlighter-rouge">cloud-init</code>, the installer will NOT require and internet connection to install, instead installing using the live server installer (.iso file) available on Cobbler’s public HTTP share and specified in the kernel options.</p> </blockquote> <h2 id="ubuntu-2404-pxe-deployment">Ubuntu 24.04 PXE Deployment</h2> <p>First, modify <code class="language-plaintext highlighter-rouge">/var/lib/cobbler/distro_signatures.json</code> to suppport Ubuntu 24.04 <em>(which is not included with Cobbler at the time of writing)</em> by pasting the following code block immediately following the Ubuntu 22 <code class="language-plaintext highlighter-rouge">jammy</code> signature definition:</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>      <span class="s2">"noble"</span>: <span class="o">{</span>
        <span class="s2">"signatures"</span>: <span class="o">[</span>
          <span class="s2">"dists"</span>,
          <span class="s2">".disk"</span>
        <span class="o">]</span>,
        <span class="s2">"version_file"</span>: <span class="s2">"Release|info"</span>,
        <span class="s2">"version_file_regex"</span>: <span class="s2">"Suite: noble|Ubuntu 24.04"</span>,
        <span class="s2">"kernel_arch"</span>: <span class="s2">"linux-headers-(.*)</span><span class="se">\\</span><span class="s2">.deb"</span>,
        <span class="s2">"kernel_arch_regex"</span>: null,
        <span class="s2">"supported_arches"</span>: <span class="o">[</span>
          <span class="s2">"i386"</span>,
          <span class="s2">"amd64"</span>
        <span class="o">]</span>,
        <span class="s2">"supported_repo_breeds"</span>: <span class="o">[</span>
          <span class="s2">"apt"</span>
        <span class="o">]</span>,
        <span class="s2">"kernel_file"</span>: <span class="s2">"(linux|vmlinuz(.*))"</span>,
        <span class="s2">"initrd_file"</span>: <span class="s2">"initrd(</span><span class="nv">$|</span><span class="s2">.gz</span><span class="nv">$|</span><span class="s2">.lz</span><span class="nv">$)</span><span class="s2">"</span>,
        <span class="s2">"isolinux_ok"</span>: <span class="nb">false</span>,
        <span class="s2">"default_autoinstall"</span>: <span class="s2">""</span>,
        <span class="s2">"kernel_options"</span>: <span class="s2">""</span>,
        <span class="s2">"kernel_options_post"</span>: <span class="s2">""</span>,
        <span class="s2">"template_files"</span>: <span class="s2">""</span>,
        <span class="s2">"boot_files"</span>: <span class="o">[]</span>,
        <span class="s2">"boot_loaders"</span>: <span class="o">{}</span>
      <span class="o">}</span>,
</code></pre></div></div> <blockquote> <p>With this modification made, be careful not to use the <code class="language-plaintext highlighter-rouge">cobbler signature update</code> command on the Cobbler server, which will remove any user-defined signatures.</p> </blockquote> <p>Sync up Cobbler in order to apply the changes</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>cobbler <span class="nb">sync</span>
</code></pre></div></div> <p>Take similar steps as above to import and automatically deploy Ubuntu 24.04 LTS Server over PXE</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span> <span class="nt">-d</span> /mnt/Ubuntu <span class="o">]</span> <span class="o">||</span> <span class="nb">mkdir</span> /mnt/Ubuntu
mount <span class="nt">-t</span> iso9660 <span class="nt">-o</span> loop,ro /home/fedora/Downloads/ubuntu-24.04.1-live-server-amd64.iso /mnt/Ubuntu
cobbler import <span class="nt">--name</span> Ubuntu24 <span class="nt">--path</span> /mnt/Ubuntu

<span class="nb">mkdir</span> <span class="nt">-p</span> /var/www/cobbler/pub/cloud-init/Ubuntu24
<span class="nb">cp</span> ~/Downloads/ubuntu-24.04.1-live-server-amd64.iso /var/www/cobbler/pub/cloud-init/Ubuntu24/.

<span class="nv">NAME</span><span class="o">=</span><span class="s2">"Ubuntu24-casper-x86_64"</span> <span class="o">&amp;&amp;</span> cobbler distro edit <span class="nt">--name</span> <span class="nv">$NAME</span> <span class="nt">--kernel-options</span> <span class="s2">"root=/dev/ram0 ramdisk_size=1500000 ip=dhcp url=http://10.0.0.10/cblr/pub/cloud-init/Ubuntu24/ubuntu-24.04.1-live-server-amd64.iso autoinstall cloud-config-url=http://10.0.0.10/cblr/svc/op/autoinstall/profile/</span><span class="nv">$NAME</span><span class="s2">"</span> <span class="o">&amp;&amp;</span> <span class="nb">unset </span>NAME

cobbler profile edit <span class="nt">--name</span> Ubuntu24-casper-x86_64 <span class="nt">--autoinstall</span> cloud-init_user-data

<span class="nv">NAME</span><span class="o">=</span><span class="s2">"Ubuntu24-auto"</span> <span class="o">&amp;&amp;</span> cobbler system add <span class="nt">--name</span> <span class="nv">$NAME</span> <span class="nt">--profile</span> Ubuntu24-casper-x86_64 <span class="nt">--kernel-options</span> <span class="s2">"root=/dev/ram0 ramdisk_size=1500000 ip=dhcp url=http://10.0.0.10/cblr/pub/cloud-init/Ubuntu24/ubuntu-24.04.1-live-server-amd64.iso autoinstall cloud-config-url=http://10.0.0.10/cblr/svc/op/autoinstall/system/</span><span class="nv">$NAME</span><span class="s2">"</span> <span class="nt">--mac-address</span> <span class="s2">"aa:bb:cc:dd:ee:ff"</span> <span class="nt">--static</span> <span class="nb">true</span> <span class="nt">--ip-address</span> <span class="s2">"10.0.0.24"</span> <span class="nt">--netmask</span> <span class="s2">"255.255.255.0"</span> <span class="nt">--gateway</span> <span class="s2">"10.0.0.1"</span> <span class="nt">--name-servers</span> <span class="s2">"10.0.0.1 1.1.1.1 10.0.0.10"</span> <span class="nt">--hostname</span> <span class="s2">"Ubuntu24"</span> <span class="nt">--netboot-enabled</span> <span class="nb">true</span> <span class="o">&amp;&amp;</span> <span class="nb">unset </span>NAME

cobbler <span class="nb">sync</span>
</code></pre></div></div> <blockquote> <p>Again, if using the <code class="language-plaintext highlighter-rouge">fallback: offline-install</code> option in the <code class="language-plaintext highlighter-rouge">cloud-init</code> template for this System, the PXE Client will use the .iso file hosted by Cobbler as the source for installation.</p> </blockquote> <h2 id="tips--troubleshooting">Tips &amp; Troubleshooting</h2> <ol> <li> <p>The <a href="/blog/2024/Cobbler-v3.3.6-Beginners-Guide/">Cobbler 3.3.6 Beginner’s Guide</a> <strong>Tips &amp; Troubleshooting</strong> section contains some basic recommendations and limitations of Cobbler which will not be repeated here.</p> </li> <li> <p><strong>Cobbler triggers</strong></p> <ul> <li> <p>Cobbler is normally a dynamic and responsive app that implements many options, parameters, and configurations on-demand through <code class="language-plaintext highlighter-rouge">edit|add|remove|etc...</code> actions, not requiring a <code class="language-plaintext highlighter-rouge">cobbler sync</code> to commit most changes. However, it is recommended to run <code class="language-plaintext highlighter-rouge">cobbler sync</code> after any changes to a Cobbler Distro/Profile/System when using Cobbler sync-triggers in this manner <em>(editing DHCP configs, boot options, etc…)</em>, unless you’re absolutely certain otherwise.</p> </li> <li> <p>Cobbler recommends writing triggers as Python modules and has a lot of good info in their <a href="https://cobbler.readthedocs.io/en/latest/user-guide/extending-cobbler.html#about">docs</a>, but the “old-style” bash script triggers used in this guide will get the job done, <em>slowly.</em></p> </li> </ul> </li> <li> <p>Troubleshooting the installation</p> <ul> <li> <p>The Ubuntu installer will reboot the system automatically upon completing a <code class="language-plaintext highlighter-rouge">cloud-init</code> auto-install. To prevent this, append the following line to the end of the autoinstall template (<code class="language-plaintext highlighter-rouge">cloud-init_user-data</code>) as the final command in the <code class="language-plaintext highlighter-rouge">late-commands:</code> section <em>(be sure the spacing/indentation aligns with the rest of the</em> <code class="language-plaintext highlighter-rouge">late-command</code> <em>entries)</em>:</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nb">rm</span> /target/etc/apt/apt.conf.d/99needrestart
</code></pre></div> </div> </li> </ul> </li> <li> <p>More info on <code class="language-plaintext highlighter-rouge">cloud-init</code></p> <ul> <li> <p><a href="https://cloudinit.readthedocs.io/en/22.1_a/topics/modules.html">https://cloudinit.readthedocs.io/en/22.1_a/topics/modules.html</a></p> </li> <li> <p><a href="https://canonical-subiquity.readthedocs-hosted.com/en/latest/reference/autoinstall-reference.html">https://canonical-subiquity.readthedocs-hosted.com/en/latest/reference/autoinstall-reference.html</a></p> <ul> <li><a href="https://canonical-subiquity.readthedocs-hosted.com/en/latest/reference/autoinstall-reference.html#fallback">https://canonical-subiquity.readthedocs-hosted.com/en/latest/reference/autoinstall-reference.html#fallback</a></li> </ul> </li> <li> <p><a href="https://canonical-subiquity.readthedocs-hosted.com/en/latest/tutorial/creating-autoinstall-configuration.html">https://canonical-subiquity.readthedocs-hosted.com/en/latest/tutorial/creating-autoinstall-configuration.html</a></p> </li> </ul> </li> <li> <p>The <code class="language-plaintext highlighter-rouge">kernel-options</code> used above were based off of Ubuntu’s official docs</p> <ul> <li> <p><a href="https://docs.cloud-init.io/en/latest/explanation/kernel-command-line.html#kernel-cloud-config-url-configuration">https://docs.cloud-init.io/en/latest/explanation/kernel-command-line.html#kernel-cloud-config-url-configuration</a></p> </li> <li> <p><a href="https://canonical-subiquity.readthedocs-hosted.com/en/latest/tutorial/providing-autoinstall.html">https://canonical-subiquity.readthedocs-hosted.com/en/latest/tutorial/providing-autoinstall.html</a></p> </li> </ul> </li> <li> <p>Additional references:</p> <ul> <li> <p>(https://github.com/cobbler/cobbler/discussions/3573)[https://github.com/cobbler/cobbler/discussions/3573]</p> </li> <li> <p><a href="https://github.com/cobbler/cobbler/issues/2339">https://github.com/cobbler/cobbler/issues/2339</a></p> </li> <li> <p><a href="https://askubuntu.com/questions/1235723/automated-20-04-server-installation-using-pxe-and-live-server-image">https://askubuntu.com/questions/1235723/automated-20-04-server-installation-using-pxe-and-live-server-image</a></p> </li> <li> <p><a href="https://github.com/cobbler/cobbler/issues/2697">https://github.com/cobbler/cobbler/issues/2697</a></p> </li> <li> <p><a href="https://louwrentius.com/understanding-the-ubuntu-2004-lts-server-autoinstaller.html">https://louwrentius.com/understanding-the-ubuntu-2004-lts-server-autoinstaller.html</a></p> </li> <li> <p><a href="https://cdimage.ubuntu.com/ubuntu-legacy-server/releases/20.04/release/">https://cdimage.ubuntu.com/ubuntu-legacy-server/releases/20.04/release/</a></p> </li> <li> <p><a href="http://archive.ubuntu.com/ubuntu/dists/focal/">http://archive.ubuntu.com/ubuntu/dists/focal/</a></p> </li> <li> <p><a href="https://cloudinit.readthedocs.io/en/latest/howto/disable_cloud_init.html">https://cloudinit.readthedocs.io/en/latest/howto/disable_cloud_init.html</a></p> </li> <li> <p><a href="https://vinfrastructure.it/2024/03/how-to-disable-cloud-init-on-ubuntu-server/">https://vinfrastructure.it/2024/03/how-to-disable-cloud-init-on-ubuntu-server/</a></p> </li> <li> <p><a href="https://maas.io/">https://maas.io/</a></p> </li> <li> <p><a href="https://documentation.ubuntu.com/server/how-to/installation/how-to-netboot-the-server-installer-on-amd64/">https://documentation.ubuntu.com/server/how-to/installation/how-to-netboot-the-server-installer-on-amd64/</a></p> </li> <li> <p><a href="https://discourse.ubuntu.com/t/netbooting-the-live-server-installer/14510">https://discourse.ubuntu.com/t/netbooting-the-live-server-installer/14510</a></p> </li> <li> <p><a href="https://releases.ubuntu.com/">https://releases.ubuntu.com/</a></p> </li> <li> <p><a href="https://ubuntu.com/download/server">https://ubuntu.com/download/server</a></p> </li> <li> <p><a href="https://github.com/cobbler/cobbler/issues/2339">https://github.com/cobbler/cobbler/issues/2339</a></p> </li> <li> <p><a href="https://askubuntu.com/questions/1235723/automated-20-04-server-installation-using-pxe-and-live-server-image/1235724">https://askubuntu.com/questions/1235723/automated-20-04-server-installation-using-pxe-and-live-server-image/1235724</a></p> </li> <li> <p><a href="https://askubuntu.com/questions/1406685/22-04-jammy-pxe-booting-help">https://askubuntu.com/questions/1406685/22-04-jammy-pxe-booting-help</a></p> </li> <li> <p><a href="https://www.molnar-peter.hu/en/ubuntu-jammy-netinstall-pxe.html">https://www.molnar-peter.hu/en/ubuntu-jammy-netinstall-pxe.html</a></p> </li> <li> <p><a href="https://cloudinit.readthedocs.io/en/24.1/howto/run_cloud_init_locally.html">https://cloudinit.readthedocs.io/en/24.1/howto/run_cloud_init_locally.html</a></p> <ul> <li><a href="https://cloudinit.readthedocs.io/en/latest/howto/launching.html">https://cloudinit.readthedocs.io/en/latest/howto/launching.html</a></li> </ul> </li> <li> <p>These all seem pretty legacy, no mention of recent releases or cloud-init</p> <ul> <li> <p><a href="https://ubuntu.com/server/docs/how-to-netboot-the-server-installer-on-amd64">https://ubuntu.com/server/docs/how-to-netboot-the-server-installer-on-amd64</a></p> </li> <li> <p><a href="https://cdimage.ubuntu.com/netboot/">https://cdimage.ubuntu.com/netboot/</a></p> </li> <li> <p><a href="https://help.ubuntu.com/community/Installation/Netboot">https://help.ubuntu.com/community/Installation/Netboot</a></p> </li> <li> <p><a href="https://help.ubuntu.com/community/Installation/LocalNet">https://help.ubuntu.com/community/Installation/LocalNet</a></p> </li> <li> <p><a href="https://cdimage.ubuntu.com/ubuntu-legacy-server/releases/20.04/release/">https://cdimage.ubuntu.com/ubuntu-legacy-server/releases/20.04/release/</a></p> </li> <li> <p><a href="https://help.ubuntu.com/community/Installation/MinimalCD">https://help.ubuntu.com/community/Installation/MinimalCD</a></p> </li> </ul> </li> </ul> </li> </ol>]]></content><author><name>Sus-Admin</name></author><category term="cobbler"/><summary type="html"><![CDATA[This guide assumes that you have a Fedora 34 server or workstation system configured to run Cobbler v3.3.7 similarly to the Cobbler v3.3.6 Beginner’s guide.]]></summary></entry><entry><title type="html">Cobbler (v3.3.7) XCP-ng Deployment Guide</title><link href="https://sus-admin.github.io/blog/2024/Cobbler-v3.3.7-XCP-ng-Deployment-Guide/" rel="alternate" type="text/html" title="Cobbler (v3.3.7) XCP-ng Deployment Guide"/><published>2024-12-11T00:00:00+00:00</published><updated>2024-12-11T00:00:00+00:00</updated><id>https://sus-admin.github.io/blog/2024/Cobbler-v3.3.7-XCP-ng-Deployment-Guide</id><content type="html" xml:base="https://sus-admin.github.io/blog/2024/Cobbler-v3.3.7-XCP-ng-Deployment-Guide/"><![CDATA[<p>This guide assumes that you have a Fedora 34 server or workstation system configured to run Cobbler v3.3.7 similarly to the <a href="/blog/2024/Cobbler-v3.3.6-Beginners-Guide/">Cobbler v3.3.6 Beginner’s guide</a>.</p> <h2 class="no_toc" id="table-of-contents">Table of Contents</h2> <ol id="markdown-toc"> <li><a href="#objective" id="markdown-toc-objective">Objective</a> <ol> <li><a href="#caveats" id="markdown-toc-caveats">Caveats</a></li> </ol> </li> <li><a href="#cobbler-server-prep" id="markdown-toc-cobbler-server-prep">Cobbler Server Prep</a> <ol> <li><a href="#dependencies" id="markdown-toc-dependencies">Dependencies</a></li> </ol> </li> <li><a href="#xcp-ng-821-pxe-deployment" id="markdown-toc-xcp-ng-821-pxe-deployment">XCP-ng 8.2.1 PXE Deployment</a> <ol> <li><a href="#standard-kernel" id="markdown-toc-standard-kernel">Standard Kernel</a></li> <li><a href="#alternate-kernel" id="markdown-toc-alternate-kernel">Alternate Kernel</a> <ol> <li><a href="#pxe-boot-alt-kernel" id="markdown-toc-pxe-boot-alt-kernel">PXE Boot Alt Kernel</a></li> <li><a href="#install-alt-kernel" id="markdown-toc-install-alt-kernel">Install Alt Kernel</a></li> </ol> </li> </ol> </li> <li><a href="#tips--troubleshooting" id="markdown-toc-tips--troubleshooting">Tips &amp; Troubleshooting</a></li> </ol> <h2 id="objective">Objective</h2> <p>Starting where the <a href="/blog/2024/Cobbler-v3.3.6-Beginners-Guide/">Beginner’s guide</a> left off, further configure the Cobbler v3.3.7 server to deploy XCP-ng v8.2.1 via PXE network boot, using the same system and network environment with the exception of reconfiguring the <strong>PXE Client</strong> VM to have <strong>64 GB HDD</strong> in order to meet the due to the <a href="https://docs.xcp-ng.org/installation/requirements/">minimum requirements</a> of XCP-ng 8.2.1. This guide assumes that you still have <code class="language-plaintext highlighter-rouge">selinux</code> and <code class="language-plaintext highlighter-rouge">firewalld</code> configured and enabled as described in the Beginner’s guide.</p> <h3 id="caveats">Caveats</h3> <ul> <li> <p>Cobbler’s support for XCP-ng not up-to-date, necessitating several custom scripts and templates for proper supported_arches</p> </li> <li> <p>XCP-ng 8.2.1 uses a custom fork of a fairly old linux kernel, so this guide will provide several solutions to customizing the installation process and resulting systems for supporting different hardware.</p> </li> </ul> <h2 id="cobbler-server-prep">Cobbler Server Prep</h2> <p>Cobbler v3.3.7 is not natively designed to support XCP-ng v8.2.1 and will require some code changes in order to import the distro properly. Some Cobbler sync-triggers will also be required to correct the kernel command line parameters in the bootloader configs.</p> <h3 id="dependencies">Dependencies</h3> <p>Download the official installation media for XCP-ng 8.2.1:</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cd</span> ~/Downloads <span class="o">&amp;&amp;</span> wget https://updates.xcp-ng.org/isos/8.2/xcp-ng-8.2.1-20231130.iso
</code></pre></div></div> <p>Define the OS Version by inserting the following code-block in <code class="language-plaintext highlighter-rouge">/var/lib/cobbler/distro_signatures.json</code> immediately following the entry named <code class="language-plaintext highlighter-rouge">xcp16</code> which is included with Cobbler</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>      <span class="s2">"xcp821"</span>: <span class="o">{</span>
        <span class="s2">"signatures"</span>: <span class="o">[</span>
          <span class="s2">"Packages"</span>
        <span class="o">]</span>,
        <span class="s2">"version_file"</span>: <span class="s2">"^xcp-ng-release-8</span><span class="se">\\</span><span class="s2">.2</span><span class="se">\\</span><span class="s2">.1.*</span><span class="se">\\</span><span class="s2">.x86_64</span><span class="se">\\</span><span class="s2">.rpm$"</span>,
        <span class="s2">"version_file_regex"</span>: null,
        <span class="s2">"kernel_arch"</span>: <span class="s2">"xen</span><span class="se">\\</span><span class="s2">.gz"</span>,
        <span class="s2">"kernel_arch_regex"</span>: <span class="s2">"^.*(x86_64).*$"</span>,
        <span class="s2">"supported_arches"</span>: <span class="o">[</span>
          <span class="s2">"x86_64"</span>
        <span class="o">]</span>,
        <span class="s2">"supported_repo_breeds"</span>: <span class="o">[]</span>,
        <span class="s2">"kernel_file"</span>: <span class="s2">"vmlinuz"</span>,
        <span class="s2">"initrd_file"</span>: <span class="s2">"xen</span><span class="se">\\</span><span class="s2">.gz"</span>,
        <span class="s2">"isolinux_ok"</span>: <span class="nb">false</span>,
        <span class="s2">"default_autoinstall"</span>: <span class="s2">"answerfile.xml"</span>,
        <span class="s2">"kernel_options"</span>: <span class="s2">"dom0_max_vcpus=1-2 dom0_mem=max:752M,752M"</span>,
        <span class="s2">"kernel_options_post"</span>: <span class="s2">""</span>,
        <span class="s2">"boot_files"</span>: <span class="o">[</span>
          <span class="s2">"install.img"</span>
        <span class="o">]</span>
      <span class="o">}</span>,
</code></pre></div></div> <blockquote> <p>With this modification made, be careful not to use the <code class="language-plaintext highlighter-rouge">cobbler signature update</code> command on the Cobbler server, which will remove any user-defined signatures.</p> </blockquote> <p>Edit the <code class="language-plaintext highlighter-rouge">import_signatures.py</code> script included with Cobbler in order to import the new Distro</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">START</span><span class="o">=</span><span class="si">$(</span><span class="nb">cat</span> <span class="nt">-n</span> /usr/local/lib/python3.9/site-packages/cobbler/modules/managers/import_signatures.py | <span class="nb">grep</span> <span class="s2">"krn_lines = self.get_file_lines(os.path.join(dirname, x))"</span> | <span class="nb">awk</span> <span class="o">{</span><span class="s1">' print $1 '</span><span class="o">}</span><span class="si">)</span>
<span class="nb">head</span> <span class="nt">-n</span> <span class="si">$(</span><span class="nb">echo</span> <span class="k">$((</span><span class="nv">$START</span><span class="o">-</span><span class="m">1</span><span class="k">))</span><span class="si">)</span> /usr/local/lib/python3.9/site-packages/cobbler/modules/managers/import_signatures.py <span class="o">&gt;</span> /tmp/import_signatures.py
<span class="nv">END</span><span class="o">=</span><span class="si">$(</span><span class="nb">cat</span> <span class="nt">-n</span> /usr/local/lib/python3.9/site-packages/cobbler/modules/managers/import_signatures.py | <span class="nb">grep</span> <span class="s2">"if m:"</span> | <span class="nb">awk</span> <span class="o">{</span><span class="s1">' print $1 '</span><span class="o">}</span><span class="si">)</span>
<span class="nb">cat</span> <span class="o">&lt;&lt;</span> <span class="no">EOF</span><span class="sh"> &gt;&gt; /tmp/import_signatures.py
                    ftype_krn = magic.detect_from_filename(os.path.join(dirname, x))
                    if ftype_krn.mime_type == "application/gzip":
                        with gzip.open(os.path.join(dirname, x), 'r') as f:
                            krn_lines = f.readlines()
                    else:
                        krn_lines = self.get_file_lines(os.path.join(dirname, x))
                    for line in krn_lines:
                        try:
                            m = re_krn2.match(line)
                        except TypeError:
                            #  regex evaluatoin "string pattern" failed... is it bytes?
                            # https://docs.python.org/3.12/library/codecs.html
                            try:
                                m = re_krn2.match(line.decode("UTF-8"))
                            except UnicodeDecodeError:
                                try:
                                    m = re_krn2.match(line.decode("ASCII"))
                                except UnicodeDecodeError:
                                    try:
                                        m = re_krn2.match(line.decode("latin-1"))
                                    except:
                                        pass
                                except:
                                    pass
                            except:
                                pass
                        except:
                            pass
</span><span class="no">EOF
</span><span class="nb">tail</span> <span class="nt">-n</span>+<span class="nv">$END</span> /usr/local/lib/python3.9/site-packages/cobbler/modules/managers/import_signatures.py <span class="o">&gt;&gt;</span> /tmp/import_signatures.py 
<span class="nb">cp</span> /tmp/import_signatures.py /usr/local/lib/python3.9/site-packages/cobbler/modules/managers/.
<span class="nb">rm</span> <span class="nt">-f</span> /tmp/import_signatures.py <span class="o">&amp;&amp;</span> <span class="nv">START</span><span class="o">=</span><span class="s2">""</span> <span class="o">&amp;&amp;</span> <span class="nv">END</span><span class="o">=</span><span class="s2">""</span>
</code></pre></div></div> <p>Create the [answerfile.xml] file with the following contents and save it to <code class="language-plaintext highlighter-rouge">/var/lib/cobbler/templates/answerfile.xml</code></p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;?xml <span class="nv">version</span><span class="o">=</span><span class="s2">"1.0"</span>?&gt;
 &lt;installation sr-type<span class="o">=</span><span class="s2">"lvm"</span> <span class="nv">mode</span><span class="o">=</span><span class="s2">"fresh"</span> netinstall-gpg-check<span class="o">=</span><span class="s2">"true"</span><span class="o">&gt;</span>
  &lt;keymap&gt;us&lt;/keymap&gt;
  &lt;timezone&gt;US/Eastern&lt;/timezone&gt;
  &lt;<span class="nb">source type</span><span class="o">=</span><span class="s2">"url"</span><span class="o">&gt;</span><span class="nv">$tree</span>/&lt;/source&gt;
  &lt;driver-source <span class="nb">type</span><span class="o">=</span><span class="s2">"url"</span><span class="o">&gt;</span><span class="nv">$tree</span>/&lt;/driver-source&gt;
  &lt;primary-disk&gt;sda&lt;/primary-disk&gt;
  &lt;root-password <span class="nb">type</span><span class="o">=</span><span class="s2">"hash"</span><span class="o">&gt;</span><span class="nv">$default_password_crypted</span>&lt;/root-password&gt;
  &lt;bootloader <span class="nv">location</span><span class="o">=</span><span class="s2">"mbr"</span><span class="o">&gt;</span>grub2&lt;/bootloader&gt;
<span class="nv">$SNIPPET</span><span class="o">(</span><span class="s1">'network_config_XCP'</span><span class="o">)</span>  &lt;ntp-server&gt;us.pool.ntp.org&lt;/ntp-server&gt;
  &lt;network-backend&gt;vswitch&lt;/network-backend&gt;
  &lt;post-install-script <span class="nb">type</span><span class="o">=</span><span class="s2">"url"</span><span class="o">&gt;</span>
<span class="c">## Figure out if we're automating OS installation for a system or a profile</span>
<span class="c">#if $getVar('system_name','') != ''</span>
<span class="c">#set $what = "system"</span>
<span class="c">#else</span>
<span class="c">#set $what = "profile"</span>
<span class="c">#end if</span>
   http://<span class="nv">$http_server</span>/cblr/svc/op/script/<span class="nv">$what</span>/<span class="nv">$name</span>/?script<span class="o">=</span>XCP-post-install.sh
  &lt;/post-install-script&gt;
 &lt;/installation&gt;
</code></pre></div></div> <p>Create the Cobbler Snippet called by the autoinstall template above:</p> <ul> <li><code class="language-plaintext highlighter-rouge">/var/lib/cobbler/snippets/network_config_XCP</code></li> </ul> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">## start of cobbler network_config generated code</span>
<span class="c">#if $getVar("system_name","") != ""</span>
    <span class="c">#set ikeys = $interfaces.keys()</span>
    <span class="c">#import re</span>
    <span class="c">#for $iname in $ikeys</span>
        <span class="c">#set $idata = $interfaces[$iname]</span>
        <span class="c">## Ignore BMC interface</span>
        <span class="c">#if $idata["interface_type"].lower() == "bmc"</span>
            <span class="c">#continue</span>
        <span class="c">#end if</span>
    <span class="c">#end for</span>
    <span class="c">#for $iname in $ikeys</span>
        <span class="c">#set $idata    = $interfaces[$iname]</span>
        <span class="c">#set $mac      = $idata["mac_address"]</span>
        <span class="c">#set $static   = $idata["static"]</span>
        <span class="c">#set $ip       = $idata["ip_address"]</span>
        <span class="c">#set $netmask  = $idata["netmask"]</span>
        <span class="c">#set $type     = $idata["interface_type"]</span>
        <span class="c">## Ignore BMC interface</span>
        <span class="c">#if $type == "bmc"</span>
            <span class="c">#continue</span>
        <span class="c">#end if</span>
        <span class="c">#if $mac != ""</span>
            <span class="c">#if $static == True:</span>
                <span class="c">#if $ip != "":</span>
  &lt;admin-interface <span class="nv">name</span><span class="o">=</span><span class="s2">"</span><span class="nv">$iname</span><span class="s2">"</span> <span class="nv">proto</span><span class="o">=</span><span class="s2">"static"</span><span class="o">&gt;</span>
   &lt;ipaddr&gt;<span class="nv">$ip</span>&lt;/ipaddr&gt;
                    <span class="c">#if $netmask != "":</span>
   &lt;subnet&gt;<span class="nv">$netmask</span>&lt;/subnet&gt;
                    <span class="c">#end if</span>
                <span class="c">#end if</span>
                <span class="c">#if $gateway != "":</span>
   &lt;gateway&gt;<span class="nv">$gateway</span>&lt;/gateway&gt;
  &lt;/admin-interface&gt;
                <span class="c">#else</span>
  &lt;/admin-interface&gt;
                <span class="c">#end if</span>
                <span class="c">#if $name_servers and $name_servers[0] != "":</span>
                    <span class="c">## Anaconda only allows one nameserver</span>
  &lt;name-server&gt;<span class="nv">$name_servers</span><span class="o">[</span>0]&lt;/name-server&gt;
                <span class="c">#end if</span>
            <span class="c">#else</span>
  &lt;admin-interface <span class="nv">name</span><span class="o">=</span><span class="s2">"</span><span class="nv">$iname</span><span class="s2">"</span> <span class="nv">proto</span><span class="o">=</span><span class="s2">"dhcp"</span> /&gt;
            <span class="c">#end if</span>
        <span class="c">#else</span>
  &lt;admin-interface <span class="nv">name</span><span class="o">=</span><span class="s2">"</span><span class="nv">$iname</span><span class="s2">"</span> <span class="nv">proto</span><span class="o">=</span><span class="s2">"dhcp"</span> /&gt;
        <span class="c">#end if</span>
        <span class="c">#if $hostname != ""</span>
  &lt;<span class="nb">hostname</span><span class="o">&gt;</span><span class="nv">$hostname</span>&lt;/hostname&gt;
        <span class="c">#else</span>
            <span class="c">#set $myhostname = $getVar('name','').replace("_","-")</span>
  &lt;<span class="nb">hostname</span><span class="o">&gt;</span><span class="nv">$myhostname</span>&lt;/hostname&gt;
        <span class="c">#end if</span>
    <span class="c">#end for</span>
<span class="c">#else</span>
<span class="c">## profile based install so just provide one interface for starters</span>
<span class="c">#set $myhostname = $getVar('hostname',$getVar('name','cobbler')).replace("_","-")</span>
  &lt;admin-interface <span class="nv">name</span><span class="o">=</span><span class="s2">"eth0"</span> <span class="nv">proto</span><span class="o">=</span><span class="s2">"dhcp"</span> /&gt;
  &lt;<span class="nb">hostname</span><span class="o">&gt;</span><span class="nv">$myhostname</span>&lt;/hostname&gt;
<span class="c">#end if</span>
</code></pre></div></div> <p>Create the post-install-script referenced in the autoinstall (answerfile.xml) template created above:</p> <ul> <li><code class="language-plaintext highlighter-rouge">/var/lib/cobbler/scripts/XCP-post-install.sh</code></li> </ul> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#!/bin/bash</span>
yum <span class="nt">-c</span> <span class="nv">$1</span>/etc/yum.conf <span class="nt">--installroot</span> <span class="nv">$1</span> update <span class="nt">-y</span>
yum <span class="nt">-c</span> <span class="nv">$1</span>/etc/yum.conf <span class="nt">--installroot</span> <span class="nv">$1</span> <span class="nb">install</span> <span class="nt">-y</span> vim ipref
<span class="nb">chroot</span> <span class="nv">$1</span> <span class="nb">touch</span> /root/test.txt
<span class="c"># # # *** OR *** # # #</span>
<span class="c"># echo "touch /root/test.txt" | chroot $1 /bin/bash -s</span>
</code></pre></div></div> <p>Create the following Cobbler sync-triggers which will correct the bootloader configurations for both GRUB and PXELINUX for all XCP-ng 8.2.1 Profiles and Systems <em>(saved to the filesystem location noted above the code-block)</em>:</p> <ul> <li><code class="language-plaintext highlighter-rouge">/var/lib/cobbler/triggers/sync/post/fix-XCP-BIOS_CSM-PXE.sh</code></li> </ul> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#!/bin/bash</span>
<span class="k">for </span>PROFILE <span class="k">in</span> <span class="si">$(</span>cobbler profile list<span class="si">)</span><span class="p">;</span> <span class="k">do
    </span><span class="nv">DIST</span><span class="o">=</span><span class="si">$(</span>cobbler profile report <span class="nt">--name</span> <span class="nv">$PROFILE</span> | <span class="nb">grep </span>Distribution | <span class="nb">awk</span> <span class="o">{</span><span class="s1">' print $3 '</span><span class="o">}</span><span class="si">)</span><span class="p">;</span>
    <span class="nv">VER</span><span class="o">=</span><span class="si">$(</span>cobbler distro report <span class="nt">--name</span> <span class="nv">$DIST</span> | <span class="nb">grep</span> <span class="s2">"OS Version"</span> | <span class="nb">awk</span> <span class="o">{</span><span class="s1">' print $4 '</span><span class="o">}</span><span class="si">)</span><span class="p">;</span>
    <span class="o">[[</span> <span class="o">(</span><span class="nv">$VER</span> <span class="o">==</span> <span class="s1">'xcp821'</span> <span class="o">||</span> <span class="nv">$VER</span> <span class="o">==</span> <span class="s1">'xcp83'</span><span class="o">)</span> <span class="o">]]</span> <span class="o">||</span> <span class="k">continue</span><span class="p">;</span>
    <span class="nv">LINE</span><span class="o">=</span><span class="si">$(</span><span class="nb">cat</span> <span class="nt">-n</span> /var/lib/tftpboot/pxelinux.cfg/default | <span class="nb">grep</span> <span class="nt">-m</span> 1 <span class="s2">"MENU LABEL </span><span class="nv">$PROFILE</span><span class="s2">"</span> | <span class="nb">awk</span> <span class="o">{</span><span class="s1">' print $1'</span><span class="o">}</span><span class="si">)</span><span class="p">;</span>
    <span class="nb">head</span> <span class="nt">-n</span> <span class="nv">$LINE</span> /var/lib/tftpboot/pxelinux.cfg/default <span class="o">&gt;</span> /tmp/default<span class="p">;</span>
    <span class="nv">LINE</span><span class="o">=</span><span class="si">$(</span><span class="nb">echo</span> <span class="k">$((</span><span class="si">$(</span><span class="nb">tail</span> <span class="nt">-n</span>+<span class="si">$(</span><span class="nb">echo</span> <span class="k">$((</span><span class="nv">$LINE</span><span class="o">+</span><span class="m">1</span><span class="k">))</span><span class="si">)</span> /var/lib/tftpboot/pxelinux.cfg/default | <span class="nb">grep</span> <span class="nt">-n</span> <span class="nt">-m</span> 1 ^[LABEL<span class="se">\|</span>MENU] | <span class="nb">awk</span> <span class="o">{</span><span class="s1">' print $1 '</span><span class="o">}</span> | <span class="nb">sed</span> <span class="s1">'s,:.*,,'</span><span class="si">)</span><span class="o">+</span><span class="nv">$LINE</span><span class="k">))</span><span class="si">)</span><span class="p">;</span>
    <span class="nb">echo</span> <span class="s2">"        kernel mboot.c32"</span> <span class="o">&gt;&gt;</span> /tmp/default<span class="p">;</span>
    <span class="nb">echo</span> <span class="s2">"        append /images/</span><span class="nv">$DIST</span><span class="s2">/xen.gz dom0_max_vcpus=2 dom0_mem=2048M,max:2048M com1=115200,8n1 console=com1,vga --- /images/</span><span class="nv">$DIST</span><span class="s2">/vmlinuz xencons=hvc console=hvc0 console=tty0 --- /images/</span><span class="nv">$DIST</span><span class="s2">/install.img"</span> <span class="o">&gt;&gt;</span> /tmp/default
    <span class="nb">echo</span> <span class="s2">"        ipappend 2"</span> <span class="o">&gt;&gt;</span> /tmp/default<span class="p">;</span>
    <span class="nb">tail</span> <span class="nt">-n</span>+<span class="nv">$LINE</span> /var/lib/tftpboot/pxelinux.cfg/default <span class="o">&gt;&gt;</span> /tmp/default<span class="p">;</span>
    <span class="nv">LINE</span><span class="o">=</span><span class="s2">""</span> <span class="o">&amp;&amp;</span> <span class="nv">DIST</span><span class="o">=</span><span class="s2">""</span> <span class="o">&amp;&amp;</span> <span class="nv">VER</span><span class="o">=</span><span class="s2">""</span><span class="p">;</span>
    <span class="nb">cp</span> /tmp/default /var/lib/tftpboot/pxelinux.cfg/. <span class="o">&amp;&amp;</span> <span class="nb">rm</span> <span class="nt">-f</span> /tmp/default<span class="p">;</span>
<span class="k">done</span>
</code></pre></div></div> <ul> <li><code class="language-plaintext highlighter-rouge">/var/lib/cobbler/triggers/sync/post/fix-XCP-GRUB.sh</code></li> </ul> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#!/bin/bash</span>
<span class="k">for </span>PROFILE <span class="k">in</span> <span class="si">$(</span>cobbler profile list<span class="si">)</span><span class="p">;</span> <span class="k">do 
    </span><span class="nv">DIST</span><span class="o">=</span><span class="si">$(</span>cobbler profile report <span class="nt">--name</span> <span class="nv">$PROFILE</span> | <span class="nb">grep </span>Distribution | <span class="nb">awk</span> <span class="o">{</span><span class="s1">' print $3 '</span><span class="o">}</span><span class="si">)</span><span class="p">;</span>
    <span class="nv">VER</span><span class="o">=</span><span class="si">$(</span>cobbler distro report <span class="nt">--name</span> <span class="nv">$DIST</span> | <span class="nb">grep</span> <span class="s2">"OS Version"</span> | <span class="nb">awk</span> <span class="o">{</span><span class="s1">' print $4 '</span><span class="o">}</span><span class="si">)</span><span class="p">;</span>
    <span class="o">[[</span> <span class="o">(</span><span class="nv">$VER</span> <span class="o">==</span> <span class="s1">'xcp821'</span> <span class="o">||</span> <span class="nv">$VER</span> <span class="o">==</span> <span class="s1">'xcp83'</span><span class="o">)</span> <span class="o">]]</span> <span class="o">||</span> <span class="k">continue</span><span class="p">;</span>
    <span class="nv">LINE</span><span class="o">=</span><span class="si">$(</span><span class="nb">cat</span> <span class="nt">-n</span> /var/lib/tftpboot/grub/x86_64_menu_items.cfg | <span class="nb">grep</span> <span class="s2">"menuentry '</span><span class="nv">$PROFILE</span><span class="s2">"</span> | <span class="nb">awk</span> <span class="o">{</span><span class="s1">' print $1'</span><span class="o">}</span><span class="si">)</span><span class="p">;</span>
    <span class="nb">head</span> <span class="nt">-n</span> <span class="nv">$LINE</span> /var/lib/tftpboot/grub/x86_64_menu_items.cfg <span class="o">&gt;</span> /tmp/x86_64_menu_items.cfg<span class="p">;</span>
    <span class="nv">LINE</span><span class="o">=</span><span class="si">$(</span><span class="nb">echo</span> <span class="k">$((</span><span class="si">$(</span><span class="nb">tail</span> <span class="nt">-n</span>+<span class="si">$(</span><span class="nb">echo</span> <span class="k">$((</span><span class="nv">$LINE</span><span class="o">+</span><span class="m">1</span><span class="k">))</span><span class="si">)</span> /var/lib/tftpboot/grub/x86_64_menu_items.cfg | <span class="nb">grep</span> <span class="nt">-n</span> <span class="nt">-m</span> 1 ^<span class="o">}</span> | <span class="nb">awk</span> <span class="o">{</span><span class="s1">' print $1 '</span><span class="o">}</span> | <span class="nb">sed</span> <span class="s1">'s,:.*,,'</span><span class="si">)</span><span class="o">+</span><span class="nv">$LINE</span><span class="k">))</span><span class="si">)</span><span class="p">;</span>
    <span class="nb">echo</span> <span class="s2">"  echo 'chainloading...?'"</span> <span class="o">&gt;&gt;</span> /tmp/x86_64_menu_items.cfg<span class="p">;</span>
    <span class="nb">echo</span> <span class="s2">"  multiboot2 /images/</span><span class="nv">$DIST</span><span class="s2">/xen.gz dom0_mem=2048M,max:2048M watchdog dom0_max_vcpus=4 com1=115200,8n1 console=com1,vga"</span> <span class="o">&gt;&gt;</span> /tmp/x86_64_menu_items.cfg<span class="p">;</span>
    <span class="nb">echo</span> <span class="s2">"  echo 'loading kernel...'"</span> <span class="o">&gt;&gt;</span> /tmp/x86_64_menu_items.cfg<span class="p">;</span>
    <span class="nb">echo</span> <span class="s2">"  module2 /images/</span><span class="nv">$DIST</span><span class="s2">/vmlinuz console=hvc0 console=tty0 answerfile=http://10.0.0.10/cblr/svc/op/autoinstall/profile/</span><span class="nv">$PROFILE</span><span class="s2"> install"</span> <span class="o">&gt;&gt;</span> /tmp/x86_64_menu_items.cfg<span class="p">;</span>
    <span class="nb">echo</span> <span class="s2">"  echo 'loading initial ramdisk...'"</span> <span class="o">&gt;&gt;</span> /tmp/x86_64_menu_items.cfg<span class="p">;</span>
    <span class="nb">echo</span> <span class="s2">"  module2 /images/</span><span class="nv">$DIST</span><span class="s2">/install.img"</span> <span class="o">&gt;&gt;</span> /tmp/x86_64_menu_items.cfg<span class="p">;</span>
    <span class="nb">echo</span> <span class="s2">"  echo 'done'"</span> <span class="o">&gt;&gt;</span> /tmp/x86_64_menu_items.cfg<span class="p">;</span>
    <span class="nb">tail</span> <span class="nt">-n</span>+<span class="nv">$LINE</span> /var/lib/tftpboot/grub/x86_64_menu_items.cfg <span class="o">&gt;&gt;</span> /tmp/x86_64_menu_items.cfg<span class="p">;</span>
    <span class="nv">LINE</span><span class="o">=</span><span class="s2">""</span> <span class="o">&amp;&amp;</span> <span class="nv">DIST</span><span class="o">=</span><span class="s2">""</span> <span class="o">&amp;&amp;</span> <span class="nv">VER</span><span class="o">=</span><span class="s2">""</span><span class="p">;</span>
    <span class="nb">cp</span> /tmp/x86_64_menu_items.cfg /var/lib/tftpboot/grub/. <span class="o">&amp;&amp;</span> <span class="nb">rm</span> <span class="nt">-f</span> /tmp/x86_64_menu_items.cfg<span class="p">;</span>
<span class="k">done</span>
</code></pre></div></div> <ul> <li><code class="language-plaintext highlighter-rouge">/var/lib/cobbler/triggers/sync/post/fix-XCP-systems-GRUB.sh</code></li> </ul> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#!/bin/bash</span>
<span class="k">for </span>SYSTEM <span class="k">in</span> <span class="si">$(</span>cobbler system list<span class="si">)</span><span class="p">;</span> <span class="k">do
    </span><span class="nv">PROFILE</span><span class="o">=</span><span class="si">$(</span>cobbler system report <span class="nt">--name</span> <span class="nv">$SYSTEM</span> | <span class="nb">grep</span> ^Profile | <span class="nb">awk</span> <span class="o">{</span><span class="s1">' print $3 '</span><span class="o">}</span><span class="si">)</span><span class="p">;</span>
    <span class="nv">DIST</span><span class="o">=</span><span class="si">$(</span>cobbler profile report <span class="nt">--name</span> <span class="nv">$PROFILE</span> | <span class="nb">grep</span> ^Distribution | <span class="nb">awk</span> <span class="o">{</span><span class="s1">' print $3 '</span><span class="o">}</span><span class="si">)</span><span class="p">;</span>
    <span class="nv">BREED</span><span class="o">=</span><span class="si">$(</span>cobbler distro report <span class="nt">--name</span> <span class="nv">$DIST</span> | <span class="nb">grep</span> ^Breed | <span class="nb">awk</span> <span class="o">{</span><span class="s1">' print $3 '</span><span class="o">}</span><span class="si">)</span><span class="p">;</span>
    <span class="k">if</span> <span class="o">[[</span> <span class="nv">$BREED</span> <span class="o">==</span> <span class="s2">"xen"</span> <span class="o">]]</span><span class="p">;</span> <span class="k">then
        </span><span class="nv">MAC</span><span class="o">=</span><span class="s2">"</span><span class="si">$(</span>cobbler system report <span class="nt">--name</span> <span class="nv">$SYSTEM</span> | <span class="nb">grep</span> ^MAC<span class="se">\ </span>Address | <span class="nb">awk</span> <span class="o">{</span><span class="s1">' print $4 '</span><span class="o">}</span><span class="si">)</span><span class="s2">"</span>
        <span class="o">[</span> <span class="nv">$MAC</span> <span class="o">]</span> <span class="o">||</span> <span class="k">continue
        </span><span class="nv">LINE</span><span class="o">=</span><span class="si">$(</span><span class="nb">cat</span> <span class="nt">-n</span> /var/lib/tftpboot/grub/system/<span class="nv">$MAC</span> | <span class="nb">grep </span>menuentry<span class="se">\ \'</span><span class="nv">$SYSTEM</span> | <span class="nb">awk</span> <span class="o">{</span><span class="s1">' print $1 '</span><span class="o">}</span><span class="si">)</span>
        <span class="nb">head</span> <span class="nt">-n</span> <span class="nv">$LINE</span> /var/lib/tftpboot/grub/system/<span class="nv">$MAC</span> <span class="o">&gt;</span> /tmp/<span class="s2">"</span><span class="nv">$MAC</span><span class="s2">"</span>
        <span class="nv">LINE</span><span class="o">=</span><span class="si">$(</span><span class="nb">echo</span> <span class="k">$((</span><span class="si">$(</span><span class="nb">tail</span> <span class="nt">-n</span>+<span class="si">$(</span><span class="nb">echo</span> <span class="k">$((</span><span class="nv">$LINE</span><span class="o">+</span><span class="m">1</span><span class="k">))</span><span class="si">)</span> /var/lib/tftpboot/grub/system/<span class="nv">$MAC</span> | <span class="nb">grep</span> <span class="nt">-n</span> <span class="nt">-m</span> 1 ^<span class="o">}</span> | <span class="nb">awk</span> <span class="o">{</span><span class="s1">' print $1 '</span><span class="o">}</span> | <span class="nb">sed</span> <span class="s1">'s,:.*,,'</span><span class="si">)</span><span class="o">+</span><span class="nv">$LINE</span><span class="k">))</span><span class="si">)</span>
        <span class="nb">echo</span> <span class="s2">"  echo 'chainloading...?'"</span> <span class="o">&gt;&gt;</span> /tmp/<span class="s2">"</span><span class="nv">$MAC</span><span class="s2">"</span>
        <span class="nb">echo</span> <span class="s2">"  multiboot2 /images/</span><span class="nv">$DIST</span><span class="s2">/xen.gz dom0_mem=2048M,max:2048M watchdog dom0_max_vcpus=4 com1=115200,8n1 console=com1,vga"</span> <span class="o">&gt;&gt;</span> /tmp/<span class="s2">"</span><span class="nv">$MAC</span><span class="s2">"</span>
        <span class="nb">echo</span> <span class="s2">"  echo 'loading kernel...'"</span> <span class="o">&gt;&gt;</span> /tmp/<span class="s2">"</span><span class="nv">$MAC</span><span class="s2">"</span>
        <span class="nb">echo</span> <span class="s2">"  module2 /images/</span><span class="nv">$DIST</span><span class="s2">/vmlinuz console=hvc0 console=tty0 answerfile=http://10.0.0.10/cblr/svc/op/autoinstall/system/</span><span class="nv">$SYSTEM</span><span class="s2"> install"</span> <span class="o">&gt;&gt;</span> /tmp/<span class="s2">"</span><span class="nv">$MAC</span><span class="s2">"</span>
        <span class="nb">echo</span> <span class="s2">"  echo 'loading initial ramdisk...'"</span> <span class="o">&gt;&gt;</span> /tmp/<span class="s2">"</span><span class="nv">$MAC</span><span class="s2">"</span>
        <span class="nb">echo</span> <span class="s2">"  module2 /images/</span><span class="nv">$DIST</span><span class="s2">/install.img"</span> <span class="o">&gt;&gt;</span> /tmp/<span class="s2">"</span><span class="nv">$MAC</span><span class="s2">"</span>
        <span class="nb">echo</span> <span class="s2">"  echo 'done'"</span> <span class="o">&gt;&gt;</span> /tmp/<span class="s2">"</span><span class="nv">$MAC</span><span class="s2">"</span>
        <span class="nb">tail</span> <span class="nt">-n</span>+<span class="nv">$LINE</span> /var/lib/tftpboot/grub/system/<span class="nv">$MAC</span> <span class="o">&gt;&gt;</span> /tmp/<span class="s2">"</span><span class="nv">$MAC</span><span class="s2">"</span>
        <span class="nb">cp</span> /tmp/<span class="s2">"</span><span class="nv">$MAC</span><span class="s2">"</span> /var/lib/tftpboot/grub/system/<span class="s2">"</span><span class="nv">$MAC</span><span class="s2">"</span> <span class="o">&amp;&amp;</span> <span class="nb">rm</span> <span class="nt">-f</span> /tmp/<span class="s2">"</span><span class="nv">$MAC</span><span class="s2">"</span>
        <span class="nv">LINE</span><span class="o">=</span><span class="s2">""</span> <span class="o">&amp;&amp;</span> <span class="nv">MAC</span><span class="o">=</span><span class="s2">""</span> <span class="o">&amp;&amp;</span> <span class="nv">BREED</span><span class="o">=</span><span class="s2">""</span> <span class="o">&amp;&amp;</span> <span class="nv">PROFILE</span><span class="o">=</span><span class="s2">""</span> <span class="o">&amp;&amp;</span> <span class="nv">DIST</span><span class="o">=</span><span class="s2">""</span>
    <span class="k">fi</span><span class="p">;</span>
<span class="k">done</span>
</code></pre></div></div> <ul> <li><code class="language-plaintext highlighter-rouge">/var/lib/cobbler/triggers/sync/post/fix-XCP-systems-PXE.sh</code></li> </ul> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#!/bin/bash</span>
<span class="k">for </span>SYSTEM <span class="k">in</span> <span class="si">$(</span>cobbler system list<span class="si">)</span><span class="p">;</span> <span class="k">do
    </span><span class="nv">PROFILE</span><span class="o">=</span><span class="si">$(</span>cobbler system report <span class="nt">--name</span> <span class="nv">$SYSTEM</span> | <span class="nb">grep</span> ^Profile | <span class="nb">awk</span> <span class="o">{</span><span class="s1">' print $3 '</span><span class="o">}</span><span class="si">)</span><span class="p">;</span>
    <span class="nv">DIST</span><span class="o">=</span><span class="si">$(</span>cobbler profile report <span class="nt">--name</span> <span class="nv">$PROFILE</span> | <span class="nb">grep</span> ^Distribution | <span class="nb">awk</span> <span class="o">{</span><span class="s1">' print $3 '</span><span class="o">}</span><span class="si">)</span><span class="p">;</span>
    <span class="nv">BREED</span><span class="o">=</span><span class="si">$(</span>cobbler distro report <span class="nt">--name</span> <span class="nv">$DIST</span> | <span class="nb">grep</span> ^Breed | <span class="nb">awk</span> <span class="o">{</span><span class="s1">' print $3 '</span><span class="o">}</span><span class="si">)</span><span class="p">;</span>
    <span class="k">if</span> <span class="o">[[</span> <span class="nv">$BREED</span> <span class="o">==</span> <span class="s2">"xen"</span> <span class="o">]]</span><span class="p">;</span> <span class="k">then
        </span><span class="nv">MAC</span><span class="o">=</span><span class="s2">"</span><span class="si">$(</span>cobbler system report <span class="nt">--name</span> <span class="nv">$SYSTEM</span> | <span class="nb">grep</span> ^MAC<span class="se">\ </span>Address | <span class="nb">awk</span> <span class="o">{</span><span class="s1">' print $4 '</span><span class="o">}</span> | <span class="nb">sed</span> <span class="s1">'s,:,-,g'</span><span class="si">)</span><span class="s2">"</span>
        <span class="nv">LINE</span><span class="o">=</span><span class="si">$(</span><span class="nb">cat</span> <span class="nt">-n</span> /var/lib/tftpboot/pxelinux.cfg/01-<span class="nv">$MAC</span> | <span class="nb">grep</span> <span class="nt">-m</span> 1 <span class="s2">"MENU LABEL </span><span class="nv">$SYSTEM</span><span class="s2">"</span> | <span class="nb">awk</span> <span class="o">{</span><span class="s1">' print $1'</span><span class="o">}</span><span class="si">)</span>
        <span class="nb">head</span> <span class="nt">-n</span> <span class="nv">$LINE</span> /var/lib/tftpboot/pxelinux.cfg/01-<span class="nv">$MAC</span> <span class="o">&gt;</span> /tmp/01-<span class="nv">$MAC</span>
        <span class="nb">echo</span> <span class="s2">"        kernel mboot.c32"</span> <span class="o">&gt;&gt;</span> /tmp/01-<span class="nv">$MAC</span>
        <span class="nb">echo</span> <span class="s2">"        append /images/</span><span class="nv">$DIST</span><span class="s2">/xen.gz dom0_max_vcpus=2 dom0_mem=2048M,max:2048M com1=115200,8n1 console=com1,vga --- /images/</span><span class="nv">$DIST</span><span class="s2">/vmlinuz xencons=hvc console=hvc0 console=tty0 answerfile=http://10.0.0.10/cblr/svc/op/autoinstall/system/</span><span class="nv">$SYSTEM</span><span class="s2"> install --- /images/</span><span class="nv">$DIST</span><span class="s2">/install.img"</span> <span class="o">&gt;&gt;</span> /tmp/01-<span class="nv">$MAC</span>
        <span class="nb">echo</span> <span class="s2">"        ipappend 2"</span> <span class="o">&gt;&gt;</span> /tmp/01-<span class="nv">$MAC</span>
        <span class="nb">cp</span> /tmp/01-<span class="nv">$MAC</span> /var/lib/tftpboot/pxelinux.cfg/. <span class="o">&amp;&amp;</span> <span class="nb">rm</span> <span class="nt">-f</span> /tmp/01-<span class="nv">$MAC</span>
        <span class="nv">LINE</span><span class="o">=</span><span class="s2">""</span> <span class="o">&amp;&amp;</span> <span class="nv">MAC</span><span class="o">=</span><span class="s2">""</span> <span class="o">&amp;&amp;</span> <span class="nv">PROFILE</span><span class="o">=</span><span class="s2">""</span> <span class="o">&amp;&amp;</span> <span class="nv">DIST</span><span class="o">=</span><span class="s2">""</span> <span class="o">&amp;&amp;</span> <span class="nv">BREED</span><span class="o">=</span><span class="s2">""</span>
    <span class="k">fi</span><span class="p">;</span>
<span class="k">done</span>
</code></pre></div></div> <p>Mark the 4 Cobbler sync-triggers as executable:</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">chmod </span>u+x /var/lib/cobbler/triggers/sync/post/fix-XCP-BIOS_CSM-PXE.sh
<span class="nb">chmod </span>u+x /var/lib/cobbler/triggers/sync/post/fix-XCP-GRUB.sh
<span class="nb">chmod </span>u+x /var/lib/cobbler/triggers/sync/post/fix-XCP-systems-PXE.sh
<span class="nb">chmod </span>u+x /var/lib/cobbler/triggers/sync/post/fix-XCP-systems-GRUB.sh
</code></pre></div></div> <p>Sync up Cobbler to apply the changes</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>systemctl restart cobblerd <span class="o">&amp;&amp;</span> <span class="nb">sleep </span>10
cobbler <span class="nb">sync</span>
</code></pre></div></div> <h2 id="xcp-ng-821-pxe-deployment">XCP-ng 8.2.1 PXE Deployment</h2> <p>XCP-ng 8.2.1 comes with 2 linux kernels available to install, this guide will detail both how to boot and load either kernel over the network from the PXE Client AND install either kernel to the PXE Client and configure it as the defaul on the resulting XCP-ng 8.2.1 installation.</p> <h3 id="standard-kernel">Standard Kernel</h3> <p>Mount the installation media and run <code class="language-plaintext highlighter-rouge">cobbler import</code></p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">mkdir</span> /mnt/XCP-NG
mount <span class="nt">-t</span> iso9660 <span class="nt">-o</span> loop,ro ~/Downloads/xcp-ng-8.2.1-20231130.iso /mnt/XCP-NG
cobbler import <span class="nt">--name</span> XCP <span class="nt">--path</span> /mnt/XCP-NG
</code></pre></div></div> <p>Link some additional bootloader resources to the cobbler <code class="language-plaintext highlighter-rouge">loaders</code> folder, and sync up cobbler:</p> <blockquote> <p>XCP-ng <a href="https://docs.xcp-ng.org/installation/install-xcp-ng/#tftp-server-configuration---bios-boot">official docs</a> recommends using the <code class="language-plaintext highlighter-rouge">mboot.c32</code> &amp; <code class="language-plaintext highlighter-rouge">pxelinux.0</code> files from the XCP-ng installation media, but that shouldn’t be necessary.</p> </blockquote> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">ln</span> <span class="nt">-s</span> /usr/share/syslinux/mboot.c32 /var/lib/cobbler/loaders/mboot.c32
systemctl restart cobblerd <span class="o">&amp;&amp;</span> <span class="nb">sleep </span>10
cobbler mkloaders <span class="o">&amp;&amp;</span> <span class="nb">sleep </span>5
cobbler <span class="nb">sync</span>
</code></pre></div></div> <blockquote> <p>At this point, you should be able to boot the PXE Client VM and select the “XCP-x86_64” Profile from the PXE or GRUB menu to test a generic installation</p> </blockquote> <p>Create a new Cobbler System to automatically boot and install XCP-ng 8.2.1, replacing <code class="language-plaintext highlighter-rouge">aa:bb:cc:dd:ee:ff</code> with the MAC Address of the <strong>PXE Client</strong> VM, and sync up Cobbler</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>cobbler system add <span class="nt">--name</span> XCP-ng <span class="nt">--profile</span> XCP-x86_64 <span class="nt">--netboot-enabled</span> <span class="nb">true</span> <span class="nt">--hostname</span> xcp-ng <span class="nt">--interface</span> eth0 <span class="nt">--static</span> <span class="nb">true</span> <span class="nt">--mac-address</span> <span class="s2">"aa:bb:cc:dd:ee:ff"</span> <span class="nt">--ip-address</span> 10.0.0.23 <span class="nt">--gateway</span> 10.0.0.1 <span class="nt">--netmask</span> 255.255.255.0 <span class="nt">--name-servers</span> <span class="s2">"10.0.0.1 1.1.1.1 10.0.0.10"</span>
systemctl restart cobblerd <span class="o">&amp;&amp;</span> <span class="nb">sleep </span>10
cobbler <span class="nb">sync</span>
</code></pre></div></div> <p>Now, boot the <strong>PXE Client</strong> and it should automatically load the XCP-ng 8.2.1 installer and complete the installation without intervention. If there is an error, try either booting or installing the alternate kernel, or more than likely, both in the section below.</p> <h3 id="alternate-kernel">Alternate Kernel</h3> <p>Optionally, follow the below 2 sections to either boot the <em>alternate kernel</em> via PXE, install the <em>alternate kernel</em> to the target system, or both</p> <h4 id="pxe-boot-alt-kernel">PXE Boot Alt Kernel</h4> <p>Clone the <em>Standard Kernel</em> Distro and reconfigure it to PXE boot the <em>alternate kernel</em>:</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>cobbler distro copy <span class="nt">--name</span> XCP-x86_64 <span class="nt">--newname</span> XCP-alt-x86_64
cobbler distro edit <span class="nt">--name</span> XCP-alt-x86_64 <span class="nt">--kernel</span> <span class="s1">'/var/www/cobbler/distro_mirror/XCP/boot/alt/vmlinuz'</span>

<span class="c"># # # This step isn't really necessary, just think its weird that Cobbler creates the new "links" web endpoint, but doesn't edit the "tree" autoinstall metadata variable (nor does it create a new copy of the mirror in distro_mirror folder)</span>
<span class="nb">sudo </span>cobbler distro edit <span class="nt">--name</span> XCP-alt-x86_64 <span class="nt">--autoinstall-meta</span> <span class="s1">'tree'</span><span class="o">=</span><span class="s1">'http://@@http_server@@/cblr/links/XCP-alt-x86_64'</span>
</code></pre></div></div> <p>Add a new Cobbler Profile which uses the newly cloned Distro:</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>cobbler profile add <span class="nt">--name</span> XCP-alt-x86_64 <span class="nt">--distro</span> XCP-alt-x86_64
</code></pre></div></div> <p>create a new System which will boot the <em>alternate kernel</em>, replacing *“aa:bb:cc:dd:ee:ff” with the MAC Address of the <strong>PXE Client</strong> VM, and sync up Cobbler:</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>cobbler system add <span class="nt">--name</span> XCP-alt <span class="nt">--profile</span> XCP-alt-x86_64 <span class="nt">--netboot-enabled</span> <span class="nb">true</span> <span class="nt">--mac-address</span> <span class="s2">"aa:bb:cc:dd:ee:ff"</span>
systemctl restart cobblerd <span class="o">&amp;&amp;</span> <span class="nb">sleep </span>10
cobbler <span class="nb">sync</span>
</code></pre></div></div> <h4 id="install-alt-kernel">Install Alt Kernel</h4> <p>Create a script in the following location with the below contents:</p> <ul> <li><code class="language-plaintext highlighter-rouge">/var/lib/cobbler/scripts/XCP-alt-post-install.sh</code></li> </ul> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#!/bin/bash</span>
<span class="c">## echo "touch /root/test.txt" | chroot $1 /bin/bash -s</span>
yum <span class="nt">-c</span> /root/yum.conf <span class="nt">--installroot</span> <span class="nv">$1</span> <span class="nb">install</span> <span class="nt">-y</span> kernel-alt | <span class="nb">tee</span> /tmp/yum.txt
<span class="nv">GRUB</span><span class="o">=</span><span class="se">\$</span><span class="o">(</span><span class="nb">grep</span> <span class="s2">"Adding 'XCP-ng kernel-alt 4.19.265' as grub entry #"</span> /tmp/yum.txt | <span class="nb">awk</span> <span class="nt">-F</span> <span class="s2">"#"</span> <span class="o">{</span><span class="s1">' print $2 '</span><span class="o">})</span>
<span class="nb">sed</span> <span class="nt">-i</span> <span class="s2">"s/default=0/default=</span><span class="se">\$</span><span class="s2">{GRUB}/"</span> <span class="nv">$1</span>/boot/efi/EFI/xenserver/grub.cfg
yum <span class="nt">-c</span> <span class="nv">$1</span>/etc/yum.conf <span class="nt">--installroot</span> <span class="nv">$1</span> update <span class="nt">-y</span>
yum <span class="nt">-c</span> <span class="nv">$1</span>/etc/yum.conf <span class="nt">--installroot</span> <span class="nv">$1</span> <span class="nb">install</span> <span class="nt">-y</span> vim ipref
</code></pre></div></div> <p>Create a new autoinstall (answerfile.xml) template file from the one created above and configure the cloned <em>alt</em> Profile to use it, then sync up Cobbler:</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sed</span> <span class="s1">'s,/?script=XCP-post-install.sh,/?script=XCP-alt-post-install.sh,'</span> /var/lib/cobbler/templates/answerfile.xml | <span class="nb">tee</span> /var/lib/cobbler/templates/XCP-alt-answerfile.xml
cobbler profile edit <span class="nt">--name</span> XCP-alt-x86_64 <span class="nt">--autoinstall</span> XCP-alt-answerfile.xml

systemctl restart cobblerd <span class="o">&amp;&amp;</span> <span class="nb">sleep </span>10
cobbler <span class="nb">sync</span>
</code></pre></div></div> <p>Now the “XCP-alt” System created above will boot the <em>alternate kernel</em> over PXE and install the <em>alt kernel</em> to the PXE client as the default boot option.</p> <blockquote> <p>Alternatively, to boot the installer with the <em>standard kernel</em> and install the <em>alt kernel</em> to the PXE client, create a new (or edit an existing…) Cobbler System (or Distro+Profile) to use the <code class="language-plaintext highlighter-rouge">XCP-alt-post-install.sh</code> script above in the autoinstall template file:</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>cobbler system edit <span class="nt">--name</span> XCP-alt <span class="nt">--profile</span> XCP-x86_64 <span class="nt">--autoinstall</span> XCP-alt-answerfile.xml
</code></pre></div> </div> </blockquote> <h2 id="tips--troubleshooting">Tips &amp; Troubleshooting</h2> <ol> <li> <p>The <a href="/blog/2024/Cobbler-v3.3.6-Beginners-Guide/">Cobbler 3.3.6 Beginner’s Guide</a> <strong>Tips &amp; Troubleshooting</strong> section contains some basic recommendations and limitations of Cobbler which will not be repeated here.</p> </li> <li> <p>References:</p> <ul> <li></li> </ul> </li> </ol>]]></content><author><name>Sus-Admin</name></author><category term="cobbler"/><summary type="html"><![CDATA[This guide assumes that you have a Fedora 34 server or workstation system configured to run Cobbler v3.3.7 similarly to the Cobbler v3.3.6 Beginner’s guide.]]></summary></entry><entry><title type="html">Cobbler (v3.3.7) Debian Deployment Guide</title><link href="https://sus-admin.github.io/blog/2024/Cobbler-v3.3.7-Debian-Deployment-Guide/" rel="alternate" type="text/html" title="Cobbler (v3.3.7) Debian Deployment Guide"/><published>2024-12-02T00:00:00+00:00</published><updated>2024-12-02T00:00:00+00:00</updated><id>https://sus-admin.github.io/blog/2024/Cobbler-v3.3.7-Debian-Deployment-Guide</id><content type="html" xml:base="https://sus-admin.github.io/blog/2024/Cobbler-v3.3.7-Debian-Deployment-Guide/"><![CDATA[<p>This guide assumes that you have a Fedora 34 server or workstation system configured to run Cobbler v3.3.7 similarly to the <a href="/blog/2024/Cobbler-v3.3.6-Beginners-Guide/">Cobbler v3.3.6 Beginner’s guide</a>.</p> <h2 class="no_toc" id="table-of-contents">Table of Contents</h2> <ol id="markdown-toc"> <li><a href="#objective" id="markdown-toc-objective">Objective</a> <ol> <li><a href="#caveats" id="markdown-toc-caveats">Caveats</a></li> </ol> </li> <li><a href="#cobbler-server-prep" id="markdown-toc-cobbler-server-prep">Cobbler Server Prep</a> <ol> <li><a href="#dependencies" id="markdown-toc-dependencies">Dependencies</a></li> </ol> </li> <li><a href="#debian-12-bookworm-pxe-deployment" id="markdown-toc-debian-12-bookworm-pxe-deployment">Debian 12 Bookworm PXE Deployment</a></li> <li><a href="#debian-11-bullseye-pxe-deployment" id="markdown-toc-debian-11-bullseye-pxe-deployment">Debian 11 Bullseye PXE Deployment</a></li> <li><a href="#mirroring-with-debmirror" id="markdown-toc-mirroring-with-debmirror">Mirroring with debmirror</a> <ol> <li><a href="#setup-debmirror" id="markdown-toc-setup-debmirror">Setup debmirror</a></li> <li><a href="#manual-debmirror" id="markdown-toc-manual-debmirror">Manual debmirror</a></li> <li><a href="#cobbler-reposync-and-debmirror" id="markdown-toc-cobbler-reposync-and-debmirror">Cobbler reposync and debmirror</a></li> <li><a href="#pxe-deploy-via-local-debmirror-repo" id="markdown-toc-pxe-deploy-via-local-debmirror-repo">PXE deploy via local debmirror repo</a></li> </ol> </li> <li><a href="#tips--troubleshooting" id="markdown-toc-tips--troubleshooting">Tips &amp; Troubleshooting</a></li> </ol> <h2 id="objective">Objective</h2> <p>Starting where the <a href="/blog/2024/Cobbler-v3.3.6-Beginners-Guide/">Beginner’s guide</a> left off, further configure the Cobbler v3.3.7 server to deploy the latest release of Debian 11 Bullseye and Debian 12 Bookworm <em>server</em> via PXE network boot, using the same system and network environment. This guide assumes that you still have <code class="language-plaintext highlighter-rouge">selinux</code> and <code class="language-plaintext highlighter-rouge">firewalld</code> configured and enabled as described in the Beginner’s guide.</p> <h3 id="caveats">Caveats</h3> <ul> <li> <p>Along the same lines as the <a href="/blog/2024/Cobbler-v3.3.6-Beginners-Guide/">Beginner’s guide</a> I prefer to locally host/mirror the base OS repo to alleviate public internet availability and bandwidth dependencies during network installations.</p> </li> <li> <p>using the <code class="language-plaintext highlighter-rouge">cobbler check</code> CLI command, the output recommends installing the <strong>debmirror</strong> package in order to manage Debian deployments and repos with Cobbler. Instead, we will simply import the Debian source installation media (.iso file) and use that as the local repo mirror to install over the network, similarly to the <a href="/blog/2024/Cobbler-v3.3.6-Beginners-Guide/">Beginner’s guide</a>.</p> <ul> <li> <p>This method is not the Cobbler official method, and Debian actually <a href="https://www.debian.org/mirror/ftpmirror">recommends</a> using something like “apt-cacher-ng” or “squid proxy”</p> </li> <li> <p>The Main Debian repo for the latest release of Debian is about 100 GB at the time of writing, which is why this is <em>my</em> preferred method over using <strong>debmirror</strong>, as it only requires the data from a single Debian installer DVD (.iso file)</p> <ul> <li>For completeness however, the <strong>debmirror</strong> method will be detailed towards the bottom of this guide, in the <strong>Mirroring with debmirror</strong> section.</li> </ul> </li> </ul> </li> <li> <p>This guide provides a workaround to an issue that is encountered when installing Debian 11 &amp; 12 over the network from an <strong>unsigned or self-signed repo</strong> where the PXE client (<code class="language-plaintext highlighter-rouge">debian-installer</code>) does not trust the installation source <em>(Since Debian developers DO NOT sign the software/repos packaged into official CD/DVD/ISO releases: <a href="https://wiki.debian.org/SecureApt">https://wiki.debian.org/SecureApt</a> )</em>.</p> <ul> <li> <p>This appears to be a bug in the <code class="language-plaintext highlighter-rouge">debian-installer</code> (<code class="language-plaintext highlighter-rouge">d-i</code>); more info provided in the <strong>Tips &amp; Troubleshooting</strong> section below.</p> </li> <li> <p>This issue should not arise when mirroring an official Debian mirror using the <strong>debmirror</strong> method, as recommended by Cobbler</p> </li> </ul> </li> </ul> <h2 id="cobbler-server-prep">Cobbler Server Prep</h2> <p>Debian maintainers advise that network booting Debian is <a href="https://www.debian.org/distrib/netinst#netboot">not for novice users</a>, and they’re not wrong, but we’re no amateurs.</p> <p>That said, continue at your own risk.</p> <h3 id="dependencies">Dependencies</h3> <p>While this section describes installing Debian from the local Cobbler server, the resulting system will use the public Debian mirrors for updates and installs going forward. Add a <code class="language-plaintext highlighter-rouge">cobbler repo</code> entry for those public Debian mirrors with your desired components to be referenced in the auto-install (these repos are only for metadata, they will not be mirrored or downloaded locally with the below settings)</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>cobbler repo add <span class="nt">--name</span> bookworm-latest <span class="nt">--keep-updated</span> <span class="nb">false</span> <span class="nt">--mirror-locally</span> <span class="nb">false</span> <span class="nt">--breed</span> apt <span class="nt">--arch</span> x86_64 <span class="nt">--mirror</span> <span class="s2">"http://deb.debian.org/debian"</span> <span class="nt">--apt-components</span><span class="o">=</span><span class="s2">"main non-free non-free-firmware contrib"</span> <span class="nt">--apt-dists</span><span class="o">=</span>bookworm
cobbler repo add <span class="nt">--name</span> bookworm-updates <span class="nt">--keep-updated</span> <span class="nb">false</span> <span class="nt">--mirror-locally</span> <span class="nb">false</span> <span class="nt">--breed</span> apt <span class="nt">--arch</span> x86_64 <span class="nt">--mirror</span> <span class="s2">"http://deb.debian.org/debian"</span> <span class="nt">--apt-components</span><span class="o">=</span><span class="s2">"main non-free non-free-firmware contrib"</span> <span class="nt">--apt-dists</span><span class="o">=</span>bookworm-updates
cobbler repo add <span class="nt">--name</span> bookworm-security <span class="nt">--keep-updated</span> <span class="nb">false</span> <span class="nt">--mirror-locally</span> <span class="nb">false</span> <span class="nt">--breed</span> apt <span class="nt">--arch</span> x86_64 <span class="nt">--mirror</span> <span class="s2">"http://security.debian.org/debian-security"</span> <span class="nt">--apt-components</span><span class="o">=</span><span class="s2">"main non-free non-free-firmware contrib"</span> <span class="nt">--apt-dists</span><span class="o">=</span>bookworm-security

cobbler repo add <span class="nt">--name</span> bullseye-latest <span class="nt">--keep-updated</span> <span class="nb">false</span> <span class="nt">--mirror-locally</span> <span class="nb">false</span> <span class="nt">--breed</span> apt <span class="nt">--arch</span> x86_64 <span class="nt">--mirror</span> <span class="s2">"http://deb.debian.org/debian"</span> <span class="nt">--apt-components</span><span class="o">=</span><span class="s2">"main non-free non-free-firmware contrib"</span> <span class="nt">--apt-dists</span><span class="o">=</span>bullseye
cobbler repo add <span class="nt">--name</span> bullseye-updates <span class="nt">--keep-updated</span> <span class="nb">false</span> <span class="nt">--mirror-locally</span> <span class="nb">false</span> <span class="nt">--breed</span> apt <span class="nt">--arch</span> x86_64 <span class="nt">--mirror</span> <span class="s2">"http://deb.debian.org/debian"</span> <span class="nt">--apt-components</span><span class="o">=</span><span class="s2">"main non-free non-free-firmware contrib"</span> <span class="nt">--apt-dists</span><span class="o">=</span>bullseye-updates
cobbler repo add <span class="nt">--name</span> bullseye-security <span class="nt">--keep-updated</span> <span class="nb">false</span> <span class="nt">--mirror-locally</span> <span class="nb">false</span> <span class="nt">--breed</span> apt <span class="nt">--arch</span> x86_64 <span class="nt">--mirror</span> <span class="s2">"http://security.debian.org/debian-security"</span> <span class="nt">--apt-components</span><span class="o">=</span><span class="s2">"main non-free non-free-firmware contrib"</span> <span class="nt">--apt-dists</span><span class="o">=</span>bullseye-security
</code></pre></div></div> <p>Download the latest releases of Debian Bookworm and Bullseye</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cd</span> ~/Downloads <span class="o">&amp;&amp;</span> wget https://cdimage.debian.org/debian-cd/current/amd64/iso-dvd/debian-12.8.0-amd64-DVD-1.iso
<span class="nb">cd</span> ~/Downloads <span class="o">&amp;&amp;</span> wget https://cdimage.debian.org/mirror/cdimage/archive/11.11.0/amd64/iso-dvd/debian-11.11.0-amd64-DVD-1.iso
</code></pre></div></div> <p>Additionally, all Debian releases at the time of writing require the “netboot” initial ramdisk (<code class="language-plaintext highlighter-rouge">initrd</code>) provided separately by the Debian maintainers in order to properly boot over the network. Furthermore, Debian 11 Bullseye and earlier require the “netboot firmware” image, which is an extension to the netboot <code class="language-plaintext highlighter-rouge">initrd</code> image containing drivers for non-free firmware, also provided separately by Debian.</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>wget <span class="nt">-O</span> ~/Downloads/Debian12.8-netboot.gz https://ftp.debian.org/debian/dists/stable/main/installer-amd64/current/images/netboot/debian-installer/amd64/initrd.gz

wget <span class="nt">-O</span> ~/Downloads/Debian11.11-netboot.gz  https://ftp.debian.org/debian/dists/bullseye/main/installer-amd64/current/images/netboot/debian-installer/amd64/initrd.gz
wget <span class="nt">-O</span> ~/Downloads/Debian11.11-firmware.gz https://cdimage.debian.org/cdimage/firmware/bullseye/current/firmware.cpio.gz
</code></pre></div></div> <blockquote> <p>The netboot <code class="language-plaintext highlighter-rouge">initrd.gz</code> file above is not maintained in the same manner as the main Debian installation media; only the netboot <code class="language-plaintext highlighter-rouge">initrd.gz</code> image corresponding to the LATEST official release of Debian for any major version (bookworm, bullseye, etc…) will be available on the official <a href="https://ftp.debian.org/debian/dists/">FTP site</a> above, and not the cdimage <a href="https://cdimage.debian.org/debian-cd/current">repo</a> or <a href="https://cdimage.debian.org/cdimage/archive/">archive</a> where the .iso images are acquired from (the images CAN be found on the Debian repo <a href="https://snapshot.debian.org/archive/debian/">snapshot archive</a>, but you’ll have to correlate the date with the appropriate release).</p> <p>All previous releases of the netboot <code class="language-plaintext highlighter-rouge">firmware.cpio.gz</code> image ARE available on the official <a href="https://cdimage.debian.org/cdimage/firmware/bullseye/">cdimage archive</a> at the time of writing.</p> <p>Newer releases of the netboot <code class="language-plaintext highlighter-rouge">initrd.gz</code> and firmware images will not be compatible with previous releases of Debian, as they use different kernel and module versions.</p> </blockquote> <h2 id="debian-12-bookworm-pxe-deployment">Debian 12 Bookworm PXE Deployment</h2> <p>mount the Debian 12 Bookworm installation media and import the distro into cobbler:</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span> <span class="nt">-e</span> /mnt/Debian <span class="o">]</span> <span class="o">||</span> <span class="nb">mkdir</span> /mnt/Debian
mount <span class="nt">-t</span> iso9660 <span class="nt">-o</span> loop,ro ~/Downloads/debian-12.8.0-amd64-DVD-1.iso /mnt/Debian
cobbler import <span class="nt">--name</span> Debian12.8 <span class="nt">--path</span> /mnt/Debian
</code></pre></div></div> <p>Concatenate the two <code class="language-plaintext highlighter-rouge">initrd.gz</code> images in the following order, then configure the new Cobbler Distro to use the combined image:</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cat</span> /var/www/cobbler/distro_mirror/Debian12.8/install.amd/initrd.gz ~/Downloads/Debian12.8-netboot.gz <span class="o">&gt;</span> /var/www/cobbler/pub/Debian12.8-netboot.gz

cobbler distro edit <span class="nt">--name</span> Debian12.8-x86_64 <span class="nt">--initrd</span> <span class="s2">"/var/www/cobbler/pub/Debian12.8-netboot.gz"</span>
</code></pre></div></div> <p>Create a new “preseed” (autoinstall) template from the sample included with Cobbler, and make the necessary changes to install from an unofficial source.</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cp</span> /var/lib/cobbler/templates/sample.seed /var/lib/cobbler/templates/bookworm-workaround.seed
<span class="nb">sed</span> <span class="nt">-i</span> <span class="s1">'s,# d-i debian-installer/allow_unauthenticated boolean true,d-i debian-installer/allow_unauthenticated boolean true,'</span> /var/lib/cobbler/templates/bookworm-workaround.seed
</code></pre></div></div> <p>Use the standard <code class="language-plaintext highlighter-rouge">preseed_early_default</code> Cobbler Script to create a new Cobbler Script which will implement the <strong><em>workaround</em></strong> to be run on the PXE client to circumvent the bug mentioned in the <strong>Caveats</strong> section above:</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">grep</span> <span class="nt">-v</span> <span class="s1">'# End preseed_early_default'</span> /var/lib/cobbler/scripts/preseed_early_default | <span class="nb">tee</span> /var/lib/cobbler/scripts/preseed_early_workaround

<span class="nb">echo</span> <span class="s1">'while true; do 
	[ -f /usr/lib/base-installer/library.sh ] &amp;&amp; sed -i '</span><span class="se">\'</span><span class="s1">'s/APT::Get::AllowUnauthenticated "true";/APT::Get::AllowUnauthenticated "true";\nAcquire::AllowInsecureRepositories "true";/'</span><span class="se">\'</span><span class="s1">' /usr/lib/base-installer/library.sh &amp;&amp; break;
	sleep 1;
done 2&gt; /dev/null 1&gt; /dev/null &amp;'</span> | <span class="nb">tee</span> <span class="nt">-a</span> /var/lib/cobbler/scripts/preseed_early_workaround
</code></pre></div></div> <p>Create a new Cobbler snippet from <code class="language-plaintext highlighter-rouge">late_apt_repo_config</code> to <em>not</em> use the Cobbler server as an <code class="language-plaintext highlighter-rouge">apt</code> mirror <em>post-installation</em>.</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">grep</span> <span class="nt">-v</span> <span class="s1">'deb http://$http_server/cblr/links/$distro_name $os_version main'</span> /var/lib/cobbler/snippets/late_apt_repo_config | <span class="nb">tee</span> /var/lib/cobbler/snippets/late_apt_repo_config-no_cobbler
</code></pre></div></div> <p>Create another preseed script from the standard <code class="language-plaintext highlighter-rouge">preseed_late_default</code> which will use the above <code class="language-plaintext highlighter-rouge">late_apt_repo_config-no_cobbler</code> snippet.</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sed</span> <span class="s1">'s,late_apt_repo_config,late_apt_repo_config-no_cobbler'</span> /var/lib/cobbler/scripts/preseed_late_default | <span class="nb">tee</span> /var/lib/cobbler/scripts/preseed_late_no-cobbler
</code></pre></div></div> <p>Modify the new preseed (autoinstall) template to deselect any services <em>(which are not included with the installation ISO/DVD)</em>, install desired packages only, setup an additional user “debian” with <code class="language-plaintext highlighter-rouge">sudo</code> privileges, set the workaround script created above to run in the <em>early</em> installation stage and the new “preseed_late” script to run in the <em>late</em> stage, and more aggressively force the installation regardless of any existing installations.</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sed</span> <span class="nt">-i</span> <span class="s1">'s,# d-i apt-setup/services-select multiselect security,d-i apt-setup/services-select multiselect,'</span> /var/lib/cobbler/templates/bookworm-workaround.seed
<span class="nb">sed</span> <span class="nt">-i</span> <span class="s1">'s,ntp ssh wget,wget curl openssh-server sudo vim\npopularity-contest popularity-contest/participate boolean false,'</span> /var/lib/cobbler/templates/bookworm-workaround.seed
<span class="nb">sed</span> <span class="nt">-i</span> <span class="s1">'s,d-i partman-auto/method string lvm,d-i partman-efi/non_efi_system boolean true\nd-i partman-auto/method string lvm,'</span> /var/lib/cobbler/templates/bookworm-workaround.seed
<span class="nb">sed</span> <span class="nt">-i</span> <span class="s1">'s,d-i grub-installer/bootdev string default,d-i grub-installer/bootdev string default\nd-i grub-installer/with_other_os boolean true\nd-i grub-installer/force-efi-extra-removable boolean false\nd-i grub-installer/enable_os_prober_otheros_yes boolean false\nd-i grub-installer/enable_os_prober_otheros_no boolean true,'</span> /var/lib/cobbler/templates/bookworm-workaround.seed
<span class="nb">sed</span> <span class="nt">-i</span> <span class="s1">'s,d-i passwd/make-user boolean false,d-i passwd/make-user boolean true\nd-i passwd/user-fullname string Debian Admin\nd-i passwd/username string debian\nd-i passwd/user-password-crypted password $default_password_crypted\nd-i passwd/user-default-groups string sudo,'</span> /var/lib/cobbler/templates/bookworm-workaround.seed
<span class="nb">sed</span> <span class="nt">-i</span> <span class="s1">'s,script=preseed_early_default,script=preseed_early_workaround,'</span> /var/lib/cobbler/templates/bookworm-workaround.seed
<span class="nb">sed</span> <span class="nt">-i</span> <span class="s1">'s,script=preseed_late_default,script=preseed_late_no-cobbler,'</span> /var/lib/cobbler/templates/bookworm-workaround.seed
</code></pre></div></div> <p>Configure the Cobbler Profile to use the new autoinstall (preseed) template and assign the appropriate <code class="language-plaintext highlighter-rouge">cobbler repo</code> mirrors defined above:</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>cobbler profile edit <span class="nt">--name</span> Debian12.8-x86_64 <span class="nt">--autoinstall</span> <span class="s1">'bookworm-workaround.seed'</span> <span class="nt">--repos</span> <span class="s2">"bookworm-latest bookworm-security bookworm-updates"</span>
</code></pre></div></div> <p>Finally, create a new Cobbler System to PXE boot and automatically install Debian 12 Bookworm, replacing the <em>“aa:bb:cc:dd:ee:ff”</em> with the MAC address of your PXE client, being sure not to use a duplicate MAC or IP addresse of any other Cobbler System, then sync up Cobbler.</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>cobbler system add <span class="nt">--name</span> <span class="s2">"Debian12.8"</span> <span class="nt">--profile</span> Debian12.8-x86_64 <span class="nt">--hostname</span> <span class="s2">"debian12-8"</span> <span class="nt">--mac-address</span> <span class="s2">"aa:bb:cc:dd:ee:ff"</span> <span class="nt">--netboot-enabled</span> <span class="nb">true</span> <span class="nt">--ip-address</span> <span class="s2">"10.0.0.12"</span> <span class="nt">--netmask</span> <span class="s2">"255.255.255.0"</span> <span class="nt">--gateway</span> <span class="s2">"10.0.0.1"</span> <span class="nt">--name-servers</span> <span class="s2">"10.0.0.1 1.1.1.1 8.8.8.8"</span>
cobbler <span class="nb">sync</span>
</code></pre></div></div> <p>The <strong>PXE Client</strong> VM can now be powered on, and should automatically boot to PXE and install Debian 12.8 to the VM HDD using the “bookworm-workaround.seed” preseed template created above.</p> <h2 id="debian-11-bullseye-pxe-deployment">Debian 11 Bullseye PXE Deployment</h2> <p>Take similar steps as above, with the inclusion of the netboot “firmware” image file in the combined <code class="language-plaintext highlighter-rouge">initrd.gz</code> image file, and using the “bookworm-workaround.seed” template created above as a starting point and trimming off a few unsupported preseed settings to import and automatically deploy Debian 11 Bullseye over PXE.</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span> <span class="nt">-e</span> /mnt/Debian <span class="o">]</span> <span class="o">||</span> <span class="nb">mkdir</span> /mnt/Debian
mount <span class="nt">-t</span> iso9660 <span class="nt">-o</span> loop,ro ~/Downloads/debian-11.11.0-amd64-DVD-1.iso /mnt/Debian
cobbler import <span class="nt">--name</span><span class="o">=</span>Debian11.11 <span class="nt">--path</span><span class="o">=</span>/mnt/Debian

<span class="nb">cat</span> /var/www/cobbler/distro_mirror/Debian11.11/install.amd/initrd.gz ~/Downloads/Debian11.11-netboot.gz ~/Downloads/Debian11.11-firmware.gz <span class="o">&gt;</span> /var/www/cobbler/pub/Debian11.11-netboot.gz
cobbler distro edit <span class="nt">--name</span> Debian11.11-x86_64 <span class="nt">--initrd</span> <span class="s2">"/var/www/cobbler/pub/Debian11.11-netboot.gz"</span>

<span class="nb">grep</span> <span class="nt">-v</span> <span class="s2">"os_prober"</span> /var/lib/cobbler/templates/bookworm-workaround.seed <span class="o">&gt;</span> /var/lib/cobbler/templates/bullseye-workaround.seed
cobbler profile edit <span class="nt">--name</span> Debian11.11-x86_64 <span class="nt">--autoinstall</span> bullseye-workaround.seed <span class="nt">--repos</span> <span class="s2">"bullseye-latest bullseye-security bullseye-updates"</span>

cobbler system add <span class="nt">--name</span> Debian11.11 <span class="nt">--profile</span> Debian11.11-x86_64 <span class="nt">--mac-address</span> <span class="s2">"aa:bb:cc:dd:ee:ff"</span> <span class="nt">--netboot-enabled</span> <span class="nb">true

</span>cobbler <span class="nb">sync</span>
</code></pre></div></div> <h2 id="mirroring-with-debmirror">Mirroring with debmirror</h2> <p>Mirroring the official Debian repos with the <strong>debmirror</strong> tool is fairly simple, but will require about 100GB of extra disk space on the Cobbler server.</p> <p>This guide will only provide the steps to mirror the LATEST release of Debian <em>(Bookworm 12.8 at the time of writing)</em> with <code class="language-plaintext highlighter-rouge">debmirror</code>.</p> <p>similarly to the DVD/ISO method above, both the <strong>netboot</strong> and <strong>DVD/ISO</strong> <code class="language-plaintext highlighter-rouge">initrd.gz</code> images are still required in the same concatenated manner to properly install over the network, but they must both be downloaded separately of the <code class="language-plaintext highlighter-rouge">debmirror</code> process.</p> <p>Since the official Debian repo will be mirrored, the source will be fully valid with trusted signatures, meaning the autoinstall (preseed) file for the PXE client will not need the <strong>workaround</strong> portion.</p> <p>Cobbler supports managing repos/sources via the debmirror command natively, which means the <code class="language-plaintext highlighter-rouge">debmirror</code> package only needs to be installed and configured, then mirroring can be accomplished/managed through Cobbler CLI commands.</p> <ul> <li>The syntax for mirroring a Debian repo through the <code class="language-plaintext highlighter-rouge">debmirror</code> command will still be provided below for context in the <strong>Manual debmirror</strong> section, but is not necessary in most cases to mirror Debian locally.</li> </ul> <h3 id="setup-debmirror">Setup debmirror</h3> <p>Follow the instructions given from the <code class="language-plaintext highlighter-rouge">cobbler check</code> command for supporting Debian deployments/repos and install the Debian keyrings:</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>yum <span class="nb">install</span> <span class="nt">-y</span> debmirror debian-keyring
<span class="nb">sed</span> <span class="nt">-i</span> <span class="s2">"s/@arches/#@arches/g"</span> /etc/debmirror.conf
<span class="nb">sed</span> <span class="nt">-i</span> <span class="s2">"s/@dists/#@dists/g"</span> /etc/debmirror.conf
cobbler <span class="nb">sync
</span>cobbler check
</code></pre></div></div> <h3 id="manual-debmirror">Manual debmirror</h3> <p>Sometimes debmirror may fail to download a few files from the configured source, which can cause Cobbler to error out on the <code class="language-plaintext highlighter-rouge">reposync</code> task/command.</p> <ul> <li>Usually re-issueing the <code class="language-plaintext highlighter-rouge">reposync</code> command (and in-turn, the <code class="language-plaintext highlighter-rouge">debmirror</code> command) after such a failure will complete the download of the missing files.</li> </ul> <p>This manual <code class="language-plaintext highlighter-rouge">debmirror</code> method may be useful for troubleshooting</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>debmirror <span class="nt">-p</span> <span class="nt">-v</span> <span class="nt">--method</span> http <span class="nt">-a</span> amd64 <span class="nt">-h</span> ftp.us.debian.org <span class="nt">-d</span> stable <span class="nt">-s</span> main,main/debian-installer,contrib,non-free,non-free-firmware <span class="nt">--nosource</span> <span class="nt">--keyring</span><span class="o">=</span><span class="s2">"/usr/share/keyrings/debian-archive-keyring.gpg"</span>  ~/Debian12.8
</code></pre></div></div> <h3 id="cobbler-reposync-and-debmirror">Cobbler reposync and debmirror</h3> <p>use the <code class="language-plaintext highlighter-rouge">cobbler repo</code> and <code class="language-plaintext highlighter-rouge">cobbler reposync</code> commands in order to mirror Debian latest repo locally:</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>cobbler repo add <span class="nt">--name</span> Debian-latest <span class="nt">--keep-updated</span> <span class="nb">true</span> <span class="nt">--mirror-locally</span> <span class="nb">true</span> <span class="nt">--breed</span> apt <span class="nt">--arch</span> x86_64 <span class="nt">--mirror</span> <span class="s2">"http://ftp.us.debian.org/debian"</span> <span class="nt">--apt-components</span><span class="o">=</span>main,main/debian-installer,non-free-firmware <span class="nt">--apt-dists</span><span class="o">=</span>bookworm <span class="nt">--yumopts</span> <span class="s1">'--keyring'</span><span class="o">=</span><span class="s1">'/usr/share/keyrings/debian-archive-keyring.gpg'</span>
cobbler reposync
</code></pre></div></div> <h3 id="pxe-deploy-via-local-debmirror-repo">PXE deploy via local debmirror repo</h3> <p>Configure a new preseed file for installation via the trusted, signed Debian repo:</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cp</span> /var/lib/cobbler/templates/bookworm-workaround.seed /var/lib/cobbler/templates/bookworm-latest.seed
<span class="nb">sed</span> <span class="nt">-i</span> <span class="s1">'s,d-i debian-installer/allow_unauthenticated,#d-i debian-installer/allow_unauthenticated,'</span> /var/lib/cobbler/templates/bookworm-latest.seed
<span class="nb">sed</span> <span class="nt">-i</span> <span class="s1">'s,script=preseed_early_workaround,script=preseed_early_default,'</span> /var/lib/cobbler/templates/bookworm-latest.seed
</code></pre></div></div> <p>Download the kernel and 2 initrd files for Debiain latest/current (12.8)</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>wget <span class="nt">-O</span> ~/Downloads/debian-stable-initrd.gz http://ftp.us.debian.org/debian/dists/stable/main/installer-amd64/current/images/cdrom/initrd.gz
wget <span class="nt">-O</span> ~/Downloads/debian-stable-netboot-initrd.gz http://ftp.us.debian.org/debian/dists/stable/main/installer-amd64/current/images/netboot/debian-installer/amd64/initrd.gz
wget <span class="nt">-O</span> ~/Downloads/debian-stable-vmlinuz http://ftp.us.debian.org/debian/dists/stable/main/installer-amd64/current/images/cdrom/vmlinuz
<span class="nb">mkdir</span> /var/www/cobbler/pub/Debian12.8-netboot
<span class="nb">cat</span> ~/Downloads/debian-stable-initrd.gz ~/Downloads/debian-stable-netboot-initrd.gz <span class="o">&gt;</span> /var/www/cobbler/pub/Debian12.8-netboot/initrd.gz
<span class="nb">cp</span> ~/Downloads/debian-stable-vmlinuz /var/www/cobbler/pub/Debian12.8-netboot/vmlinuz
</code></pre></div></div> <p>Add a Cobbler Distro and Profile (including the metadata-only <code class="language-plaintext highlighter-rouge">cobbler repo</code> mirrors created in the <strong>Prerequisites</strong> section above) for the new Debian repo, and the usual HTTP link:</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>cobbler distro add <span class="nt">--name</span> Debian-latest <span class="nt">--arch</span> x86_64 <span class="nt">--autoinstall-meta</span> <span class="s1">'tree'</span><span class="o">=</span><span class="s1">'http://@@http_server@@/cblr/links/Debian-latest'</span> <span class="nt">--breed</span> debian <span class="nt">--os-version</span> bookworm <span class="nt">--initrd</span> <span class="s2">"/var/www/cobbler/pub/Debian12.8-netboot/initrd.gz"</span> <span class="nt">--kernel</span> <span class="s2">"/var/www/cobbler/pub/Debian12.8-netboot/vmlinuz"</span>
cobbler profile add <span class="nt">--name</span> Debian-latest <span class="nt">--distro</span> Debian-latest <span class="nt">--autoinstall</span> bookworm-latest.seed <span class="nt">--repos</span> <span class="s2">"bookworm-latest bookworm-security bookworm-updates"</span>
<span class="nb">ln</span> <span class="nt">-s</span> /var/www/cobbler/repo_mirror/Debian-latest /var/www/cobbler/links/Debian-latest
cobbler <span class="nb">sync</span>
</code></pre></div></div> <p>Now the <strong>PXE Client</strong> should be able to boot from a generic/random MAC address and load the new “Debian-latest” Cobbler Profile over GRUB</p> <blockquote> <p>Cobbler Systems can now also be added similarly to above in the <strong>Debian 12 Bookworm PXE Deployment</strong> and <strong>Debian 11 Bullseye PXE Deployment</strong> sections above.</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>cobbler system add <span class="nt">--name</span> Debian-Latest <span class="nt">--profile</span> Debian-latest <span class="nt">--mac-address</span> <span class="s2">"aa:bb:cc:dd:ee:ff"</span> <span class="nt">--netboot-enabled</span> <span class="nb">true</span>
</code></pre></div> </div> </blockquote> <h2 id="tips--troubleshooting">Tips &amp; Troubleshooting</h2> <ol> <li> <p>The <a href="/blog/2024/Cobbler-v3.3.6-Beginners-Guide/">Cobbler 3.3.6 Beginner’s Guide</a> <strong>Tips &amp; Troubleshooting</strong> section contains some basic recommendations and limitations of Cobbler which will not be repeated here.</p> </li> <li> <p>Going the route of importing the DVD ISO file for debian PXE deployments will leave those PXE clients with less available packages to install during OS installation compared to a full mirror, but I prefer to keep the OS deployments minimal anyway.</p> </li> <li> <p>The issue mentioned in the <strong>Caveats</strong> section above is due to the <code class="language-plaintext highlighter-rouge">base-installer</code> <a href="https://salsa.debian.org/installer-team/base-installer/-/blob/1.213/library.sh?ref_type=tags">source code</a> neglecting to add the <code class="language-plaintext highlighter-rouge">Acquire::AllowInsecureRepositories "true";</code> line in to the <code class="language-plaintext highlighter-rouge">00AllowUnauthenticated</code> file on the target system (created depending on the value of preseed optoin <code class="language-plaintext highlighter-rouge">debian-installer/allow_unauthenticated</code>) as mentioned in the <a href="https://manpages.debian.org/bookworm/apt/apt-secure.8.en.html">apt-secure manpage</a>.</p> <ul> <li> <p>The installation will fail on a “cannot find a suitable kernel package” error.</p> </li> <li> <p>This error consistenly occurs on Debian 11 &amp; 12 installations.</p> </li> <li> <p>A bug has been filed with the Debian Bug Tracking System for this.</p> </li> </ul> </li> <li> <p>References</p> <ul> <li><a href="https://forums.debian.net/viewtopic.php?t=157991">https://forums.debian.net/viewtopic.php?t=157991</a></li> <li><a href="https://www.debian.org/distrib/netinst">https://www.debian.org/distrib/netinst</a></li> <li><a href="https://www.debian.org/distrib/netinst#netboot">https://www.debian.org/distrib/netinst#netboot</a> <ul> <li><a href="https://deb.debian.org/debian/dists/bookworm/main/installer-amd64/current/images/MANIFEST">https://deb.debian.org/debian/dists/bookworm/main/installer-amd64/current/images/MANIFEST</a></li> </ul> </li> <li><a href="https://wiki.debian.org/PXEBootInstall">https://wiki.debian.org/PXEBootInstall</a></li> <li><a href="https://wiki.debian.org/DebianInstaller">https://wiki.debian.org/DebianInstaller</a> <ul> <li><a href="https://wiki.debian.org/DebianInstaller/NetbootFirmware">https://wiki.debian.org/DebianInstaller/NetbootFirmware</a></li> <li><a href="https://wiki.debian.org/DebianInstaller/Preseed">https://wiki.debian.org/DebianInstaller/Preseed</a></li> </ul> </li> <li><a href="https://wiki.debian.org/DebianInstaller/NetbootAssistant">https://wiki.debian.org/DebianInstaller/NetbootAssistant</a></li> <li><a href="https://www.debian.org/releases/stable/amd64/apbs03.en.html">https://www.debian.org/releases/stable/amd64/apbs03.en.html</a> <ul> <li><a href="https://www.debian.org/releases/bookworm/amd64/apbs03.en.html">https://www.debian.org/releases/bookworm/amd64/apbs03.en.html</a></li> </ul> </li> <li><a href="https://www.debian.org/releases/bookworm/amd64/ch06s03.en.html">https://www.debian.org/releases/bookworm/amd64/ch06s03.en.html</a></li> <li><a href="https://www.debian.org/releases/stable/amd64/ch05s04">https://www.debian.org/releases/stable/amd64/ch05s04</a></li> <li><a href="https://www.debian.org/releases/stable/amd64/ch04s05">https://www.debian.org/releases/stable/amd64/ch04s05</a> <ul> <li><a href="https://www.debian.org/releases/stable/amd64/ch04s02.en.html#where-files">https://www.debian.org/releases/stable/amd64/ch04s02.en.html#where-files</a></li> </ul> </li> <li><a href="https://wiki.debian.org/debconf">https://wiki.debian.org/debconf</a> <ul> <li><a href="https://packages.debian.org/bookworm/debconf-utils">https://packages.debian.org/bookworm/debconf-utils</a></li> </ul> </li> <li><a href="https://wiki.debian.org/AutomatedInstallation">https://wiki.debian.org/AutomatedInstallation</a> <ul> <li><a href="https://fai-project.org/FAIme/">https://fai-project.org/FAIme/</a></li> </ul> </li> <li><a href="https://www.debian.org/releases/stable/amd64/apbs04.en.html">https://www.debian.org/releases/stable/amd64/apbs04.en.html</a> <ul> <li><a href="ttps://www.debian.org/releases/bookworm/amd64/apbs04.en.html">https://www.debian.org/releases/bookworm/amd64/apbs04.en.html</a></li> <li><a href="https://www.debian.org/releases/bookworm/example-preseed.txt">https://www.debian.org/releases/bookworm/example-preseed.txt</a></li> <li><a href="https://www.debian.org/releases/bullseye/example-preseed.txt">https://www.debian.org/releases/bullseye/example-preseed.txt</a></li> <li><a href="https://www.debian.org/releases/stable/example-preseed.txt">https://www.debian.org/releases/stable/example-preseed.txt</a></li> <li><a href="https://preseed.debian.net/debian-preseed/bookworm/amd64-main-full.txt">https://preseed.debian.net/debian-preseed/bookworm/amd64-main-full.txt</a></li> </ul> </li> <li><a href="https://snapshot.debian.org/archive/debian/">https://snapshot.debian.org/archive/debian/</a></li> <li><a href="https://unix.stackexchange.com/questions/533539/switch-tabs-in-debian-installer-over-serial-console-with-putty">https://unix.stackexchange.com/questions/533539/switch-tabs-in-debian-installer-over-serial-console-with-putty</a></li> <li><a href="https://cobbler.github.io/blog/2024/06/30/libvirt-ipxe.html">https://cobbler.github.io/blog/2024/06/30/libvirt-ipxe.html</a></li> <li><a href="https://lists.debian.org/debian-boot/2016/07/msg00199.html">https://lists.debian.org/debian-boot/2016/07/msg00199.html</a></li> <li><a href="https://wiki.debian.org/MacBook#Debian_installation">https://wiki.debian.org/MacBook#Debian_installation</a></li> <li><a href="https://wiki.debian.org/DebianInstaller/ReleaseProcess">https://wiki.debian.org/DebianInstaller/ReleaseProcess</a></li> <li><a href="https://wiki.debian.org/DebianInstaller/Debconf11Summary">https://wiki.debian.org/DebianInstaller/Debconf11Summary</a></li> <li><a href="https://wiki.debian.org/Debian_Systems_Administration_for_non-Debian_SysAdmins?action=show&amp;redirect=Debian_SystemAdministration_for_non-Debian_SysAdmins">https://wiki.debian.org/Debian_Systems_Administration_for_non-Debian_SysAdmins?action=show&amp;redirect=Debian_SystemAdministration_for_non-Debian_SysAdmins</a></li> <li><a href="https://ftp.debian.org/debian/">https://ftp.debian.org/debian/</a></li> <li><a href="https://www.debian.org/mirror/ftpmirror">https://www.debian.org/mirror/ftpmirror</a></li> <li><a href="https://www.debian.org/mirror/list">https://www.debian.org/mirror/list</a> <ul> <li><a href="https://www.debian.org/mirror/list-full">https://www.debian.org/mirror/list-full</a></li> </ul> </li> <li><a href="https://www.debian.org/releases/">https://www.debian.org/releases/</a></li> <li><a href="https://www.debian.org/distrib/archive">https://www.debian.org/distrib/archive</a></li> <li><a href="https://help.ubuntu.com/community/Debmirror">https://help.ubuntu.com/community/Debmirror</a></li> <li><a href="https://github.com/cobbler/cobbler/issues/2437">https://github.com/cobbler/cobbler/issues/2437</a> <ul> <li><a href="https://wiki.debian.org/SecureApt">https://wiki.debian.org/SecureApt</a> <ul> <li><a href="https://wiki.debian.org/DebianKeyring">https://wiki.debian.org/DebianKeyring</a> <ul> <li><a href="https://ftp-master.debian.org/keys.html">https://ftp-master.debian.org/keys.html</a></li> <li><a href="https://keyring.debian.org/">https://keyring.debian.org/</a></li> <li><a href="https://db.debian.org/">https://db.debian.org/</a></li> </ul> </li> <li><a href="https://www.reddit.com/r/debian/comments/yusdca/how_do_i_find_the_correct_debian_public_key/">https://www.reddit.com/r/debian/comments/yusdca/how_do_i_find_the_correct_debian_public_key/</a> <ul> <li><a href="https://www.debian.org/CD/verify">https://www.debian.org/CD/verify</a></li> </ul> </li> </ul> </li> <li><a href="https://serverfault.com/questions/669809/sync-ubuntu-repository-with-cobbler-server-fails">https://serverfault.com/questions/669809/sync-ubuntu-repository-with-cobbler-server-fails</a></li> <li><a href="https://forums.debian.net/viewtopic.php?t=112820">https://forums.debian.net/viewtopic.php?t=112820</a> <ul> <li><a href="https://debian-handbook.info/browse/wheezy/sect.package-authentication.html">https://debian-handbook.info/browse/wheezy/sect.package-authentication.html</a></li> </ul> </li> <li><a href="https://serverfault.com/questions/337278/debian-how-can-i-securely-get-debian-archive-keyring-so-that-i-can-do-an-apt-g">https://serverfault.com/questions/337278/debian-how-can-i-securely-get-debian-archive-keyring-so-that-i-can-do-an-apt-g</a></li> <li><a href="https://ubuntuforums.org/archive/index.php/t-2217665.html">https://ubuntuforums.org/archive/index.php/t-2217665.html</a></li> </ul> </li> </ul> </li> </ol>]]></content><author><name>Sus-Admin</name></author><category term="cobbler"/><summary type="html"><![CDATA[This guide assumes that you have a Fedora 34 server or workstation system configured to run Cobbler v3.3.7 similarly to the Cobbler v3.3.6 Beginner’s guide.]]></summary></entry><entry><title type="html">Cobbler v3.3.6 Beginner’s Guide</title><link href="https://sus-admin.github.io/blog/2024/Cobbler-v3.3.6-Beginners-Guide/" rel="alternate" type="text/html" title="Cobbler v3.3.6 Beginner’s Guide"/><published>2024-10-16T00:00:00+00:00</published><updated>2024-10-16T00:00:00+00:00</updated><id>https://sus-admin.github.io/blog/2024/Cobbler-v3.3.6-Beginners-Guide</id><content type="html" xml:base="https://sus-admin.github.io/blog/2024/Cobbler-v3.3.6-Beginners-Guide/"><![CDATA[<p>This guide is intended to accompany and extend the official Cobbler <a href="https://cobbler.readthedocs.io/en/v3.3.6/installation-guide.html">Installation</a> and <a href="https://cobbler.readthedocs.io/en/v3.3.6/quickstart-guide.html">Quick Start</a> guides.</p> <p>Cobbler is an open-source, system deployment and provisioning software which can simplify and automate operating system installations over the network, as well as rudimentary configuration and patch management capabilities and some other features too. It is a modular solution for deploying systems via PXE, where you would normally have to setup and maintain your own DHCP, TFTP and HTTP servers to provide the full PXE boot+install functionality, Cobbler abstracts all (or some) of those services and manages them for you. Cobbler was initially developed at Red Had and is best suited to deploy Red Hat Linux flavors, like Fedora, but it is fairly capable of deploying just about anything, albeit sometimes requiring some advanced customizations.</p> <h2 class="no_toc" id="table-of-contents">Table of Contents</h2> <ol id="markdown-toc"> <li><a href="#objective" id="markdown-toc-objective">Objective</a></li> <li><a href="#environment" id="markdown-toc-environment">Environment</a></li> <li><a href="#fedora-server-basics" id="markdown-toc-fedora-server-basics">Fedora Server Basics</a> <ol> <li><a href="#updating" id="markdown-toc-updating">Updating</a></li> <li><a href="#customizing" id="markdown-toc-customizing">Customizing</a></li> </ol> </li> <li><a href="#cobbler-basics" id="markdown-toc-cobbler-basics">Cobbler Basics</a> <ol> <li><a href="#dependencies" id="markdown-toc-dependencies">Dependencies</a></li> <li><a href="#installation" id="markdown-toc-installation">Installation</a></li> <li><a href="#configuration" id="markdown-toc-configuration">Configuration</a></li> </ol> </li> <li><a href="#fedora-34-pxe-deployment" id="markdown-toc-fedora-34-pxe-deployment">Fedora 34 PXE Deployment</a></li> <li><a href="#fedora-37-pxe-deployment" id="markdown-toc-fedora-37-pxe-deployment">Fedora 37 PXE Deployment</a></li> <li><a href="#security-hardening" id="markdown-toc-security-hardening">Security Hardening</a> <ol> <li><a href="#selinux" id="markdown-toc-selinux">SELinux</a> <ol> <li><a href="#enabling-selinux" id="markdown-toc-enabling-selinux">Enabling SELinux</a></li> <li><a href="#enforcing-selinux" id="markdown-toc-enforcing-selinux">Enforcing SELinux</a></li> <li><a href="#cobbler-selinux-config" id="markdown-toc-cobbler-selinux-config">Cobbler SELinux Config</a></li> </ol> </li> <li><a href="#network-security" id="markdown-toc-network-security">Network Security</a> <ol> <li><a href="#firewalld" id="markdown-toc-firewalld">Firewalld</a></li> <li><a href="#service-confinement" id="markdown-toc-service-confinement">Service confinement</a></li> </ol> </li> </ol> </li> <li><a href="#tips--troubleshooting" id="markdown-toc-tips--troubleshooting">Tips &amp; Troubleshooting</a></li> </ol> <h2 id="objective">Objective</h2> <p>Starting with a fresh installation of Fedora 34 Server (or Workstation - <a href="https://archives.fedoraproject.org/pub/archive/fedora/linux/releases/34/Server/x86_64/iso/">Fedora download archive</a>), this guide will detail preparing the system for Cobbler v3.3.6 installation from source, including prerequisite/dependency installations and network setup, and then provide all necessary steps to install and configure Cobbler to automatically provision another LAN host with Fedora 34 or 37 Server through PXE network boot.</p> <h2 id="environment">Environment</h2> <p>This guide assumes that both the <strong>Cobbler Server</strong> and <strong>PXE Clinet(s)</strong> are running as <strong>virtual machines (VMs)</strong> under the same <strong>Oracle VM VitualBox</strong> <em>(Windows 10)</em> host</p> <ul> <li> <p>The <strong>Cobbler server VM</strong> is configured with the following system specs:</p> <ul> <li> <p><strong>BIOS or UEFI firmware</strong></p> </li> <li> <p><strong>64 GB HDD</strong></p> </li> <li> <p><strong>4 GB RAM</strong></p> </li> <li> <p><strong>2 vCPUs</strong></p> </li> <li> <p><strong>2 virtual network adapters.</strong></p> <ol> <li> <p>VirtualBox VM <strong><em>Bridged Adapter</em></strong> connected to the primary physical NIC on the Windows host so that SSH to the Cobbler server will be more accessible.</p> </li> <li> <p>VirtualBox VM <strong><em>Internal Network</em></strong> adapter named <strong><em>“cobbler”</em></strong> which will have no external network connectivity (closed LAN; no internet access).</p> </li> </ol> </li> </ul> </li> <li> <p>The <strong>PXE client VM</strong> <em>(the target for network installations)</em> has the following specs:</p> <ul> <li> <p><strong>BIOS or UEFI firmware</strong> with the following boot order <em>(See</em> <strong><em>Tips &amp; Troubleshooting</em></strong> <em>section below for more info)</em>:</p> <ol> <li> <p>Hard Drive</p> </li> <li> <p>Network</p> </li> </ol> </li> <li> <p><strong>32 GB HDD</strong></p> </li> <li> <p><strong>4 GB RAM</strong></p> </li> <li> <p><strong>2 vCPUs</strong></p> </li> <li> <p><strong>1 virtual network adapter</strong> which is connected to the same <strong><em>“cobbler”</em></strong> VirtualBox adapter described above.</p> </li> </ul> </li> </ul> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <h3><b>Physical Network Diagram</b></h3> <figure> <picture> <img src="/assets/img/Cobbler-3.3.6-Beginners_Physical.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <div class="caption"> The Cobbler server and PXE client(s) are not shown here, as they are VMs, not physical workstations. </div> </div> <div class="col-sm mt-3 mt-md-0"> <h3><span style="float:right;"><b>Logical Network Diagram</b></span></h3> <figure> <picture> <img src="/assets/img/Cobbler-3.3.6-Beginners_Logical.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <div class="caption"> The VirtualBox host (my Windows 10 laptop) is only shown for completeness, it is not used in the procedures other than the VM settings described above. </div> </div> </div> <hr/> <p><em>This exact configuration is not a strict requirement for deploying systems through Cobbler, but it proves that a PXE client is able to boot and install an operating system over the local network without public internet connectivity, using only the resources immediately available on the VM and the Cobbler server, aleviating a potential bandwidth bottleneck at the WAN.</em></p> <h2 id="fedora-server-basics">Fedora Server Basics</h2> <p>As stated above, this document outlines the procedures necessary to install and configure Cobbler v3.3.6 on a Fedora 34 host server for local network installations/provisioning through PXE. Additionally, recommended security measures for the Cobbler server will be detailed towards the end of this guide, including basic <strong>selinux</strong> and <strong>firewalld</strong> configs.</p> <h3 id="updating">Updating</h3> <p>First, set a static IP address on the Cobbler server interface <em>(enp0s8)</em> for hosting PXE services</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>nmcli conn modify enp0s8 ipv4.method manual ipv4.addr <span class="s2">"10.0.0.10/24"</span>
</code></pre></div></div> <p>If Cobbler is to be installed on a Fedora 34 <em>Server edition</em> host, and automatic partitioning was used during initial OS installation, be sure to extend the LVM Logical Volme to a more usable capacity (recommended 95%):</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>lvextend /dev/mapper/fedora_<span class="nv">$HOSTNAME</span><span class="nt">-root</span> <span class="nt">-l</span>+95%FREE <span class="nt">-r</span>
</code></pre></div></div> <p>Update the Fedora 34 host with the latest YUM repo updates:</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>yum update
</code></pre></div></div> <p>Install <strong>VirtualBox VM Guest Additions</strong>, either from the YUM repos, or the Guest Adds. CD included with VirtualBox Manager <em>(YUM method is shown below, but VirtualBox usually recommends using the Guest Adds. CD)</em>:</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>yum <span class="nb">install </span>virtualbox-guest-additions
</code></pre></div></div> <h3 id="customizing">Customizing</h3> <p>Install your preferred Linux sys admin tools and configure some convenient bash settings, for example <em>(PS1 variable controls bash shell prompt)</em>:</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>systemctl <span class="nb">enable</span> <span class="nt">--now</span> ssh
yum <span class="nb">install </span>neovim fzf tmux htop net-tools tftp
<span class="o">[</span> <span class="nt">-e</span> ~/.bash_profile <span class="o">]</span> <span class="o">&amp;&amp;</span> <span class="nb">echo</span> <span class="s1">'export PS1="\[\e[1;32m\][\u@\h \W]\$ \[\e[0m\]"'</span> | <span class="nb">tee</span> <span class="nt">-a</span> ~/.bash_profile <span class="o">||</span> <span class="nb">echo</span> <span class="s1">'export PS1="\[\e[1;32m\][\u@\h \W]\$ \[\e[0m\]"'</span> | <span class="nb">tee</span> <span class="nt">-a</span> ~/.bashrc
</code></pre></div></div> <p>SELinux and firewalld will be configured after Cobbler has been tested successfully, disable them for now.</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sed</span> <span class="nt">-i</span> <span class="nt">-E</span> <span class="s2">"s/SELINUX=(disabled|enforcing)/SELINUX=permissive/"</span> /etc/selinux/config
setenforce permissive
</code></pre></div></div> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>systemctl disable <span class="nt">--now</span> firewalld
</code></pre></div></div> <h2 id="cobbler-basics">Cobbler Basics</h2> <blockquote> <p>Now would be a good time to power off the Cobbler server to take a VM snapshot.</p> </blockquote> <h3 id="dependencies">Dependencies</h3> <p>Download the Fedora 34 &amp; 37 <strong>Server</strong> installation media (.iso files):</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span> <span class="nt">-d</span> ~/Downloads <span class="o">]</span> <span class="o">||</span> <span class="nb">mkdir</span> ~/Downloads
<span class="nb">cd</span> ~/Downloads <span class="o">&amp;&amp;</span> wget https://archives.fedoraproject.org/pub/archive/fedora/linux/releases/34/Server/x86_64/iso/Fedora-Server-dvd-x86_64-34-1.2.iso
<span class="nb">cd</span> ~/Downloads <span class="o">&amp;&amp;</span> wget https://archives.fedoraproject.org/pub/archive/fedora/linux/releases/37/Server/x86_64/iso/Fedora-Server-dvd-x86_64-37-1.7.iso
</code></pre></div></div> <p>Install dependencies for building and installing Cobbler from Source</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>yum <span class="nb">install </span>make git python3-devel python3-sphinx python3-coverage openssl httpd-devel
</code></pre></div></div> <blockquote> <p>Cobbler is also available through the YUM repos, using <code class="language-plaintext highlighter-rouge">yum install cobbler</code></p> </blockquote> <p>Download <strong>cobbler v3.3.6</strong> source code from the official GitHub repo</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>wget <span class="nt">-P</span>  ~/Downloads/. https://github.com/cobbler/cobbler/archive/refs/tags/v3.3.6.zip

<span class="nb">mkdir</span> <span class="nt">-p</span> /usr/src/cobbler
<span class="nb">cd</span> /usr/src/cobbler
unzip <span class="nt">-d</span> <span class="nb">.</span> ~/Downloads/v3.3.6
</code></pre></div></div> <p>Install the runtime dependencies and enable system services <em>(systemd will probably report some errors…)</em></p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>yum <span class="nb">install </span>httpd wget curl rsync dnf-plugins-core dosfstools createrepo_c xorriso python3-mod_wsgi python-cheetah python3-pyyaml python-netaddr python-librepo python-schema syslinux tftp-server dhcp-server pykickstart ipxe-bootimgs ipxe-roms koan mod_ssl python3-pyflakes python3-pycodestyle rpm-build python3-dns python3-file-magic python3-pymongo
systemctl <span class="nb">enable</span> <span class="nt">--now</span> httpd tftp dhcpd
</code></pre></div></div> <p>Install the GRUB bootloader and module packages so GRUB can be used as the network bootloader for PXE clients:</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>yum <span class="nb">install </span>grub2-pc grub2-pc-modules grub2-efi-x64-modules grub2-efi-aa64-modules grub2-efi-arm-modules grub2-efi-ia32-modules grub2-emu-modules grub2-emu-modules grub2-ppc64le-modules grub2-emu
</code></pre></div></div> <h3 id="installation">Installation</h3> <p>Install Cobbler</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cd</span> /usr/src/cobbler/cobbler-3.3.6
make <span class="nb">install
</span>systemctl restart httpd
</code></pre></div></div> <p>Reconfigure the <strong>cobblerd</strong> daemon as described in Cobbler’s <a href="https://cobbler.readthedocs.io/en/v3.3.6/installation-guide.html#id3">official docs</a>:</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sed</span> <span class="nt">-i</span> <span class="s2">"s,usr/bin/cobblerd,usr/local/bin/cobblerd,"</span> /etc/cobbler/cobblerd.service
<span class="nb">cp</span> /etc/cobbler/cobblerd.service /etc/systemd/system/.
systemctl daemon-reload
systemctl <span class="nb">enable </span>cobblerd
</code></pre></div></div> <h3 id="configuration">Configuration</h3> <p>Reconfigure the default Cobbler settings file to match the local server:</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sed</span> <span class="nt">-i</span> <span class="s2">"s/manage_dhcp: false/manage_dhcp: true/"</span> /etc/cobbler/settings.yaml
<span class="nb">sed</span> <span class="nt">-i</span> <span class="s2">"s/dhcp_v4: false/dhcp_v4: true/"</span> /etc/cobbler/settings.yaml
<span class="nb">sed</span> <span class="nt">-i</span> <span class="s2">"s/server: 127.0.0.1/server: 10.0.0.10/"</span> /etc/cobbler/settings.yaml
<span class="nb">sed</span> <span class="nt">-i</span> <span class="s2">"s/next_server_v4: 127.0.0.1/next_server_v4: 10.0.0.10/"</span> /etc/cobbler/settings.yaml
</code></pre></div></div> <p>Optionally, toggle some additional settings:</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sed</span> <span class="nt">-i</span> <span class="s2">"s/pxe_just_once: true/pxe_just_once: false/"</span> /etc/cobbler/settings.yaml
<span class="nb">sed</span> <span class="nt">-i</span> <span class="s2">"s/enable_ipxe: false/enable_ipxe: true/"</span> /etc/cobbler/settings.yaml
</code></pre></div></div> <blockquote> <p>Even if you do not enable iPXE above, it won’t hurt to symlink the correct file that cobbler points to in the <code class="language-plaintext highlighter-rouge">/etc/cobbler/dhcp.template</code> file.</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">ln</span> <span class="nt">-s</span> /usr/share/ipxe/undionly.kpxe /var/lib/cobbler/loaders/undionly.kpxe
</code></pre></div> </div> </blockquote> <p>Edit the subnet decaration in <strong>/etc/cobbler/dhcp.tempate</strong> to match the <strong>enp0s8</strong> interface:</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>subnet 10.0.0.0 netmask 255.255.255.0 <span class="o">{</span>
     option routers             10.0.0.1<span class="p">;</span>
     option domain-name-servers 10.0.0.1<span class="p">;</span>
     option subnet-mask         255.255.255.0<span class="p">;</span>
     range dynamic-bootp        10.0.0.100 10.0.0.199<span class="p">;</span>
</code></pre></div></div> <p>Cobbler should now be able to start up and run <code class="language-plaintext highlighter-rouge">sync</code> and <code class="language-plaintext highlighter-rouge">check</code> tasks without fatal errors:</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>systemctl restart cobblerd <span class="o">&amp;&amp;</span> <span class="nb">sleep </span>10
cobbler <span class="nb">sync</span> <span class="o">&amp;&amp;</span> <span class="nb">sleep </span>5
cobbler check
cobbler mkloaders
</code></pre></div></div> <p>Finally, pull the latest official Cobbler signatures</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>cobbler signature update
systemctl restart cobblerd <span class="o">&amp;&amp;</span> <span class="nb">sleep </span>5
cobbler <span class="nb">sync</span>
</code></pre></div></div> <p><strong>The Cobbler server is now ready to begin importing distros and deploying systems</strong></p> <h2 id="fedora-34-pxe-deployment">Fedora 34 PXE Deployment</h2> <p>Mount the Fedora 34 Server installation media and run the <code class="language-plaintext highlighter-rouge">cobbler import</code></p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">mkdir</span> /mnt/Fedora
mount <span class="nt">-t</span> iso9660 <span class="nt">-o</span> loop,ro ~/Downloads/Fedora-Server-dvd-x86_64-34-1.2.iso /mnt/Fedora
cobbler import <span class="nt">--name</span><span class="o">=</span>Fedora34 <span class="nt">--arch</span><span class="o">=</span>x86_64 <span class="nt">--path</span><span class="o">=</span>/mnt/Fedora
</code></pre></div></div> <p>Optionally, inspect the imported Distribution and child Profile:</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>cobbler distro report
cobbler profile report
</code></pre></div></div> <p>Create a new generic Fedora 34 kickstart file from Cobbler’s default <code class="language-plaintext highlighter-rouge">sample.ks</code> and configure the new Cobbler Profile to use it:</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cat</span> /var/lib/cobbler/templates/sample.ks | <span class="nb">grep</span> <span class="nt">-v</span> <span class="s2">"</span><span class="se">\-</span><span class="s2">-useshadow"</span> | <span class="nb">grep</span> <span class="nt">-v</span> ^install | <span class="nb">sed</span> <span class="s1">'s,selinux --disabled,selinux --permissive,'</span> | <span class="nb">sed</span> <span class="s1">'s,rootpw --iscrypted \$default_password_crypted,rootpw --iscrypted \$default_password_crypted\nuser --groups=wheel --name=fedora --password=\$default_password_crypted --iscrypted --gecos="fedora",'</span> | <span class="nb">tee</span> /var/lib/cobbler/templates/Fedora34.ks
cobbler profile edit <span class="nt">--name</span> Fedora34-x86_64 <span class="nt">--autoinstall</span> Fedora34.ks
</code></pre></div></div> <blockquote> <p>This new kickstart file has removed some options that cause fatal errors during installation, and also configures SELinux in <code class="language-plaintext highlighter-rouge">permissive</code> mode on the resulting system, as well as creating a new admin user named <code class="language-plaintext highlighter-rouge">fedora</code> which allows for immediate SSH access to the installed system.</p> </blockquote> <p>Now, create the <strong>PXE Client</strong> VM according to the specs described in the <strong>Environment</strong> section above and note down the vNIC’s MAC address.</p> <blockquote> <p>At this point, you may run the following commands on the Cobbler server, then start the <strong>PXE Client</strong> VM to test a manual installation over PXE.</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>systemctl restart cobblerd
cobbler <span class="nb">sync</span>
</code></pre></div> </div> </blockquote> <p>Finally, create a new Cobbler System, replacing <code class="language-plaintext highlighter-rouge">aa:bb:cc:dd:ee:ff</code> with the MAC Address of the <strong>PXE Client</strong> VM created above, and sync up Cobbler <em>(More information on Cobbler autoinstall templates and kickstart files in the</em> <strong><em>Tips &amp; Troubleshooting</em></strong> <em>section below)</em>:</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>cobbler system add <span class="nt">--name</span> Fedora34 <span class="nt">--profile</span> Fedora34-x86_64 <span class="nt">--mac-adress</span> <span class="s2">"aa:bb:cc:dd:ee:ff"</span> <span class="nt">--netboot-enabled</span> <span class="nb">true</span> <span class="nt">--hostname</span> fedora34 <span class="nt">--interface</span> enp0s3 <span class="nt">--static</span> <span class="nb">true</span> <span class="nt">--ip-address</span> 10.0.0.11 <span class="nt">--gateway</span> 10.0.0.1 <span class="nt">--netmask</span> 255.255.255.0 <span class="nt">--name-servers</span> <span class="s2">"10.0.0.1"</span>
systemctl restart cobblerd <span class="o">&amp;&amp;</span> <span class="nb">sleep </span>10
cobbler <span class="nb">sync</span>
</code></pre></div></div> <p><em>leave out the <code class="language-plaintext highlighter-rouge">--static true</code> option in the above command to configure the PXE client to use DHCP for its IP configuration post-install; if using DHCP, you may omit all the command parameters following <code class="language-plaintext highlighter-rouge">--netboot-enabled true</code>.</em></p> <blockquote> <p><em>The</em> <strong><em>PXE Client</em></strong> <em>VM can now be powered on, and should automatically boot to PXE and install Fedora 34 to the VM HDD using the “Fedora34.ks” kickstart template created above.</em></p> <blockquote> <p>The newly installed system will have the password “cobbler” for both users “root” and “fedora” which is configurable through the <code class="language-plaintext highlighter-rouge">default_password_crypted</code> setting in <code class="language-plaintext highlighter-rouge">/etc/cobbler/settings.yaml</code> as well as the kickstart template file created above.</p> </blockquote> </blockquote> <h2 id="fedora-37-pxe-deployment">Fedora 37 PXE Deployment</h2> <p>Take similar steps as above to import and autoinstall Fedora 37 Server, being sure to use unique names for Cobbler Distros, Profiles, and Systems, as well as unique MAC addresses and IP addresses for Systems (unless configured differently in <code class="language-plaintext highlighter-rouge">/etc/cobbler/settings.yaml</code>)</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>mount <span class="nt">-t</span> iso9660 <span class="nt">-o</span> loop,ro ~/Downloads/Fedora-Server-dvd-x86_64-37-1.7.iso /mnt/Fedora
cobbler import <span class="nt">--name</span><span class="o">=</span>Fedora37 <span class="nt">--arch</span><span class="o">=</span>x86_64 <span class="nt">--path</span><span class="o">=</span>/mnt/Fedora
cobbler distro edit <span class="nt">--name</span> Fedora37-x86_64 <span class="nt">--kernel-options</span> <span class="s2">""</span>
<span class="nb">cat</span> /var/lib/cobbler/templates/sample.ks | <span class="nb">grep</span> <span class="nt">-v</span> <span class="s2">"</span><span class="se">\-</span><span class="s2">-useshadow"</span> | <span class="nb">grep</span> <span class="nt">-v</span> ^install | <span class="nb">sed</span> <span class="s1">'s,selinux --disabled,selinux --permissive,'</span> | <span class="nb">sed</span> <span class="s1">'s,rootpw --iscrypted \$default_password_crypted,rootpw --iscrypted \$default_password_crypted\nuser --groups=wheel --name=fedora --password=\$default_password_crypted --iscrypted --gecos="fedora",'</span> | <span class="nb">tee</span> /var/lib/cobbler/templates/Fedora37.ks
cobbler profile edit <span class="nt">--name</span> Fedora37-x86_64 <span class="nt">--autoinstall</span> Fedora37.ks
cobbler system add <span class="nt">--name</span> Fedora37 <span class="nt">--profile</span> Fedora37-x86_64 <span class="nt">--mac-address</span> <span class="s2">"aa:bb:cc:dd:ee:ff"</span> <span class="nt">--netboot-enabled</span> <span class="nb">true</span> <span class="nt">--hostname</span> fedora37 <span class="nt">--interface</span> enp0s3 <span class="nt">--static</span> <span class="nb">true</span> <span class="nt">--ip-address</span> 10.0.0.12 <span class="nt">--gateway</span> 10.0.0.1 <span class="nt">--netmask</span> 255.255.255.0 <span class="nt">--name-servers</span> <span class="s2">"10.0.0.1"</span>
systemctl restart cobblerd <span class="o">&amp;&amp;</span> <span class="nb">sleep </span>10
cobbler <span class="nb">sync</span>
</code></pre></div></div> <h2 id="security-hardening">Security Hardening</h2> <p>SELinux and firewall operations can seem daunting at first, especially with an application as complex as Cobbler, but the basic configurations here are relatively simple.</p> <blockquote> <p>It is possible to lock yourself out of your Linux server with SELinux, so now would be another good time to take a VM snapshot.</p> </blockquote> <h3 id="selinux">SELinux</h3> <p>SELinux should come enabled by default on a fresh Fedora 34 Server installation, and we set it to <code class="language-plaintext highlighter-rouge">permissive</code> in the <strong>Base Updates and Configs</strong> section above, but sometimes <code class="language-plaintext highlighter-rouge">selinux</code> can be disabled on the kernel command line</p> <p>If <code class="language-plaintext highlighter-rouge">selinux=0</code> is set in the <code class="language-plaintext highlighter-rouge">/proc/cmdline</code> file, then follow the instructions found in the <code class="language-plaintext highlighter-rouge">/etc/selinux/config</code> file for the <code class="language-plaintext highlighter-rouge">grubby</code> command to enable selinux at boot time <em>(DO NOT reboot yet)</em>. The kernel command line parameters will take precedence over the other configurations.</p> <p>With SELinux enabled at the kernel command line, run the <code class="language-plaintext highlighter-rouge">getenforce</code> command to check the current enforcing status</p> <ul> <li> <p>if <code class="language-plaintext highlighter-rouge">permissive</code> is returned, skip to the <strong>Enforcing SELinux</strong> section below</p> </li> <li> <p>if <code class="language-plaintext highlighter-rouge">enforcing</code>, skip to the <strong>Cobbler SELinux Config</strong> section.</p> </li> <li> <p>if <code class="language-plaintext highlighter-rouge">disabled</code>, proceed to the next section <strong>Enabling SELinux</strong></p> </li> </ul> <h4 id="enabling-selinux">Enabling SELinux</h4> <p>If SELinux was disabled at the kernel command line or in the <code class="language-plaintext highlighter-rouge">/etc/selinux/config</code> file, be sure to create the <code class="language-plaintext highlighter-rouge">.autorelabel</code> file at the root of the filesystem, and set SELINUX mode to <code class="language-plaintext highlighter-rouge">permissive</code> and <strong>NOT</strong> <code class="language-plaintext highlighter-rouge">enforcing</code> in the <code class="language-plaintext highlighter-rouge">/etc/selinux/config</code> file.</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sed</span> <span class="nt">-i</span> <span class="nt">-E</span> <span class="s2">"s/SELINUX=(disabled|enforcing)/SELINUX=permissive/"</span> /etc/selinux/config
<span class="nb">touch</span> /.autorelabel
</code></pre></div></div> <p>With selinux enabled at the kernel command line and set to permissive in “/etc/selinux/config” <strong>reboot the Fedora 34 Cobbler server</strong> and observe the filesystem relabel as the system boots.</p> <blockquote> <p>The local filesystem maintains no security context labels when SELinux is disbled, so rebooting directly to SELinux <code class="language-plaintext highlighter-rouge">enforcing</code> mode will prevent the system from booting properly.</p> </blockquote> <h4 id="enforcing-selinux">Enforcing SELinux</h4> <p>Change the active runtime and boot state/mode of SELinux to <code class="language-plaintext highlighter-rouge">enforcing</code>:</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>setenforce enforcing

<span class="nb">sed</span> <span class="nt">-i</span> <span class="s1">'s/SELINUX=permissive/SELINUX=enforcing/'</span> /etc/selinux/config
</code></pre></div></div> <h4 id="cobbler-selinux-config">Cobbler SELinux Config</h4> <p>WIth SELinux operating in <code class="language-plaintext highlighter-rouge">enforcing</code> mode, enable the necessary SELinux Booleans which will allow for basic operation of Cobbler:</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>setsebool <span class="nt">-P</span> cobbler_can_network_connect 1
setsebool <span class="nt">-P</span> httpd_can_network_connect_cobbler 1
setsebool <span class="nt">-P</span> httpd_serve_cobbler_files 1
</code></pre></div></div> <p>With SELinux enabled, some files generated/copied/moved by Cobbler will not retain the correct security context labels necessary for proper operation. Create a Cobbler <strong>sync-trigger</strong> to correct the SELinux labels upon any and all successful completions of a <code class="language-plaintext highlighter-rouge">cobbler sync</code> task.</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">echo</span> <span class="s1">'#!/bin/bash
restorecon -R /var/lib/tftpboot
restorecon -R /var/www/cobbler'</span> | <span class="nb">tee</span> /var/lib/cobbler/triggers/sync/post/zzz-selinux-restorecon

<span class="nb">chmod </span>u+x /var/lib/cobbler/triggers/sync/post/zzz-selinux-restorecon
</code></pre></div></div> <p>issue another <code class="language-plaintext highlighter-rouge">cobbler sync</code> to check for errors <em>(should show</em> <strong><em>*** TASK COMPLETE ***</em></strong><em>)</em>:</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>systemctl restart cobblerd <span class="o">&amp;&amp;</span> <span class="nb">sleep </span>10
cobbler <span class="nb">sync</span>
</code></pre></div></div> <blockquote> <p>Cobbler Triggers will run at different times depending on which directory they are placed in, and in alphabetical order within that directory. This sync-trigger specifically should typically be run after ALL other sync tasks/triggers are completed</p> <blockquote> <p>Additionally, if there is an error with a <code class="language-plaintext highlighter-rouge">cobbler sync</code> task (trigger, or otherwise) before reaching this trigger, the sync task will terminate, and the trigger will not run, causing Cobbler files to not be relabeled appropriately… however, there are likely bigger issues at hand if the <code class="language-plaintext highlighter-rouge">cobbler sync</code> task is erroring out.</p> </blockquote> <p>More info on <a href="https://cobbler.readthedocs.io/en/v3.3.6/user-guide.html#triggers">Cobbler Triggers</a></p> </blockquote> <h3 id="network-security">Network Security</h3> <p>reduce network exposure with <strong>firewalld</strong> and secure service/daemon settings</p> <h4 id="firewalld">Firewalld</h4> <p>Firewalld is the default firewall installed on Fedora and most Red Hat distros, verify that it is enabled and running:</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>systemctl <span class="nb">enable</span> <span class="nt">--now</span> firewalld
</code></pre></div></div> <p>As described above, this Cobbler server has 2 ethernet NICs: <strong>enp0s3</strong> &amp; <strong>enp0s8</strong></p> <ul> <li> <p><strong>enp0s3</strong> being the <em>upstream</em> interface which can access the internet</p> </li> <li> <p><strong>enp0s8</strong> being the <em>downstream</em> interface which will server the PXE clients</p> </li> </ul> <p>Create a new <strong>firewalld</strong> <strong><em>zone</em></strong> which <strong>enp0s8</strong> will operate in:</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>firewall-cmd <span class="nt">--permanent</span> <span class="nt">--new-zone</span><span class="o">=</span>cobbler
firewall-cmd <span class="nt">--permanent</span> <span class="nt">--zone</span><span class="o">=</span>cobbler <span class="nt">--set-target</span><span class="o">=</span>DROP
firewall-cmd <span class="nt">--permanent</span> <span class="nt">--zone</span><span class="o">=</span>cobbler <span class="nt">--add-service</span><span class="o">=</span>ssh
firewall-cmd <span class="nt">--permanent</span> <span class="nt">--zone</span><span class="o">=</span>cobbler <span class="nt">--add-service</span><span class="o">=</span>tftp
firewall-cmd <span class="nt">--permanent</span> <span class="nt">--zone</span><span class="o">=</span>cobbler <span class="nt">--add-service</span><span class="o">=</span>http
firewall-cmd <span class="nt">--permanent</span> <span class="nt">--zone</span><span class="o">=</span>cobbler <span class="nt">--add-service</span><span class="o">=</span>https
firewall-cmd <span class="nt">--reload</span>
</code></pre></div></div> <blockquote> <p>Linux ISC DHCP server opens a raw UDP socket with the Linux kernel, bypassing the firewalld rules, so it is not necessary to allow the service/port. Be sure the resulting <code class="language-plaintext highlighter-rouge">/etc/dhcp/dhcpd.conf</code> file is only configured for the desired interface(s) for hosting DHCP.</p> <ul> <li><a href="https://serverfault.com/questions/191390/iptables-and-dhcp-questions/">serverfault</a> &amp; <a href="https://unix.stackexchange.com/questions/447440/ufw-iptables-not-blocking-dhcp-udp-port-67">stackexchange</a> sources.</li> </ul> </blockquote> <p>Reconfigure <strong>enp0s8</strong> to operate in the <strong>new firewalld zone</strong></p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>nmcli con mod enp0s8 connection.zone cobbler
</code></pre></div></div> <blockquote> <p>As defined above, this firewall zone will NOT permit inbound ICMP traffic like ping</p> </blockquote> <p>For simplicity, <strong>enp0s3</strong> can be left in the <strong>default firewalld zone</strong> (verify the current active zones with <code class="language-plaintext highlighter-rouge">firewall-cmd --get-active-zones</code>)</p> <h4 id="service-confinement">Service confinement</h4> <p>On the topic of network security, we should also restrict our Cobbler services to only listen on the PXE server interface.</p> <ul> <li>configure HTTP to only listen on the PXE server interface:</li> </ul> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sed</span> <span class="nt">-i</span> <span class="s1">'s,^Listen.*,Listen 10.0.0.10:80,'</span> /etc/httpd/conf/httpd.conf
</code></pre></div></div> <ul> <li>Create a local systemd service for tftpd, modified from the original config to only listen on a specific IP address:</li> </ul> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>systemctl stop tftp.service
systemctl stop tftp.socket

<span class="nb">cp</span> /lib/systemd/system/tftp.service /etc/systemd/system/.
<span class="nb">sed</span> <span class="s1">'s,ListenDatagram=69,ListenDatagram=10.0.0.10:69,'</span> /lib/systemd/system/tftp.socket | <span class="nb">tee</span> /etc/systemd/system/tftp.socket
</code></pre></div></div> <ul> <li>now, reload the systemd configuration and restart services</li> </ul> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>systemctl daemon-reload
systemctl restart tftp httpd
</code></pre></div></div> <blockquote> <p>Feel free to comment with additional security hardening measures you would employ.</p> </blockquote> <h2 id="tips--troubleshooting">Tips &amp; Troubleshooting</h2> <ol> <li> <p>Cobbler’s <a href="https://cobbler.readthedocs.io/en/v3.3.6/installation-guide.html#id2">official docs</a> advise that installing and running Cobbler in a virtual environment is not possible, but I have had no issues related to virtualization.</p> </li> <li> <p>Some dependencies are missing from the official <a href="https://cobbler.readthedocs.io/en/v3.3.6/installation-guide.html#packages">Cobbler docs</a>. Have a look at the <a href="https://github.com/cobbler/cobbler/blob/v3.3.6/docker/rpms/Fedora_34/Fedora34.dockerfile">dockerfile</a> located in cobbler’s source code for a more complete list.</p> </li> <li> <p>It’s always a good idea to manually install the desired distro (Fedora 34 or 37 Server in the case of this guide) to the desired hardware (VirtualBox VM in this case) before attempting a network installation, to validate compatability.</p> <ul> <li> <p>Any Fedora installation, whether installed manually or automatically, should always contain the file <code class="language-plaintext highlighter-rouge">/root/anaconda-ks.cfg</code>, which is the kickstart file used to install that particular system.</p> </li> <li> <p>Depending on your deployed system of choice (Fedora 34 or 37 Server here) if you are having issues, you may want to familiarize yourself with the installation system environment.</p> <ol> <li> <p>With most distributions, while the installer is progressing and outputing logs to the monitor (over TTY/GUI, not serial or IPMI session), you can press <strong>ALT+F2</strong> or <strong>ALT+F3</strong> or a similar key combo to access a privileged shell to troubleshoot.</p> </li> <li> <p>some commands you may want to try on the installer system include:</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code> dmesg
 <span class="nb">cat</span> /proc/cmdline
 less /var/log/syslog
 mount
 <span class="nb">ls</span> <span class="nt">-la</span>
 <span class="nb">ls</span> <span class="nt">-la</span> /tmp
 <span class="nb">ls</span> <span class="nt">-la</span> /
 cpuinfo
 lsblk
 lsmod
 <span class="nb">uname</span> <span class="nt">-a</span>
 <span class="nb">cat</span> /etc/os-release
 lsb_release <span class="nt">-a</span>
 <span class="nb">echo</span> <span class="nv">$SHELL</span>
</code></pre></div> </div> </li> </ol> </li> </ul> </li> <li> <p>By default, Cobbler’s DHCP server attempts to detect the PXE client’s boot firmware type in order to provide a BIOS or UEFI compatible bootloader <em>(BIOS: “grub.0” - UEFI: “grubx64.efi”)</em>. If using <strong>BIOS firmware</strong> for the PXE client VM, the Cobbler server’s DHCP service may not provide the right bootloader.</p> <ol> <li> <p>manually set the bootloader for a Cobbler Profile or System with the following command (the <code class="language-plaintext highlighter-rouge">filename</code> value corresponds to the <code class="language-plaintext highlighter-rouge">filename</code> variable for the Cobbler System in the generated <code class="language-plaintext highlighter-rouge">dhcpd.conf</code> file, and is a local system path to the desired bootloader file relative to Cobbler’s tftp root directory: <code class="language-plaintext highlighter-rouge">/var/lib/tftpboot</code>):</p> <ul> <li><code class="language-plaintext highlighter-rouge">cobbler &lt;profile|system&gt; edit --name &lt;name&gt; --filename grub/grub.0</code></li> </ul> </li> <li> <p>The PXE client software that comes with VirtualBox VM <strong>BIOS &amp; EFI</strong> firmware <strong>DOES NOT</strong> support HTTP as a download protocol, so it may be best to leave iPXE disabled in <code class="language-plaintext highlighter-rouge">/etc/cobbler/settings.yaml</code></p> <ul> <li>HTTP can always be utilized if you boot the PXE client from CD using the latest <a href="https://boot.ipxe.org/ipxe.iso">ipxe.iso</a></li> </ul> </li> </ol> </li> <li> <p>The autoinstall template files “Fedora34.ks” “Fedora37.ks” &amp; “sample.ks” located in <code class="language-plaintext highlighter-rouge">/var/lib/cobbler/templates</code> are used to dynamically generate the specific kickstart files for either a Cobbler Profile or System at the time of installation</p> <ol> <li> <p>These templates use variables local to the Cobbler server to compose a specific configuration for the desired installation, but you can always craft an explicit kickstart file (without variables or snippets) manually and copy it to the same <code class="language-plaintext highlighter-rouge">/var/lib/cobbler/templates</code> directory and assign a Cobbler Profile or System to use that specific file with the command: <code class="language-plaintext highlighter-rouge">cobbler &lt;profile|system&gt; edit --name &lt;name&gt; --autoinstall &lt;file&gt;</code> <strong>just be sure to escape any dollar-signs ($) with back-slashes (\), otherwise they may be interpretted as variables by Cobbler</strong></p> </li> <li> <p>The final autoinstall files (<code class="language-plaintext highlighter-rouge">kickstart</code> for RHEL distros, <code class="language-plaintext highlighter-rouge">preseed</code> for Debian, <code class="language-plaintext highlighter-rouge">cloud-init</code> for Ubuntu, <code class="language-plaintext highlighter-rouge">autoyast</code> for OpenSUSE, <code class="language-plaintext highlighter-rouge">answerfile</code> for Windows as well as XCP-ng, although dissimilar schemas) are hosted over HTTP by Cobbler and, by default, assigned to a Cobbler System or Profile via the bootloader config (GRUB or pxelinux) under <code class="language-plaintext highlighter-rouge">/var/lib/tftpboot/grub/system</code> or <code class="language-plaintext highlighter-rouge">/var/lib/tftpboot/pxelinux.cfg</code> directories, or in <code class="language-plaintext highlighter-rouge">/var/lib/tftpboot/grub/x86_64_menu_items.cfg</code> file.</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code> curl http://localhost/cblr/svc/op/autoinstall/profile/Fedora34-x86_64
 curl http://localhost/cblr/svc/op/autoinstall/profile/Fedora37-x86_64
 curl http://localhost/cblr/svc/op/autoinstall/system/Fedora34
 curl http://localhost/cblr/svc/op/autoinstall/system/Fedora37
</code></pre></div> </div> </li> <li> <p>There are several template files and accompanying snippets that come default with Cobbler which you can look at if you have any questions about how the Cobbler templates <em>(Python Cheetah templates)</em> work. Located in <code class="language-plaintext highlighter-rouge">/var/lib/cobbler/templates</code> &amp; <code class="language-plaintext highlighter-rouge">/var/lib/cobbler/snippets</code></p> </li> </ol> </li> <li> <p>Optionally, remove the deprecated <strong><em>“tree”</em></strong> option from the Cobbler Distro <code class="language-plaintext highlighter-rouge">kernel-options</code> which can be used in the kickstart file instead. This option will be ignored anyway by the installer.</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code> cobbler distro edit <span class="nt">--name</span> Fedora34-x86_64 <span class="nt">--kernel-options</span>
</code></pre></div> </div> <ul> <li>cobbler still appropriately sets the “inst.repo” kernel-option in the GRUB or PXE kernel-options. This is likey managed by the Cobbler Profile’s <strong><em>“tree”</em></strong> variable <em>(seen with <code class="language-plaintext highlighter-rouge">cobbler profile report</code> above)</em> or the Profile’s config file in <code class="language-plaintext highlighter-rouge">/var/www/cobbler/distro_mirror/config</code> directory</li> </ul> </li> </ol> <p><strong>here are some helpful troubleshooting commands on the Cobbler server</strong></p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>man cobbler
man dhcpd
man tftp
man httpd
man selinux
man firewalld

cobbler distro report
cobbler profile report
cobbler system report

cobbler <span class="nt">--help</span>
cobbler distro edit <span class="nt">--help</span>
cobbler profile edit <span class="nt">--help</span>
cobbler system edit <span class="nt">--help</span>

systemctl status cobblerd
systemctl status dhcpd
systemctl status tftp
systemctl status httpd

journalctl <span class="nt">-eu</span> cobblerd
journalctl <span class="nt">-eu</span> dhcpd
journalctl <span class="nt">-eu</span> tftp
journalctl <span class="nt">-eu</span> httpd

<span class="nb">ls</span> /etc/cobbler
<span class="nb">cat</span> /etc/cobbler/settings.yaml
<span class="nb">ls</span> /var/lib/cobbler
<span class="nb">ls</span> /var/www/cobbler
<span class="nb">ls</span> /var/lib/tftpboot/grub/system
<span class="nb">ls</span> /var/lib/tftpboot/pxelinux.cfg

<span class="nb">cat</span> /var/log/httpd/error_log
<span class="nb">cat</span> /var/log/audit/audit.log | <span class="nb">grep </span>AVC

<span class="nb">cat</span> /etc/dhcp/dhcpd.conf

<span class="nb">cat</span> /var/lib/tftpboot/grub/x86_64_menu_items.cfg
<span class="nb">cat</span> /var/lib/tftpboot/pxelinux.cfg/default

tftp 10.0.0.10
tftp 127.0.0.1

<span class="nb">cat</span> /etc/httpd/conf/httpd.conf
<span class="nb">cat</span> /etc/httpd/conf.d/cobbler.conf
</code></pre></div></div>]]></content><author><name>Sus-Admin</name></author><category term="cobbler"/><summary type="html"><![CDATA[This guide is intended to accompany and extend the official Cobbler Installation and Quick Start guides.]]></summary></entry></feed>