<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.4">Jekyll</generator><link href="https://sus-admin.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://sus-admin.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2024-11-02T19:56:35+00:00</updated><id>https://sus-admin.github.io/feed.xml</id><title type="html">Shane Logan</title><subtitle>various detailed technical procedures. Based on [*folio](https://github.com/bogoli/-folio) design. </subtitle><entry><title type="html">Cobbler (v3.3.6) Ubuntu Deployment Guide</title><link href="https://sus-admin.github.io/blog/2024/Cobbler-3.3.6-Ubuntu-Deployment-Guide/" rel="alternate" type="text/html" title="Cobbler (v3.3.6) Ubuntu Deployment Guide"/><published>2024-11-02T00:00:00+00:00</published><updated>2024-11-02T00:00:00+00:00</updated><id>https://sus-admin.github.io/blog/2024/Cobbler-3.3.6-Ubuntu-Deployment-Guide</id><content type="html" xml:base="https://sus-admin.github.io/blog/2024/Cobbler-3.3.6-Ubuntu-Deployment-Guide/"><![CDATA[<p>This guide assumes that you have read the <a href="/_post/2024-10-16-Cobbler-3.3.6-Beginners-Guide.md">Cobbler 3.3.6 Beginner’s guide</a> and have a Fedora 34 server or workstation configured to run Cobbler v3.3.6 server as described in that guide.</p> <h2 class="no_toc" id="table-of-contents">Table of Contents</h2> <ol id="markdown-toc"> <li><a href="#objective" id="markdown-toc-objective">Objective</a> <ol> <li><a href="#caveats" id="markdown-toc-caveats">Caveats</a></li> </ol> </li> <li><a href="#cobbler-server-prep" id="markdown-toc-cobbler-server-prep">Cobbler Server Prep</a> <ol> <li><a href="#dependencies" id="markdown-toc-dependencies">Dependencies</a></li> </ol> </li> <li><a href="#ubuntu-2004-pxe-deployment" id="markdown-toc-ubuntu-2004-pxe-deployment">Ubuntu 20.04 PXE Deployment</a></li> <li><a href="#ubuntu-2204-pxe-deployment" id="markdown-toc-ubuntu-2204-pxe-deployment">Ubuntu 22.04 PXE Deployment</a></li> <li><a href="#ubuntu-2204-pxe-deployment-1" id="markdown-toc-ubuntu-2204-pxe-deployment-1">Ubuntu 22.04 PXE Deployment</a></li> <li><a href="#tips--troubleshooting" id="markdown-toc-tips--troubleshooting">Tips &amp; Troubleshooting</a></li> </ol> <h2 id="objective">Objective</h2> <p>Starting where the <a href="/_post/2024-10-16-Cobbler-3.3.6-Beginners-Guide.md">Beginner’s guide</a> left off, we will further configure the Cobbler v3.3.6 server to deploy the latest 3 releases of Ubuntu Server LTS <em>(Ubuntu 20.04, 22.04, 24.04)</em> via PXE network boot, using the same system and network environment. This guide assumes that you still have <code class="language-plaintext highlighter-rouge">selinux</code> and <code class="language-plaintext highlighter-rouge">firewalld</code> configured and enabled as described in the Beginner’s guide, but you may find it helpful to disable those services during initial testing of the new Debian deployments.</p> <h3 id="caveats">Caveats</h3> <ul> <li> <p>Until the release of Ubuntu 20.04, Canonical used the same <a href="/_posts/2024-10-29-Cobbler-3.3.6-Debian-Deployment-Guide.md"><code class="language-plaintext highlighter-rouge">debian-installer</code></a> from Debian, including the “preseed” autoinstallation model; starting with Ubuntu 20.04, Canonical switched to using their <a href="https://github.com/canonical/cloud-init">in-house</a> <a href="https://cloud-init.io/"><code class="language-plaintext highlighter-rouge">cloud-init</code></a> solution.</p> <ul> <li> <p>Ubuntu offered compatability/support with the “preseed” autoinstallation model in the <a href="https://cdimage.ubuntu.com/ubuntu-legacy-server/releases/20.04/release/">Ubuntu 20.04 Legacy</a> release.</p> </li> <li> <p>This guide only provides procedures for deploying Ubuntu systems using <code class="language-plaintext highlighter-rouge">cloud-init</code>.</p> </li> </ul> </li> </ul> <h2 id="cobbler-server-prep">Cobbler Server Prep</h2> <p>Cobbler v3.3.6 does not come with a sample template for the <code class="language-plaintext highlighter-rouge">cloud-init</code> autoinstall files, so create that before getting started, as well as some Cobbler sync-triggers to correct the bootloader configurations which Cobbler has not updated to support the <code class="language-plaintext highlighter-rouge">cloud-init</code> model.</p> <h3 id="dependencies">Dependencies</h3> <p>Create <code class="language-plaintext highlighter-rouge">cloud-init</code> autoinstall template with the following contents and save it to <code class="language-plaintext highlighter-rouge">/var/lib/cobbler/templates/cloud-init_user-data</code>:</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#cloud-config</span>
autoinstall:
  version: 1
  apt:
    <span class="c"># even set to no/false, geoip lookup still happens</span>
    <span class="c">#geoip: no</span>
    preserve_sources_list: <span class="nb">true
    </span>primary:
    - arches: <span class="o">[</span>amd64, i386]
      uri: http://<span class="nv">$http_server</span>/cblr/links/<span class="nv">$distro</span>
<span class="c">#      uri: http://us.archive.ubuntu.com/ubuntu</span>
    - arches: <span class="o">[</span>default]
<span class="c">#      uri: http://$http_server/cblr/links/$distro</span>
      uri: http://ports.ubuntu.com/ubuntu-ports
    fallback: offline-install
  identity:
<span class="nv">$SNIPPET</span><span class="o">(</span><span class="s1">'cloud-init_hostname'</span><span class="o">)</span>
    password: <span class="nv">$default_password_crypted</span>
    realname: ubuntu
    username: ubuntu
  kernel:
    package: linux-generic
  keyboard:
    layout: us
    toggle: null
    variant: <span class="s1">''</span>
  locale: en_US.UTF-8
<span class="nv">$SNIPPET</span><span class="o">(</span><span class="s1">'cloud-init_network'</span><span class="o">)</span>
  ssh:
    allow-pw: <span class="nb">true
    </span>install-server: <span class="nb">true
  </span>storage:
    layout:
      name: lvm
      sizing-policy: all
  package_update: <span class="nb">false
  </span>package_upgrade: <span class="nb">false
  </span>late-commands:
<span class="c">## Figure out if we're automating OS installation for a system or a profile</span>
<span class="c">#if $getVar('system_name','') != ''</span>
<span class="c">#set $what = "system"</span>
<span class="c">#else</span>
<span class="c">#set $what = "profile"</span>
<span class="c">#end if</span>
    - wget <span class="nt">-O</span> /target/tmp/autoinstall-user-data.yaml http://<span class="nv">$http_server</span>/cblr/svc/op/autoinstall/<span class="nv">$what</span>/<span class="nv">$name</span>
    - <span class="nb">chroot</span> /target /bin/bash <span class="nt">-s</span> ssh-keygen <span class="nt">-t</span> rsa <span class="nt">-b</span> 2048 <span class="nt">-m</span> ssh2 <span class="nt">-N</span> <span class="s2">""</span> <span class="nt">-f</span> /root/.ssh/id_rsa
<span class="c">#    - rm /target/etc/apt/apt.conf.d/99needrestart # This prompt will prevent the apt command from completing</span>
</code></pre></div></div> <blockquote> <p>the <code class="language-plaintext highlighter-rouge">fallback: offline</code> option under the apt configuration will use the live CD (.iso file) in its entirety to install Ubuntu even if there is an issue connecting to a remote repo mirror, and was only introduced as of <a href="https://discourse.ubuntu.com/t/jammy-jellyfish-release-notes/24668">Ubuntu 22.04 release</a>.</p> </blockquote> <p>The above autoinstall template calls for 2 Cobbler snippets, created them with the following contents, in the file system location noted above the code-block</p> <ul> <li><code class="language-plaintext highlighter-rouge">/var/lib/cobbler/snippets/cloud-init_hostname</code></li> </ul> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">## start of cobbler network_config generated code</span>
<span class="c">#if $getVar("system_name","") != ""</span>
    <span class="c">#if $hostname != ""</span>
    <span class="nb">hostname</span>: <span class="nv">$hostname</span>
    <span class="c">#else</span>
    <span class="c">#set $myhostname = $getVar('name','').replace("_","-")</span>
    <span class="nb">hostname</span>: <span class="nv">$myhostname</span>
    <span class="c">#end if</span>
<span class="c">#else</span>
<span class="c">## profile based install so just provide one interface for starters</span>
<span class="c">#set $myhostname = $getVar('hostname',$getVar('name','cobbler')).replace("_","-")</span>
    <span class="nb">hostname</span>: <span class="nv">$myhostname</span>
<span class="c">#end if</span>
</code></pre></div></div> <ul> <li><code class="language-plaintext highlighter-rouge">/var/lib/cobbler/snippets/cloud-init_network</code></li> </ul> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">## start of cobbler network_config generated code</span>
<span class="c">#if $getVar("system_name","") != ""</span>
  network:
    ethernets:
    <span class="c">#set ikeys = $interfaces.keys()</span>
    <span class="c">#import re</span>
    <span class="c">#for $iname in $ikeys</span>
        <span class="c">#set $idata = $interfaces[$iname]</span>
        <span class="c">## Ignore BMC interface</span>
        <span class="c">#if $idata["interface_type"].lower() == "bmc"</span>
            <span class="c">#continue</span>
        <span class="c">#end if</span>
    <span class="c">#end for</span>
    <span class="c">#for $iname in $ikeys</span>
        <span class="c">#set $idata    = $interfaces[$iname]</span>
        <span class="c">#set $mac      = $idata["mac_address"]</span>
        <span class="c">#set $static   = $idata["static"]</span>
        <span class="c">#set $ip       = $idata["ip_address"]</span>
        <span class="c">#set $netmask  = $idata["netmask"]</span>
        <span class="c">#set $type     = $idata["interface_type"]</span>
        <span class="c">## Ignore BMC interface</span>
        <span class="c">#if $type == "bmc"</span>
            <span class="c">#continue</span>
        <span class="c">#end if</span>
        <span class="c">#if $iname != "default":</span>
            <span class="c">#if $mac != "":</span>
      <span class="nv">$iname</span>:
        match:
          macaddress: <span class="nv">$mac</span>
                <span class="c">#if $static == True:</span>
                    <span class="c">#if $ip != "":</span>
                        <span class="c">#if $netmask != "":</span>
                            <span class="c">#set $mask = sum([bin(int(x)).count('1') for x in $netmask.split('.')])</span>
        dhcp4: <span class="nb">false
        </span>addresses:
          - <span class="nv">$ip</span>/<span class="nv">$mask</span>
                        <span class="c">#else</span>
        dhcp4: <span class="nb">false
        </span>addresses:
          - <span class="nv">$ip</span>/24
                        <span class="c">#end if</span>
                    <span class="c">#end if</span>
                    <span class="c">#if $gateway != "":</span>
        gateway4: <span class="nv">$gateway</span>
                    <span class="c">#end if</span>
                    <span class="c">#if $name_servers and $name_servers[0] != "":</span>
        nameservers:
          addresses:
                        <span class="c">#for $dns in $name_servers</span>
            - <span class="nv">$dns</span>
                        <span class="c">#end for</span>
                    <span class="c">#end if</span>
                <span class="c">#else</span>
        dhcp4: <span class="nb">true</span>
                <span class="c">#end if</span>
            <span class="c">#else</span>
      <span class="nv">$iname</span>:
                <span class="c">#if $static == True:</span>
                    <span class="c">#if $ip != "":</span>
                        <span class="c">#if $netmask != "":</span>
                            <span class="c">#set $mask = sum([bin(int(x)).count('1') for x in $netmask.split('.')])</span>
        dhcp4: <span class="nb">false
        </span>addresses:
          - <span class="nv">$ip</span>/<span class="nv">$mask</span>
                        <span class="c">#else</span>
        dhcp4: <span class="nb">false
        </span>addresses:
          - <span class="nv">$ip</span>/24
                        <span class="c">#end if</span>
                    <span class="c">#end if</span>
                    <span class="c">#if $gateway != "":</span>
        gateway4: <span class="nv">$gateway</span>
                    <span class="c">#end if</span>
                    <span class="c">#if $name_servers and $name_servers[0] != "":</span>
        nameservers:
          addresses:
                        <span class="c">#for $dns in $name_servers</span>
            - <span class="nv">$dns</span>
                        <span class="c">#end for</span>
                    <span class="c">#end if</span>
                <span class="c">#else</span>
        dhcp4: <span class="nb">true</span>
                <span class="c">#end if</span>
            <span class="c">#end if</span>
        <span class="c">#else</span>
            <span class="c">#if $mac != "":</span>
      <span class="nv">$iname</span>:
        match:
          macaddress: <span class="nv">$mac</span>
                <span class="c">#if $static == True:</span>
                    <span class="c">#if $ip != "":</span>
                        <span class="c">#if $netmask != "":</span>
                            <span class="c">#set $mask = sum([bin(int(x)).count('1') for x in $netmask.split('.')])</span>
        dhcp4: <span class="nb">false
        </span>addresses:
          - <span class="nv">$ip</span>/<span class="nv">$mask</span>
                        <span class="c">#else</span>
        dhcp4: <span class="nb">false
        </span>addresses:
          - <span class="nv">$ip</span>/24
                        <span class="c">#end if</span>
                    <span class="c">#end if</span>
                    <span class="c">#if $gateway != "":</span>
        gateway4: <span class="nv">$gateway</span>
                    <span class="c">#end if</span>
                    <span class="c">#if $name_servers and $name_servers[0] != "":</span>
        nameservers:
          addresses:
                        <span class="c">#for $dns in $name_servers</span>
            - <span class="nv">$dns</span>
                        <span class="c">#end for</span>
                    <span class="c">#end if</span>
                <span class="c">#else</span>
        dhcp4: <span class="nb">true</span>
                <span class="c">#end if</span>
            <span class="c">#else</span>
      <span class="nv">$iname</span>:
                <span class="c">#if $static == True:</span>
                    <span class="c">#if $ip != "":</span>
                        <span class="c">#if $netmask != "":</span>
                            <span class="c">#set $mask = sum([bin(int(x)).count('1') for x in $netmask.split('.')])</span>
        dhcp4: <span class="nb">false
        </span>addresses:
          - <span class="nv">$ip</span>/<span class="nv">$mask</span>
                        <span class="c">#else</span>
        dhcp4: <span class="nb">false
        </span>addresses:
          - <span class="nv">$ip</span>/24
                        <span class="c">#end if</span>
                    <span class="c">#end if</span>
                    <span class="c">#if $gateway != "":</span>
        gateway4: <span class="nv">$gateway</span>
                    <span class="c">#end if</span>
                    <span class="c">#if $name_servers and $name_servers[0] != "":</span>
        nameservers:
          addresses:
                        <span class="c">#for $dns in $name_servers</span>
            - <span class="nv">$dns</span>
                        <span class="c">#end for</span>
                    <span class="c">#end if</span>
                <span class="c">#else</span>
        dhcp4: <span class="nb">true</span>
                <span class="c">#end if</span>
            <span class="c">#end if</span>
        <span class="c">#end if</span>
    <span class="c">#end for</span>
    version: 2
<span class="c">#else</span>
<span class="c">## profile based install so use DHCP</span>
  network:
    ethernets: 
      eth0:
        dhcp4: <span class="nb">true
    </span>version: 2
<span class="c">#end if</span>
</code></pre></div></div> <blockquote> <p>This section should resemble the <a href="https://netplan.readthedocs.io/en/latest/netplan-yaml/"><code class="language-plaintext highlighter-rouge">netplan</code></a> network configuration standard to Ubuntu</p> </blockquote> <p>Create 2 Cobbler sync-triggers to correct the GRUB and PXELINUX boot configurations to support Ubuntu <code class="language-plaintext highlighter-rouge">cloud-init</code> installations, which will run each time the <code class="language-plaintext highlighter-rouge">cobbler sync</code> action is performed:</p> <ul> <li><code class="language-plaintext highlighter-rouge">/var/lib/cobbler/triggers/sync/post/fix-ubuntu-profiles-GRUB_PXE.sh</code></li> </ul> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#!/bin/bash </span>
<span class="k">for </span>PROFILE <span class="k">in</span> <span class="si">$(</span>cobbler profile list<span class="si">)</span><span class="p">;</span> <span class="k">do
    </span><span class="nv">DIST</span><span class="o">=</span><span class="si">$(</span>cobbler profile report <span class="nt">--name</span> <span class="nv">$PROFILE</span> | <span class="nb">grep</span> ^Distribution | <span class="nb">awk</span> <span class="o">{</span><span class="s1">' print $3 '</span><span class="o">}</span><span class="si">)</span><span class="p">;</span>
    <span class="nv">VER</span><span class="o">=</span><span class="si">$(</span>cobbler distro report <span class="nt">--name</span> <span class="nv">$DIST</span> | <span class="nb">grep</span> <span class="s2">"OS Version"</span> | <span class="nb">awk</span> <span class="o">{</span><span class="s1">' print $4 '</span><span class="o">}</span><span class="si">)</span><span class="p">;</span>
    <span class="o">[[</span> <span class="o">(</span><span class="nv">$VER</span> <span class="o">==</span> <span class="s2">"focal"</span> <span class="o">||</span> <span class="nv">$VER</span> <span class="o">==</span> <span class="s2">"jammy"</span> <span class="o">||</span> <span class="nv">$VER</span> <span class="o">==</span> <span class="s2">"noble"</span><span class="o">)</span> <span class="o">]]</span> <span class="o">||</span> <span class="k">continue</span><span class="p">;</span>
    <span class="nb">sed</span> <span class="nt">-i</span> <span class="s2">"s,auto-install/enable=true priority=critical netcfg/choose_interface=auto url=http://10.0.0.10/cblr/svc/op/autoinstall/profile/</span><span class="k">${</span><span class="nv">PROFILE</span><span class="k">}</span><span class="s2"> hostname=.* domain=local.lan suite=</span><span class="k">${</span><span class="nv">VER</span><span class="k">}</span><span class="s2">,,"</span> /var/lib/tftpboot/grub/x86_64_menu_items.cfg<span class="p">;</span>
    <span class="nb">sed</span> <span class="nt">-i</span> <span class="s2">"s,auto-install/enable=true priority=critical netcfg/choose_interface=auto url=http://10.0.0.10/cblr/svc/op/autoinstall/profile/</span><span class="k">${</span><span class="nv">PROFILE</span><span class="k">}</span><span class="s2"> hostname=.* domain=local.lan suite=</span><span class="k">${</span><span class="nv">VER</span><span class="k">}</span><span class="s2">,,"</span> /var/lib/tftpboot/pxelinux.cfg/default<span class="p">;</span>
    <span class="nv">DIST</span><span class="o">=</span><span class="s2">""</span> <span class="o">&amp;&amp;</span> <span class="nv">VER</span><span class="o">=</span><span class="s2">""</span><span class="p">;</span>
<span class="k">done</span>
</code></pre></div></div> <ul> <li><code class="language-plaintext highlighter-rouge">/var/lib/cobbler/triggers/sync/post/fix-ubuntu-systems-GRUB_PXE.sh</code></li> </ul> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#!/bin/bash </span>
<span class="k">for </span>SYSTEM <span class="k">in</span> <span class="si">$(</span>cobbler system list<span class="si">)</span><span class="p">;</span> <span class="k">do
    </span><span class="nv">PROFILE</span><span class="o">=</span><span class="si">$(</span>cobbler system report <span class="nt">--name</span> <span class="nv">$SYSTEM</span> | <span class="nb">grep</span> ^Profile | <span class="nb">awk</span> <span class="o">{</span><span class="s1">' print $3 '</span><span class="o">}</span><span class="si">)</span>
    <span class="nv">DIST</span><span class="o">=</span><span class="si">$(</span>cobbler profile report <span class="nt">--name</span> <span class="nv">$PROFILE</span> | <span class="nb">grep</span> ^Distribution | <span class="nb">awk</span> <span class="o">{</span><span class="s1">' print $3 '</span><span class="o">}</span><span class="si">)</span><span class="p">;</span>
    <span class="nv">VER</span><span class="o">=</span><span class="si">$(</span>cobbler distro report <span class="nt">--name</span> <span class="nv">$DIST</span> | <span class="nb">grep</span> <span class="s2">"OS Version"</span> | <span class="nb">awk</span> <span class="o">{</span><span class="s1">' print $4 '</span><span class="o">}</span><span class="si">)</span><span class="p">;</span>
    <span class="o">[[</span> <span class="o">(</span><span class="nv">$VER</span> <span class="o">==</span> <span class="s2">"focal"</span> <span class="o">||</span> <span class="nv">$VER</span> <span class="o">==</span> <span class="s2">"jammy"</span> <span class="o">||</span> <span class="nv">$VER</span> <span class="o">==</span> <span class="s2">"noble"</span><span class="o">)</span> <span class="o">]]</span> <span class="o">||</span> <span class="k">continue</span><span class="p">;</span>
    <span class="nv">MAC</span><span class="o">=</span><span class="si">$(</span>cobbler system report <span class="nt">--name</span> <span class="nv">$SYSTEM</span> | <span class="nb">grep</span> <span class="s2">"MAC Addr"</span> | <span class="nb">awk</span> <span class="o">{</span><span class="s1">' print $4 '</span><span class="o">}</span><span class="si">)</span>
    <span class="nb">sed</span> <span class="nt">-i</span> <span class="s2">"s,auto-install/enable=true priority=critical netcfg/choose_interface=auto url=http://10.0.0.10/cblr/svc/op/autoinstall/system/</span><span class="k">${</span><span class="nv">SYSTEM</span><span class="k">}</span><span class="s2"> hostname=.* domain=local.lan suite=</span><span class="k">${</span><span class="nv">VER</span><span class="k">}</span><span class="s2">,,"</span> /var/lib/tftpboot/grub/system/<span class="nv">$MAC</span><span class="p">;</span>
    <span class="nv">MAC</span><span class="o">=</span><span class="si">$(</span><span class="nb">echo</span> <span class="nv">$MAC</span> | <span class="nb">sed</span> <span class="s1">'s,:,-,g'</span><span class="si">)</span><span class="p">;</span>
    <span class="nb">sed</span> <span class="nt">-i</span> <span class="s2">"s,auto-install/enable=true priority=critical netcfg/choose_interface=auto url=http://10.0.0.10/cblr/svc/op/autoinstall/profile/</span><span class="k">${</span><span class="nv">PROFILE</span><span class="k">}</span><span class="s2"> hostname=.* domain=local.lan suite=</span><span class="k">${</span><span class="nv">VER</span><span class="k">}</span><span class="s2">,,"</span> /var/lib/tftpboot/pxelinux.cfg/01-<span class="nv">$MAC</span><span class="p">;</span>
	<span class="nv">PROFILE</span><span class="o">=</span><span class="s2">""</span> <span class="o">&amp;&amp;</span> <span class="nv">DIST</span><span class="o">=</span><span class="s2">""</span> <span class="o">&amp;&amp;</span> <span class="nv">VER</span><span class="o">=</span><span class="s2">""</span> <span class="o">&amp;&amp;</span> <span class="nv">MAC</span><span class="o">=</span><span class="s2">""</span><span class="p">;</span>
<span class="k">done</span>
</code></pre></div></div> <p>Modify the 2 above Cobbler sync-triggers so they may be executable:</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">chmod </span>u+x /var/lib/cobbler/triggers/sync/post/fix-ubuntu-profiles-GRUB_PXE.sh
<span class="nb">chmod </span>u+x /var/lib/cobbler/triggers/sync/post/fix-ubuntu-systems-GRUB_PXE.sh
</code></pre></div></div> <p>Download the latest 3 releases of Ubuntu Server LTS</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cd</span> ~/Downloads <span class="o">&amp;&amp;</span> wget https://releases.ubuntu.com/24.04/ubuntu-24.04.1-live-server-amd64.iso
<span class="nb">cd</span> ~/Downloads <span class="o">&amp;&amp;</span> wget https://releases.ubuntu.com/22.04/ubuntu-22.04.5-live-server-amd64.iso
<span class="nb">cd</span> ~/Downloads <span class="o">&amp;&amp;</span> wget https://releases.ubuntu.com/20.04/ubuntu-20.04.6-live-server-amd64.iso
</code></pre></div></div> <h2 id="ubuntu-2004-pxe-deployment">Ubuntu 20.04 PXE Deployment</h2> <p>Mount the Ubuntu 20.04 live server installer and import to Cobbler, then copy the installation media to the public HTTP share</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span> <span class="nt">-d</span> /mnt/Ubuntu] <span class="o">||</span> <span class="nb">mkdir</span> /mnt/Ubuntu
mount <span class="nt">-t</span> iso9660 <span class="nt">-o</span> loop,ro ~/Downloads/ubuntu-20.04.6-live-server-amd64.iso /mnt/Ubuntu
cobbler import <span class="nt">--name</span> Ubuntu20 <span class="nt">--path</span> /mnt/Ubuntu

<span class="nb">mkdir</span> <span class="nt">-p</span> /var/www/cobbler/pub/cloud-init/Ubuntu20
<span class="nb">cp</span> ~/Downloads/ubuntu-20.04.6-live-server-amd64.iso /var/www/cobbler/pub/cloud-init/Ubuntu20/.
</code></pre></div></div> <p>Edit the kernel options for the new Cobbler Distro to install Ubuntu automatically by default:</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>cobbler distro edit <span class="nt">--name</span> Ubuntu20-casper-x86_64 <span class="nt">--kernel-options</span> <span class="s1">'root=/dev/ram0 ramdisk_size=1500000 ip=dhcp url=http://10.0.0.10/cblr/pub/cloud-init/Ubuntu20/ubuntu-20.04.6-live-server-amd64.iso autoinstall cloud-config-url=http://10.0.0.10/cblr/svc/op/autoinstall/profile/Ubuntu20-casper-x86_64'</span>
</code></pre></div></div> <blockquote> <p>alternatively, use the following kernel-options to install Ubuntu MANUALLY via PXE network boot</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>cobbler distro edit <span class="nt">--name</span> Ubuntu20-casper-x86_64 <span class="nt">--kernel-options</span> <span class="s1">'root=/dev/ram0 ramdisk_size=1500000 ip=dhcp url=http://10.0.0.10/cblr/pub/cloud-init/Ubuntu20/ubuntu-20.04.6-live-server-amd64.iso cloud-config-url=/dev/null'</span>
</code></pre></div> </div> <p>More info on these configs in the <strong>Tips &amp; Troubleshooting</strong> section below.</p> </blockquote> <p>create a new autoinstall (<code class="language-plaintext highlighter-rouge">cloud-init</code>) template from the <code class="language-plaintext highlighter-rouge">cloud-init_user_data</code> file created above, and configure it as the autoinstallation template for the Ubuntu 20.04 Cobbler PROFILE</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sed</span> <span class="s1">':a;N;$!ba;s,      uri: http://\$http_server/cblr/links/\$distro\n#      uri: http://us.archive.ubuntu.com/ubuntu,#      uri: http://\$http_server/cblr/links/\$distro\n      uri: http://us.archive.ubuntu.com/ubuntu,'</span> /var/lib/cobbler/templates/cloud-init_user-data | <span class="nb">tee</span> /var/lib/cobbler/templates/Ubuntu20_cloud-init_user-data
cobbler profile edit <span class="nt">--name</span> Ubuntu20-casper-x86_64 <span class="nt">--autoinstall</span> Ubuntu20_cloud-init_user-data
</code></pre></div></div> <p>Create a new Cobbler System to install Ubuntu 20.04 automatically based on the system’s (PXE client’s) MAC address, replacing the <em>“aa:bb:cc:dd:ee:ff”</em> with the MAC address of your PXE client, and being sure not to use a duplicate MAC or IP addresse of any other Cobbler System as well as setting the kernel-options to match the Cobbler System’s name:</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">NAME</span><span class="o">=</span><span class="s2">"Ubuntu20-auto"</span> <span class="o">&amp;&amp;</span> cobbler system add <span class="nt">--name</span> <span class="nv">$NAME</span> <span class="nt">--profile</span> Ubuntu20-casper-x86_64 <span class="nt">--kernel-options</span> <span class="s2">"root=/dev/ram0 ramdisk_size=1500000 ip=dhcp url=http://10.0.0.10/cblr/pub/cloud-init/Ubuntu20/ubuntu-20.04.6-live-server-amd64.iso autoinstall cloud-config-url=http://10.0.0.10/cblr/svc/op/autoinstall/system/</span><span class="nv">$NAME</span><span class="s2">"</span> <span class="nt">--mac-address</span> <span class="s2">"aa:bb:cc:dd:ee:ff"</span> <span class="nt">--static</span> <span class="nb">true</span> <span class="nt">--ip-address</span> <span class="s2">"10.0.0.20"</span> <span class="nt">--netmask</span> <span class="s2">"255.255.255.0"</span> <span class="nt">--gateway</span> <span class="s2">"10.0.0.1"</span> <span class="nt">--name-servers</span> <span class="s2">"10.0.0.1 1.1.1.1 10.0.0.10"</span> <span class="nt">--hostname</span> <span class="s2">"Ubuntu20"</span> <span class="nt">--netboot-enabled</span> <span class="nb">true</span> <span class="o">&amp;&amp;</span> <span class="nv">NAME</span><span class="o">=</span><span class="s2">""</span>
</code></pre></div></div> <blockquote> <p>Alternatively, configure the Cobbler System kernel-options to run as a MANUAL installation:</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>cobbler system add <span class="nt">--name</span> Ubuntu20 <span class="nt">--profile</span> Ubuntu20-casper-x86_64 <span class="nt">--kernel-options</span> <span class="s1">'root=/dev/ram0 ramdisk_size=1500000 ip=dhcp url=http://10.0.0.10/cblr/pub/cloud-init/Ubuntu20/ubuntu-20.04.6-live-server-amd64.iso autoinstall cloud-config-url=/dev/null'</span> <span class="nt">--mac-address</span> <span class="s2">"aa:bb:cc:dd:ee:ff"</span>
</code></pre></div> </div> </blockquote> <p>Restart and sync up Cobbler</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>systemctl restart cobblerd <span class="o">&amp;&amp;</span> <span class="nb">sleep </span>10
cobbler <span class="nb">sync</span>
</code></pre></div></div> <p>The <strong>PXE Client</strong> VM can now be powered on, and should automatically boot to PXE and install Ubuntu 20.04 to the VM HDD using the “Ubuntu20_cloud-init_user-data” preseed template created above.</p> <h2 id="ubuntu-2204-pxe-deployment">Ubuntu 22.04 PXE Deployment</h2> <p>Take similar steps as above to import and automatically deploy Ubuntu 22.04 LTS Server over PXE, using the original <code class="language-plaintext highlighter-rouge">cloud-init_user-data</code> autoinstall template created above.</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span> <span class="nt">-d</span> /mnt/Ubuntu <span class="o">]</span> <span class="o">||</span> <span class="nb">mkdir</span> /mnt/Ubuntu
mount <span class="nt">-t</span> iso9660 <span class="nt">-o</span> loop,ro /home/fedora/Downloads/ubuntu-22.04.5-live-server-amd64.iso /mnt/Ubuntu
cobbler import <span class="nt">--name</span> Ubuntu22 <span class="nt">--path</span> /mnt/Ubuntu

<span class="nb">mkdir</span> <span class="nt">-p</span> /var/www/cobbler/pub/cloud-init/Ubuntu22
<span class="nb">cp</span> ~/Downloads/ubuntu-22.04.5-live-server-amd64.iso /var/www/cobbler/pub/cloud-init/Ubuntu22/.

cobbler distro edit <span class="nt">--name</span> Ubuntu22-casper-x86_64 <span class="nt">--kernel-options</span> <span class="s1">'root=/dev/ram0 ramdisk_size=1500000 ip=dhcp url=http://10.0.0.10/cblr/pub/cloud-init/Ubuntu22/ubuntu-22.04.5-live-server-amd64.iso autoinstall cloud-config-url=http://10.0.0.10/cblr/svc/op/autoinstall/profile/Ubuntu22-casper-x86_64'</span>

cobbler profile edit <span class="nt">--name</span> Ubuntu22-casper-x86_64 <span class="nt">--autoinstall</span> cloud-init_user-data

<span class="nv">NAME</span><span class="o">=</span><span class="s2">"Ubuntu22-auto"</span> <span class="o">&amp;&amp;</span> cobbler system add <span class="nt">--name</span> <span class="nv">$NAME</span> <span class="nt">--profile</span> Ubuntu22-casper-x86_64 <span class="nt">--kernel-options</span> <span class="s2">"root=/dev/ram0 ramdisk_size=1500000 ip=dhcp url=http://10.0.0.10/cblr/pub/cloud-init/Ubuntu22/ubuntu-22.04.5-live-server-amd64.iso autoinstall cloud-config-url=http://10.0.0.10/cblr/svc/op/autoinstall/system/</span><span class="nv">$NAME</span><span class="s2">"</span> <span class="nt">--mac-address</span> <span class="s2">"aa:bb:cc:dd:ee:ff"</span> <span class="nt">--static</span> <span class="nb">true</span> <span class="nt">--ip-address</span> <span class="s2">"10.0.0.22"</span> <span class="nt">--netmask</span> <span class="s2">"255.255.255.0"</span> <span class="nt">--gateway</span> <span class="s2">"10.0.0.1"</span> <span class="nt">--name-servers</span> <span class="s2">"10.0.0.1 1.1.1.1 10.0.0.10"</span> <span class="nt">--hostname</span> <span class="s2">"Ubuntu22"</span> <span class="nt">--netboot-enabled</span> <span class="nb">true</span> <span class="o">&amp;&amp;</span> <span class="nv">NAME</span><span class="o">=</span><span class="s2">""</span>

systemctl restart cobblerd <span class="o">&amp;&amp;</span> <span class="nb">sleep </span>10
cobbler <span class="nb">sync</span>
</code></pre></div></div> <h2 id="ubuntu-2204-pxe-deployment-1">Ubuntu 22.04 PXE Deployment</h2> <p>First, modify <code class="language-plaintext highlighter-rouge">/var/lib/cobbler/distro_signatures.json</code> to suppport Ubuntu 24.04 <em>(which is not included with Cobbler at the time of writing)</em> by pasting the following code block immediately following the Ubuntu 22 <code class="language-plaintext highlighter-rouge">jammy</code> signature definition:</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>      <span class="s2">"noble"</span>: <span class="o">{</span>
        <span class="s2">"signatures"</span>: <span class="o">[</span>
          <span class="s2">"dists"</span>,
          <span class="s2">".disk"</span>
        <span class="o">]</span>,
        <span class="s2">"version_file"</span>: <span class="s2">"Release|info"</span>,
        <span class="s2">"version_file_regex"</span>: <span class="s2">"Suite: noble|Ubuntu 24.04"</span>,
        <span class="s2">"kernel_arch"</span>: <span class="s2">"linux-headers-(.*)</span><span class="se">\\</span><span class="s2">.deb"</span>,
        <span class="s2">"kernel_arch_regex"</span>: null,
        <span class="s2">"supported_arches"</span>: <span class="o">[</span>
          <span class="s2">"i386"</span>,
          <span class="s2">"amd64"</span>
        <span class="o">]</span>,
        <span class="s2">"supported_repo_breeds"</span>: <span class="o">[</span>
          <span class="s2">"apt"</span>
        <span class="o">]</span>,
        <span class="s2">"kernel_file"</span>: <span class="s2">"(linux|vmlinuz(.*))"</span>,
        <span class="s2">"initrd_file"</span>: <span class="s2">"initrd(</span><span class="nv">$|</span><span class="s2">.gz</span><span class="nv">$|</span><span class="s2">.lz</span><span class="nv">$)</span><span class="s2">"</span>,
        <span class="s2">"isolinux_ok"</span>: <span class="nb">false</span>,
        <span class="s2">"default_autoinstall"</span>: <span class="s2">""</span>,
        <span class="s2">"kernel_options"</span>: <span class="s2">""</span>,
        <span class="s2">"kernel_options_post"</span>: <span class="s2">""</span>,
        <span class="s2">"template_files"</span>: <span class="s2">""</span>,
        <span class="s2">"boot_files"</span>: <span class="o">[]</span>,
        <span class="s2">"boot_loaders"</span>: <span class="o">{}</span>
      <span class="o">}</span>,
</code></pre></div></div> <blockquote> <p>With this modification made, be careful not to use the <code class="language-plaintext highlighter-rouge">cobbler signature update</code> command on the Cobbler server, which will remove any user-defined signatures.</p> </blockquote> <p>Sync up Cobbler in order to apply the changes</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>systemctl restart cobblerd <span class="o">&amp;&amp;</span> <span class="nb">sleep </span>10
cobbler <span class="nb">sync</span>
</code></pre></div></div> <p>Take similar steps as above to import and automatically deploy Ubuntu 24.04 LTS Server over PXE</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span> <span class="nt">-d</span> /mnt/Ubuntu <span class="o">]</span> <span class="o">||</span> <span class="nb">mkdir</span> /mnt/Ubuntu
mount <span class="nt">-t</span> iso9660 <span class="nt">-o</span> loop,ro /home/fedora/Downloads/ubuntu-24.04.1-live-server-amd64.iso /mnt/Ubuntu
cobbler import <span class="nt">--name</span> Ubuntu24 <span class="nt">--path</span> /mnt/Ubuntu

<span class="nb">mkdir</span> <span class="nt">-p</span> /var/www/cobbler/pub/cloud-init/Ubuntu24
<span class="nb">cp</span> ~/Downloads/ubuntu-24.04.1-live-server-amd64.iso /var/www/cobbler/pub/cloud-init/Ubuntu24/.

cobbler distro edit <span class="nt">--name</span> Ubuntu24-casper-x86_64 <span class="nt">--kernel-options</span> <span class="s1">'root=/dev/ram0 ramdisk_size=1500000 ip=dhcp url=http://10.0.0.10/cblr/pub/cloud-init/Ubuntu24/ubuntu-24.04.1-live-server-amd64.iso autoinstall cloud-config-url=http://10.0.0.10/cblr/svc/op/autoinstall/profile/Ubuntu24-casper-x86_64'</span>

cobbler profile edit <span class="nt">--name</span> Ubuntu24-casper-x86_64 <span class="nt">--autoinstall</span> cloud-init_user-data

<span class="nv">NAME</span><span class="o">=</span><span class="s2">"Ubuntu24-auto"</span> <span class="o">&amp;&amp;</span> cobbler system add <span class="nt">--name</span> <span class="nv">$NAME</span> <span class="nt">--profile</span> Ubuntu24-casper-x86_64 <span class="nt">--kernel-options</span> <span class="s2">"root=/dev/ram0 ramdisk_size=1500000 ip=dhcp url=http://10.0.0.10/cblr/pub/cloud-init/Ubuntu24/ubuntu-24.04.1-live-server-amd64.iso autoinstall cloud-config-url=http://10.0.0.10/cblr/svc/op/autoinstall/system/</span><span class="nv">$NAME</span><span class="s2">"</span> <span class="nt">--mac-address</span> <span class="s2">"aa:bb:cc:dd:ee:ff"</span> <span class="nt">--static</span> <span class="nb">true</span> <span class="nt">--ip-address</span> <span class="s2">"10.0.0.24"</span> <span class="nt">--netmask</span> <span class="s2">"255.255.255.0"</span> <span class="nt">--gateway</span> <span class="s2">"10.0.0.1"</span> <span class="nt">--name-servers</span> <span class="s2">"10.0.0.1 1.1.1.1 10.0.0.10"</span> <span class="nt">--hostname</span> <span class="s2">"Ubuntu24"</span> <span class="nt">--netboot-enabled</span> <span class="nb">true</span> <span class="o">&amp;&amp;</span> <span class="nv">NAME</span><span class="o">=</span><span class="s2">""</span>

systemctl restart cobblerd <span class="o">&amp;&amp;</span> <span class="nb">sleep </span>10
cobbler <span class="nb">sync</span>
</code></pre></div></div> <h2 id="tips--troubleshooting">Tips &amp; Troubleshooting</h2> <ol> <li> <p>The <a href="/_posts/2024-10-16-Cobbler-3.3.6-Beginners-Guide.md">Cobbler 3.3.6 Beginner’s Guide</a> <strong>Tips &amp; Troubleshooting</strong> section contains some basic recommendations and limitations of Cobbler which will not be repeated here.</p> </li> <li> <p>More info on <code class="language-plaintext highlighter-rouge">cloud-init</code></p> <ul> <li> <p><a href="https://cloudinit.readthedocs.io/en/22.1_a/topics/modules.html">https://cloudinit.readthedocs.io/en/22.1_a/topics/modules.html</a></p> </li> <li> <p><a href="https://canonical-subiquity.readthedocs-hosted.com/en/latest/reference/autoinstall-reference.html">https://canonical-subiquity.readthedocs-hosted.com/en/latest/reference/autoinstall-reference.html</a></p> <ul> <li><a href="https://canonical-subiquity.readthedocs-hosted.com/en/latest/reference/autoinstall-reference.html#fallback">https://canonical-subiquity.readthedocs-hosted.com/en/latest/reference/autoinstall-reference.html#fallback</a></li> </ul> </li> <li> <p><a href="https://canonical-subiquity.readthedocs-hosted.com/en/latest/tutorial/creating-autoinstall-configuration.html">https://canonical-subiquity.readthedocs-hosted.com/en/latest/tutorial/creating-autoinstall-configuration.html</a></p> </li> </ul> </li> <li> <p>The <code class="language-plaintext highlighter-rouge">kernel-options</code> used above were based off of Ubuntu’s official docs</p> <ul> <li> <p><a href="https://docs.cloud-init.io/en/latest/explanation/kernel-command-line.html#kernel-cloud-config-url-configuration">https://docs.cloud-init.io/en/latest/explanation/kernel-command-line.html#kernel-cloud-config-url-configuration</a></p> </li> <li> <p><a href="https://canonical-subiquity.readthedocs-hosted.com/en/latest/tutorial/providing-autoinstall.html">https://canonical-subiquity.readthedocs-hosted.com/en/latest/tutorial/providing-autoinstall.html</a></p> </li> </ul> </li> <li> <p>Additional references:</p> <ul> <li> <p><a href="https://github.com/cobbler/cobbler/issues/2339">https://github.com/cobbler/cobbler/issues/2339</a></p> </li> <li> <p><a href="https://askubuntu.com/questions/1235723/automated-20-04-server-installation-using-pxe-and-live-server-image">https://askubuntu.com/questions/1235723/automated-20-04-server-installation-using-pxe-and-live-server-image</a></p> </li> <li> <p><a href="https://github.com/cobbler/cobbler/issues/2697">https://github.com/cobbler/cobbler/issues/2697</a></p> </li> <li> <p><a href="https://louwrentius.com/understanding-the-ubuntu-2004-lts-server-autoinstaller.html">https://louwrentius.com/understanding-the-ubuntu-2004-lts-server-autoinstaller.html</a></p> </li> <li> <p><a href="https://cdimage.ubuntu.com/ubuntu-legacy-server/releases/20.04/release/">https://cdimage.ubuntu.com/ubuntu-legacy-server/releases/20.04/release/</a></p> </li> <li> <p><a href="http://archive.ubuntu.com/ubuntu/dists/focal/">http://archive.ubuntu.com/ubuntu/dists/focal/</a></p> </li> <li> <p><a href="https://cloudinit.readthedocs.io/en/latest/howto/disable_cloud_init.html">https://cloudinit.readthedocs.io/en/latest/howto/disable_cloud_init.html</a></p> </li> <li> <p><a href="https://vinfrastructure.it/2024/03/how-to-disable-cloud-init-on-ubuntu-server/">https://vinfrastructure.it/2024/03/how-to-disable-cloud-init-on-ubuntu-server/</a></p> </li> <li> <p><a href="https://maas.io/">https://maas.io/</a></p> </li> <li> <p><a href="https://documentation.ubuntu.com/server/how-to/installation/how-to-netboot-the-server-installer-on-amd64/">https://documentation.ubuntu.com/server/how-to/installation/how-to-netboot-the-server-installer-on-amd64/</a></p> </li> <li> <p><a href="https://discourse.ubuntu.com/t/netbooting-the-live-server-installer/14510">https://discourse.ubuntu.com/t/netbooting-the-live-server-installer/14510</a></p> </li> <li> <p><a href="https://releases.ubuntu.com/">https://releases.ubuntu.com/</a></p> </li> <li> <p><a href="https://ubuntu.com/download/server">https://ubuntu.com/download/server</a></p> </li> <li> <p><a href="https://github.com/cobbler/cobbler/issues/2339">https://github.com/cobbler/cobbler/issues/2339</a></p> </li> <li> <p><a href="https://askubuntu.com/questions/1235723/automated-20-04-server-installation-using-pxe-and-live-server-image/1235724">https://askubuntu.com/questions/1235723/automated-20-04-server-installation-using-pxe-and-live-server-image/1235724</a></p> </li> <li> <p><a href="https://discourse.ubuntu.com/t/ubuntu-22-04-pxe-uefi-netboot-desktop-installation/27841">https://discourse.ubuntu.com/t/ubuntu-22-04-pxe-uefi-netboot-desktop-installation/27841</a></p> </li> <li> <p><a href="https://askubuntu.com/questions/1406685/22-04-jammy-pxe-booting-help">https://askubuntu.com/questions/1406685/22-04-jammy-pxe-booting-help</a></p> </li> <li> <p><a href="https://www.molnar-peter.hu/en/ubuntu-jammy-netinstall-pxe.html">https://www.molnar-peter.hu/en/ubuntu-jammy-netinstall-pxe.html</a></p> </li> <li> <p><a href="https://cloudinit.readthedocs.io/en/latest/howto/run_cloud_init_locally.html">https://cloudinit.readthedocs.io/en/latest/howto/run_cloud_init_locally.html</a></p> </li> <li> <p>These all seem pretty legacy, no mention of recent releases or cloud-init</p> <ul> <li> <p><a href="https://ubuntu.com/server/docs/how-to-netboot-the-server-installer-on-amd64">https://ubuntu.com/server/docs/how-to-netboot-the-server-installer-on-amd64</a></p> </li> <li> <p><a href="https://cdimage.ubuntu.com/netboot/">https://cdimage.ubuntu.com/netboot/</a></p> </li> <li> <p><a href="https://help.ubuntu.com/community/Installation/Netboot">https://help.ubuntu.com/community/Installation/Netboot</a></p> </li> <li> <p><a href="https://help.ubuntu.com/community/Installation/LocalNet">https://help.ubuntu.com/community/Installation/LocalNet</a></p> </li> <li> <p><a href="https://cdimage.ubuntu.com/ubuntu-legacy-server/releases/20.04/release/">https://cdimage.ubuntu.com/ubuntu-legacy-server/releases/20.04/release/</a></p> </li> <li> <p><a href="https://help.ubuntu.com/community/Installation/MinimalCD">https://help.ubuntu.com/community/Installation/MinimalCD</a></p> </li> </ul> </li> </ul> </li> </ol>]]></content><author><name>Sus-Admin</name></author><category term="cobbler"/><summary type="html"><![CDATA[This guide assumes that you have read the Cobbler 3.3.6 Beginner’s guide and have a Fedora 34 server or workstation configured to run Cobbler v3.3.6 server as described in that guide.]]></summary></entry><entry><title type="html">Cobbler (v3.3.6) Debian Deployment Guide</title><link href="https://sus-admin.github.io/blog/2024/Cobbler-3.3.6-Debian-Deployment-Guide/" rel="alternate" type="text/html" title="Cobbler (v3.3.6) Debian Deployment Guide"/><published>2024-10-29T00:00:00+00:00</published><updated>2024-10-29T00:00:00+00:00</updated><id>https://sus-admin.github.io/blog/2024/Cobbler-3.3.6-Debian-Deployment-Guide</id><content type="html" xml:base="https://sus-admin.github.io/blog/2024/Cobbler-3.3.6-Debian-Deployment-Guide/"><![CDATA[<p>This guide assumes that you have read the <a href="/_post/2024-10-16-Cobbler-3.3.6-Beginners-Guide.md">Cobbler 3.3.6 Beginner’s guide</a> and have a Fedora 34 server or workstation configured to run Cobbler v3.3.6 server as described in that guide.</p> <h2 class="no_toc" id="table-of-contents">Table of Contents</h2> <ol id="markdown-toc"> <li><a href="#objective" id="markdown-toc-objective">Objective</a> <ol> <li><a href="#caveats" id="markdown-toc-caveats">Caveats</a></li> </ol> </li> <li><a href="#cobbler-server-prep" id="markdown-toc-cobbler-server-prep">Cobbler Server Prep</a> <ol> <li><a href="#dependencies" id="markdown-toc-dependencies">Dependencies</a></li> </ol> </li> <li><a href="#debian-12-bookworm-pxe-deployment" id="markdown-toc-debian-12-bookworm-pxe-deployment">Debian 12 Bookworm PXE Deployment</a></li> <li><a href="#debian-11-bullseye-pxe-deployment" id="markdown-toc-debian-11-bullseye-pxe-deployment">Debian 11 Bullseye PXE Deployment</a></li> <li><a href="#tips--troubleshooting" id="markdown-toc-tips--troubleshooting">Tips &amp; Troubleshooting</a></li> </ol> <h2 id="objective">Objective</h2> <p>Starting where the <a href="/_post/2024-10-16-Cobbler-3.3.6-Beginners-Guide.md">Beginner’s guide</a> left off, we will further configure the Cobbler v3.3.6 server to deploy the latest release of Debian 11 Bullseye and Debian 12 Bookworm via PXE network boot, using the same system and network environment. This guide assumes that you still have <code class="language-plaintext highlighter-rouge">selinux</code> and <code class="language-plaintext highlighter-rouge">firewalld</code> configured and enabled as described in the Beginner’s guide, but you may find it helpful to disable those services during initial testing of the new Debian deployments.</p> <h3 id="caveats">Caveats</h3> <ul> <li> <p>using the <code class="language-plaintext highlighter-rouge">cobbler check</code> CLI command on the Cobbler server, you should notice that it recommends installing the <strong>debmirror</strong> package in order to manage Debian deployments and repos with Cobbler. Instead, we will simply import the Debian source installation media (.iso file), which will become available over HTTP, and use that as the local repo mirror to install over the network.</p> <ul> <li>This method is not the Cobbler official method, and Debian actually <a href="https://www.debian.org/mirror/ftpmirror">recommends</a> using something like “apt-cacher-ng” or “squid proxy” instead of “debmirror”</li> </ul> </li> <li> <p>This guide provides a workaround to an issue that is encountered when installing Debian 11 &amp; 12 over the network from a local/private repo where the PXE client (<code class="language-plaintext highlighter-rouge">debian-installer</code>) does not trust the installation source.</p> <ul> <li>This appears to be a bug in the <code class="language-plaintext highlighter-rouge">debian-installer</code> (<code class="language-plaintext highlighter-rouge">d-i</code>); more info provided in the <strong>Tips &amp; Troubleshooting</strong> section below.</li> </ul> </li> </ul> <h2 id="cobbler-server-prep">Cobbler Server Prep</h2> <p>Debian maintainers advise that network booting Debian is <a href="https://www.debian.org/distrib/netinst#netboot">not for novice users</a>, and they’re not wrong, but we’re no amateurs.</p> <p>That said, continue at your own risk.</p> <h3 id="dependencies">Dependencies</h3> <p>Download the latest releases of Debian Bookworm and Bullseye</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cd</span> ~/Downloads <span class="o">&amp;&amp;</span> wget https://cdimage.debian.org/debian-cd/current/amd64/iso-dvd/debian-12.7.0-amd64-DVD-1.iso
<span class="nb">cd</span> ~/Downloads <span class="o">&amp;&amp;</span> wget https://cdimage.debian.org/mirror/cdimage/archive/11.11.0/amd64/iso-dvd/debian-11.11.0-amd64-DVD-1.iso
</code></pre></div></div> <p>Additionally, all Debian releases at the time of writing require the “netboot” initial ramdisk (<code class="language-plaintext highlighter-rouge">initrd</code>) provided separately by the Debian maintainers in order to properly boot over the network. Furthermore, Debian 11 Bullseye and earlier require the “netboot firmware” image, which is an extension to the netboot <code class="language-plaintext highlighter-rouge">initrd</code> image containing drivers for non-free firmware, also provided by Debian.</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>wget <span class="nt">-O</span> ~/Downloads/Debian12.7-netboot.gz https://ftp.debian.org/debian/dists/stable/main/installer-amd64/current/images/netboot/debian-installer/amd64/initrd.gz

wget <span class="nt">-O</span> ~/Downloads/Debian11.11-netboot.gz  https://ftp.debian.org/debian/dists/bullseye/main/installer-amd64/current/images/netboot/debian-installer/amd64/initrd.gz
wget <span class="nt">-O</span> ~/Downloads/Debian11.11-firmware.gz https://cdimage.debian.org/cdimage/firmware/bullseye/current/firmware.cpio.gz
</code></pre></div></div> <blockquote> <p>The netboot <code class="language-plaintext highlighter-rouge">initrd.gz</code> file above is not maintained in the same manner as the main Debian installation media; only the netboot <code class="language-plaintext highlighter-rouge">initrd.gz</code> image corresponding to the LATEST official release of Debian for any major version (bookworm, bullseye, etc…) will be available on the official <a href="https://ftp.debian.org/debian/dists/">FTP site</a> above, and not the cdimage <a href="https://cdimage.debian.org/debian-cd/current">repo</a> or <a href="https://cdimage.debian.org/cdimage/archive/">archive</a> where the .iso images are acquired from (the images CAN be found on the Debian repo <a href="https://snapshot.debian.org/archive/debian/">snapshot archive</a>, but you’ll have to correlate the date with the appropriate release).</p> <p>All previous releases of the netboot <code class="language-plaintext highlighter-rouge">firmware.cpio.gz</code> image ARE available on the official <a href="https://cdimage.debian.org/cdimage/firmware/bullseye/">cdimage archive</a> at the time of writing.</p> <p>Newer releases of the netboot <code class="language-plaintext highlighter-rouge">initrd.gz</code> and firmware images will not be compatible with previous releases of Debian, as they use different kernel and module versions.</p> </blockquote> <p>Create a GPG key to sign the local Debian repo mirror, and then export the public key to the public HTTP share on the Cobbler server and restore the SELinux labels.</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>gpg <span class="nt">--full-gen-key</span> <span class="nt">--batch</span> &lt;<span class="o">(</span><span class="nb">echo</span> <span class="s2">"Key-Type: 1"</span><span class="p">;</span> <span class="se">\</span>
                             <span class="nb">echo</span> <span class="s2">"Key-Length: 4096"</span><span class="p">;</span> <span class="se">\</span>
                             <span class="nb">echo</span> <span class="s2">"Subkey-Type: 1"</span><span class="p">;</span> <span class="se">\</span>
                             <span class="nb">echo</span> <span class="s2">"Subkey-Length: 4096"</span><span class="p">;</span> <span class="se">\</span>
                             <span class="nb">echo</span> <span class="s2">"Expire-Date: 0"</span><span class="p">;</span> <span class="se">\</span>
                             <span class="nb">echo</span> <span class="s2">"Name-Real: cobbler"</span><span class="p">;</span> <span class="se">\</span>
                             <span class="nb">echo</span> <span class="s2">"Name-Email: cobbler@fedora.local"</span><span class="p">;</span> <span class="se">\</span>
                             <span class="nb">echo</span> <span class="s2">"%no-protection"</span><span class="p">;</span> <span class="o">)</span>

gpg <span class="nt">--output</span> /var/www/cobbler/pub/cobbler.gpg.asc <span class="nt">--armor</span> <span class="nt">--export</span> cobbler
<span class="nb">sudo </span>restorecon <span class="nt">-R</span> /var/www/cobbler/pub
</code></pre></div></div> <blockquote> <p>for simplicity, this GPG key will not be password protected. This is against cyber-security best practices and should only be implemented in a test environment.</p> </blockquote> <h2 id="debian-12-bookworm-pxe-deployment">Debian 12 Bookworm PXE Deployment</h2> <p>mount the Debian 12 Bookworm installation media and import the distro into cobbler:</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span> <span class="nt">-e</span> /mnt/Debian <span class="o">]</span> <span class="o">||</span> <span class="nb">mkdir</span> /mnt/Debian
mount <span class="nt">-t</span> iso9660 <span class="nt">-o</span> loop,ro /home/fedora/Downloads/debian-12.7.0-amd64-DVD-1.iso /mnt/Debian
cobbler import <span class="nt">--name</span> Debian12.7 <span class="nt">--path</span> /mnt/Debian
</code></pre></div></div> <p>Navigate to the imported distro mirror and sign the repo:</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cd</span> /var/www/cobbler/distro_mirror/Debian12.7/dists/bookworm
gpg <span class="nt">-u</span> cobbler <span class="nt">-bao</span> Release.gpg Release
gpg <span class="nt">-u</span> cobbler <span class="nt">--clear-sign</span> <span class="nt">--output</span> InRelease Release
</code></pre></div></div> <p>Concatenate the two <code class="language-plaintext highlighter-rouge">initrd.gz</code> images in the following order, then configure the new Cobbler Distro to use the combined image:</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cat</span> /var/www/cobbler/distro_mirror/Debian12.7/install.amd/initrd.gz ~/Downloads/Debian12.7-netboot.gz <span class="o">&gt;</span> /var/www/cobbler/pub/Debian12.7-netboot.gz

cobbler distro edit <span class="nt">--name</span> Debian12.7-x86_64 <span class="nt">--initrd</span> <span class="s2">"/var/www/cobbler/pub/Debian12.7-netboot.gz"</span>
</code></pre></div></div> <p>Create a new “preseed” (autoinstall) template from the sample included with Cobbler, and make the necessary changes to install from an unofficial source.</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cp</span> /var/lib/cobbler/templates/sample.seed /var/lib/cobbler/templates/bookworm-sample.seed
<span class="nb">sed</span> <span class="nt">-i</span> <span class="s1">'s,# d-i debian-installer/allow_unauthenticated boolean true,d-i debian-installer/allow_unauthenticated boolean true,'</span> /var/lib/cobbler/templates/bookworm-sample.seed
<span class="nb">sed</span> <span class="nt">-i</span> <span class="s1">'s,# d-i apt-setup/local0/key string http://local.server/key,d-i apt-setup/local0/repository string http://$http_server$install_source_directory\nd-i apt-setup/local0/key string http://$http_server/cblr/pub/cobbler.gpg.asc,'</span> /var/lib/cobbler/templates/bookworm-sample.seed
</code></pre></div></div> <blockquote> <p>This is where the bug mentioned in the <strong>Caveats</strong> section above is introduced. The <code class="language-plaintext highlighter-rouge">apt-setup/local0/key</code> preseed value <em>should</em> allow us to provide the <code class="language-plaintext highlighter-rouge">debian-installer</code> with a GPG key to use to validate the installation source.</p> <p>Still confugre it to retrieve the key over HTTP anyway, just in case.</p> </blockquote> <p>Create a file named <code class="language-plaintext highlighter-rouge">preseed_early_workaround</code> in the <code class="language-plaintext highlighter-rouge">/var/lib/cobbler/scripts</code> directory with the following contents which will run on the PXE client to circumvent the bug mentioned in the <strong>Caveats</strong> section above:</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#!/bin/sh</span>
<span class="k">while </span><span class="nb">true</span><span class="p">;</span> <span class="k">do</span>
	<span class="o">[</span> <span class="nt">-d</span> /target/etc/apt/trusted.gpg.d <span class="o">]</span> <span class="o">&amp;&amp;</span> <span class="nb">cd</span> /target/etc/apt/trusted.gpg.d <span class="o">&amp;&amp;</span> fetch-url http://10.0.0.10/cblr/pub/cobbler.gpg.asc cobbler.gpg.asc <span class="o">&amp;&amp;</span> <span class="nb">exit</span><span class="p">;</span>
	<span class="nb">sleep </span>1<span class="p">;</span>
<span class="k">done </span>2&gt; /dev/null 1&gt; /dev/null &amp;
</code></pre></div></div> <p>Optionally, create another preseed script (<code class="language-plaintext highlighter-rouge">/var/lib/cobbler/scripts/preseed_late_sudo_sources</code>) to run in the post-installation stage which will grant sudo privileges to the “debian” user (created below) and reconfigure the installed system to use Debian’s official APT sources instead of our local Cobbler server.</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#!/bin/sh</span>
<span class="nb">sed</span> <span class="nt">-i</span> <span class="s1">'s,#PermitRootLogin prohibit-password,PermitRootLogin no,'</span> /etc/ssh/sshd_config
usermod <span class="nt">-aG</span> <span class="nb">sudo </span>debian
<span class="nb">sed</span> <span class="nt">-i</span> <span class="s1">'s,^,#,'</span> /etc/apt/sources.list
<span class="nb">echo</span> <span class="s1">'deb http://deb.debian.org/debian bookworm main non-free-firmware non-free contrib'</span> <span class="o">&gt;&gt;</span> /etc/apt/sources.list
<span class="nb">echo</span> <span class="s1">'deb-src http://deb.debian.org/debian bookworm main non-free-firmware non-free contrib'</span> <span class="o">&gt;&gt;</span> /etc/apt/sources.list
<span class="nb">echo</span> <span class="s1">'deb http://security.debian.org/debian-security bookworm-security main non-free-firmware non-free contrib'</span> <span class="o">&gt;&gt;</span> /etc/apt/sources.list
<span class="nb">echo</span> <span class="s1">'deb-src http://security.debian.org/debian-security bookworm-security main non-free-firmware non-free contrib'</span> <span class="o">&gt;&gt;</span> /etc/apt/sources.list
<span class="nb">echo</span> <span class="s1">'deb http://deb.debian.org/debian bookworm-updates main non-free-firmware non-free contrib'</span> <span class="o">&gt;&gt;</span> /etc/apt/sources.list
<span class="nb">echo</span> <span class="s1">'deb-src http://deb.debian.org/debian bookworm-updates main non-free-firmware non-free contrib'</span> <span class="o">&gt;&gt;</span> /etc/apt/sources.list
</code></pre></div></div> <p>Modify the new preseed (autoinstall) template to install desired packages only, setup an additional user “debian”, set the workaround script created above to run in the “early” installation stage, and the “preseed_late” script to run in the late stage, if configured, and more aggressively force the installation regardless of any existing installations.</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sed</span> <span class="nt">-i</span> <span class="s1">'s,ntp ssh wget,wget curl openssh-server sudo vim\npopularity-contest popularity-contest/participate boolean false,'</span> /var/lib/cobbler/templates/bookworm-sample.seed
<span class="nb">sed</span> <span class="nt">-i</span> <span class="s1">'s,# d-i apt-setup/services-select multiselect security,d-i apt-setup/services-select multiselect,'</span> /var/lib/cobbler/templates/bookworm-sample.seed
<span class="nb">sed</span> <span class="nt">-i</span> <span class="s1">'s,d-i partman-auto/method string lvm,d-i partman-efi/non_efi_system boolean true\nd-i partman-auto/method string lvm,'</span> /var/lib/cobbler/templates/bookworm-sample.seed
<span class="nb">sed</span> <span class="nt">-i</span> <span class="s1">'s,d-i grub-installer/bootdev string default,d-i grub-installer/bootdev string default\nd-i grub-installer/with_other_os boolean true\nd-i grub-installer/force-efi-extra-removable boolean false\nd-i grub-installer/enable_os_prober_otheros_yes boolean false\nd-i grub-installer/enable_os_prober_otheros_no boolean true,'</span> /var/lib/cobbler/templates/bookworm-sample.seed
<span class="nb">sed</span> <span class="nt">-i</span> <span class="s1">'s,d-i passwd/make-user boolean false,d-i passwd/make-user boolean true\nd-i passwd/user-fullname string Debian Admin\nd-i passwd/username string debian\nd-i passwd/user-password-crypted password $default_password_crypted,'</span> /var/lib/cobbler/templates/bookworm-sample.seed
<span class="nb">sed</span> <span class="nt">-i</span> <span class="s1">'s,script=preseed_early_default,script=preseed_early_workaround,'</span> /var/lib/cobbler/templates/bookworm-sample.seed
<span class="nb">sed</span> <span class="nt">-i</span> <span class="s1">'s,script=preseed_late_default,script=preseed_late_sudo_sources,'</span> /var/lib/cobbler/templates/bookworm-sample.seed
</code></pre></div></div> <p>Configure the Cobbler Profile to use the new autoinstall (preseed) template:</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>cobbler profile edit <span class="nt">--name</span> Debian12.7-x86_64 <span class="nt">--autoinstall</span> <span class="s1">'bookworm-sample.seed'</span>
</code></pre></div></div> <p>Create a new Cobbler System to PXE boot and automatically install Debian 12 Bookworm, replacing the <em>“aa:bb:cc:dd:ee:ff”</em> with the MAC address of your PXE client, being sure not to use a duplicate MAC or IP addresse of any other Cobbler System.</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>cobbler system add <span class="nt">--name</span> <span class="s2">"Debian12.7"</span> <span class="nt">--profile</span> Debian12.7-x86_64 <span class="nt">--hostname</span> <span class="s2">"debian12-7"</span> <span class="nt">--mac-address</span> <span class="s2">"aa:bb:cc:dd:ee:ff"</span> <span class="nt">--netboot-enabled</span> <span class="nb">true</span> <span class="nt">--ip-address</span> <span class="s2">"10.0.0.12"</span> <span class="nt">--netmask</span> <span class="s2">"255.255.255.0"</span> <span class="nt">--gateway</span> <span class="s2">"10.0.0.1"</span> <span class="nt">--name-servers</span> <span class="s2">"10.0.0.1 1.1.1.1 8.8.8.8"</span>
</code></pre></div></div> <p>Finally, restart and sync up Cobbler:</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>systemctl restart cobblerd <span class="o">&amp;&amp;</span> <span class="nb">sleep </span>10
cobbler <span class="nb">sync</span>
</code></pre></div></div> <p>The <strong>PXE Client</strong> VM can now be powered on, and should automatically boot to PXE and install Debian 12.7 to the VM HDD using the “bookworm-sample.seed” preseed template created above.</p> <h2 id="debian-11-bullseye-pxe-deployment">Debian 11 Bullseye PXE Deployment</h2> <p>Take similar steps as above, with the inclusion of the netboot “firmware” image file in the combined <code class="language-plaintext highlighter-rouge">initrd.gz</code> image file, and using the “bookworm-sample.seed” template created above as a starting point and trimming off a few unsupported preseed settings to import and automatically deploy Debian 11 Bullseye over PXE.</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span> <span class="nt">-e</span> /mnt/Debian <span class="o">]</span> <span class="o">||</span> <span class="nb">mkdir</span> /mnt/Debian
mount <span class="nt">-t</span> iso9660 <span class="nt">-o</span> loop,ro /home/fedora/Downloads/debian-11.11.0-amd64-DVD-1.iso /mnt/Debian
cobbler import <span class="nt">--name</span><span class="o">=</span>Debian11.11 <span class="nt">--path</span><span class="o">=</span>/mnt/Debian

<span class="nb">cd</span> /var/www/cobbler/distro_mirror/Debian11.11/dists/bullseye
gpg <span class="nt">-u</span> cobbler <span class="nt">-bao</span> Release.gpg Release
gpg <span class="nt">-u</span> cobbler <span class="nt">--clear-sign</span> <span class="nt">--output</span> InRelease Release

<span class="nb">cat</span> /var/www/cobbler/distro_mirror/Debian11.11/install.amd/initrd.gz ~/Downloads/Debian11.11-netboot.gz ~/Downloads/Debian11.11-firmware.gz <span class="o">&gt;</span> /var/www/cobbler/pub/Debian11.11-netboot.gz
cobbler distro edit <span class="nt">--name</span> Debian11.11-x86_64 <span class="nt">--initrd</span> <span class="s2">"/var/www/cobbler/pub/Debian11.11-netboot.gz"</span>

<span class="nb">grep</span> <span class="nt">-v</span> <span class="s2">"os_prober"</span> /var/lib/cobbler/templates/bookworm-sample.seed <span class="o">&gt;</span> /var/lib/cobbler/templates/bullseye-sample.seed
cobbler profile edit <span class="nt">--name</span> Debian11.11-x86_64 <span class="nt">--autoinstall</span> bullseye-sample.seed

cobbler system add <span class="nt">--name</span> Debian11.11 <span class="nt">--profile</span> Debian11.11-x86_64 <span class="nt">--mac-address</span> <span class="s2">"aa:bb:cc:dd:ee:ff"</span> <span class="nt">--netboot-enabled</span> <span class="nb">true

</span>systemctl restart cobblerd
<span class="nb">sleep </span>5
cobbler <span class="nb">sync</span>
</code></pre></div></div> <h2 id="tips--troubleshooting">Tips &amp; Troubleshooting</h2> <ol> <li> <p>The <a href="/_posts/2024-10-16-Cobbler-3.3.6-Beginners-Guide.md">Cobbler 3.3.6 Beginner’s Guide</a> <strong>Tips &amp; Troubleshooting</strong> section contains some basic recommendations and limitations of Cobbler which will not be repeated here.</p> </li> <li> <p>The <code class="language-plaintext highlighter-rouge">debian-installer</code> issue mentioned in the <strong>Caveats</strong> section above is primarily marked by a fatal error during the installation process and the log entry <code class="language-plaintext highlighter-rouge">GPG error</code> in <code class="language-plaintext highlighter-rouge">/var/log/syslog</code> on the installer system, or, if the workaround script was used, you can install the <code class="language-plaintext highlighter-rouge">debconf-utils</code> package on the resulting system and use the command <code class="language-plaintext highlighter-rouge">debconf-get-selections --installer | grep "Downloading"</code> for more info on the error.</p> <ul> <li> <p>The error prevents the installation from proceeding using the configured repo mirror, but the <code class="language-plaintext highlighter-rouge">debian-installer</code> remains running; press <strong>ALT+F2</strong> or <strong>ALT+F3</strong> on the PXE client keyboard to access a privileged shell to conduct some troubleshooting.</p> </li> <li> <p>The issue stems from the below section of the preseed file, retrieved drectly from Debian’s official <a href="https://www.debian.org/releases/stable/example-preseed.txt">stable</a> and <a href="https://www.debian.org/releases/bookworm/example-preseed.txt">bookworm</a> example preseed files.</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="c">### Apt setup</span>
  <span class="c"># Choose, if you want to scan additional installation media</span>
  <span class="c"># (default: false).</span>
  d-i apt-setup/cdrom/set-first boolean <span class="nb">false</span>
  <span class="c"># You can choose to install non-free firmware.</span>
  <span class="c">#d-i apt-setup/non-free-firmware boolean true</span>
  <span class="c"># You can choose to install non-free and contrib software.</span>
  <span class="c">#d-i apt-setup/non-free boolean true</span>
  <span class="c">#d-i apt-setup/contrib boolean true</span>
  <span class="c"># Uncomment the following line, if you don't want to have the sources.list</span>
  <span class="c"># entry for a DVD/BD installation image active in the installed system</span>
  <span class="c"># (entries for netinst or CD images will be disabled anyway, regardless of</span>
  <span class="c"># this setting).</span>
  <span class="c">#d-i apt-setup/disable-cdrom-entries boolean true</span>
  <span class="c"># Uncomment this if you don't want to use a network mirror.</span>
  <span class="c">#d-i apt-setup/use_mirror boolean false</span>
  <span class="c"># Select which update services to use; define the mirrors to be used.</span>
  <span class="c"># Values shown below are the normal defaults.</span>
  <span class="c">#d-i apt-setup/services-select multiselect security, updates</span>
  <span class="c">#d-i apt-setup/security_host string security.debian.org</span>
        
  <span class="c"># Additional repositories, local[0-9] available</span>
  <span class="c">#d-i apt-setup/local0/repository string \</span>
  <span class="c">#       http://local.server/debian stable main</span>
  <span class="c">#d-i apt-setup/local0/comment string local server</span>
  <span class="c"># Enable deb-src lines</span>
  <span class="c">#d-i apt-setup/local0/source boolean true</span>
  <span class="c"># URL to the public key of the local repository; you must provide a key or</span>
  <span class="c"># apt will complain about the unauthenticated repository and so the</span>
  <span class="c"># sources.list line will be left commented out.</span>
  <span class="c">#d-i apt-setup/local0/key string http://local.server/key</span>
  <span class="c"># or one can provide it in-line by base64 encoding the contents of the</span>
  <span class="c"># key file (with `base64 -w0`) and specifying it thus:</span>
  <span class="c">#d-i apt-setup/local0/key string base64://LS0tLS1CRUdJTiBQR1AgUFVCTElDIEtFWSBCTE9DSy0tLS0tCi4uLgo=</span>
  <span class="c"># The content of the key file is checked to see if it appears to be ASCII-armoured.</span>
  <span class="c"># If so it will be saved with an ".asc" extension, otherwise it gets a '.gpg' extension.</span>
  <span class="c"># "keybox database" format is currently not supported. (see generators/60local in apt-setup's source)</span>
        
  <span class="c"># By default the installer requires that repositories be authenticated</span>
  <span class="c"># using a known gpg key. This setting can be used to disable that</span>
  <span class="c"># authentication. Warning: Insecure, not recommended.</span>
  <span class="c">#d-i debian-installer/allow_unauthenticated boolean true</span>
</code></pre></div> </div> </li> <li> <p>As seen in the procdures above, <code class="language-plaintext highlighter-rouge">allow_unauthenticated</code> is set to true, which appears to only permit the installation to START when an untrusted repo mirror is found, but the mirror will be checked again before beginning the <code class="language-plaintext highlighter-rouge">apt-setup</code> phase, which <code class="language-plaintext highlighter-rouge">allow_unauthenticated</code> will not override.</p> <ul> <li> <p>This means that the <code class="language-plaintext highlighter-rouge">debian-installer</code> also requires the local APT mirror to be defined using the <code class="language-plaintext highlighter-rouge">d-i apt-setup/local0/repository</code> &amp; <code class="language-plaintext highlighter-rouge">d-i apt-setup/local0/key</code> preseed options in order for the PXE client to retrieve the public GPG key for the repo mirror and use it to validate the mirror, which seems to be configured properly through the preseed from Cobbler, verified with the following commands on the <code class="language-plaintext highlighter-rouge">debian-installer</code> system (and obviously can be done, since the workaround provided in this guide does essentially the same thing):</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  debconf-get apt-setup/local0/repository
  debconf-get apt-setup/local0/key
  less /var/lib/preseed/log
  <span class="nb">cat</span> /var/log/syslog | <span class="nb">grep</span> <span class="s2">"GPG error"</span>
  <span class="nb">cat</span> /var/lib/cdebconf/templates.dat | <span class="nb">grep </span>apt-setup
  <span class="nb">cat</span> /var/lib/cdebconf/questions.dat | <span class="nb">grep </span>apt-setup
</code></pre></div> </div> </li> <li> <p>Alternatively, the preseed comments note that you may provide the GPG key inline in the preseed file as a base64-encoded string with the format <code class="language-plaintext highlighter-rouge">d-i apt-setup/local0/key string base64://&lt;base64-encoded_key&gt;</code>, however I was not able to get this working either.</p> </li> </ul> </li> <li> <p>The snippet from Debian’s official preseed sample above mentions “see generators/60local in apt-setup’s source” and looking at some of that <a href="https://salsa.debian.org/installer-team/apt-setup/-/blob/master/generators/60local?ref_type=heads">source code</a>, I tried to model the workaround script as closely to the source code as possible, which is why <code class="language-plaintext highlighter-rouge">fetch-url</code> is used to download the GPG key, instead of <code class="language-plaintext highlighter-rouge">wget</code> or <code class="language-plaintext highlighter-rouge">curl</code>.</p> </li> <li> <p>This error consistenly occurs on Debian 11 &amp; 12 installations.</p> </li> </ul> </li> <li> <p>References</p> <ul> <li><a href="https://forums.debian.net/viewtopic.php?t=157991">https://forums.debian.net/viewtopic.php?t=157991</a></li> <li><a href="https://www.debian.org/distrib/netinst">https://www.debian.org/distrib/netinst</a></li> <li><a href="https://www.debian.org/distrib/netinst#netboot">https://www.debian.org/distrib/netinst#netboot</a> <ul> <li><a href="https://deb.debian.org/debian/dists/bookworm/main/installer-amd64/current/images/MANIFEST">https://deb.debian.org/debian/dists/bookworm/main/installer-amd64/current/images/MANIFEST</a></li> </ul> </li> <li><a href="https://wiki.debian.org/PXEBootInstall]">https://wiki.debian.org/PXEBootInstall</a></li> <li><a href="https://wiki.debian.org/DebianInstaller">https://wiki.debian.org/DebianInstaller</a> <ul> <li><a href="https://wiki.debian.org/DebianInstaller/NetbootFirmware">https://wiki.debian.org/DebianInstaller/NetbootFirmware</a></li> <li><a href="https://wiki.debian.org/DebianInstaller/Preseed">https://wiki.debian.org/DebianInstaller/Preseed</a></li> </ul> </li> <li><a href="https://wiki.debian.org/DebianInstaller/NetbootAssistant">https://wiki.debian.org/DebianInstaller/NetbootAssistant</a></li> <li><a href="https://www.debian.org/releases/stable/amd64/apbs03.en.html">https://www.debian.org/releases/stable/amd64/apbs03.en.html</a> <ul> <li><a href="https://www.debian.org/releases/bookworm/amd64/apbs03.en.html">https://www.debian.org/releases/bookworm/amd64/apbs03.en.html</a></li> </ul> </li> <li><a href="https://www.debian.org/releases/bookworm/amd64/ch06s03.en.html">https://www.debian.org/releases/bookworm/amd64/ch06s03.en.html</a></li> <li><a href="https://www.debian.org/releases/stable/amd64/ch05s04">https://www.debian.org/releases/stable/amd64/ch05s04</a></li> <li><a href="https://www.debian.org/releases/stable/amd64/ch04s05">https://www.debian.org/releases/stable/amd64/ch04s05</a> <ul> <li><a href="https://www.debian.org/releases/stable/amd64/ch04s02.en.html#where-files">https://www.debian.org/releases/stable/amd64/ch04s02.en.html#where-files</a></li> </ul> </li> <li><a href="https://wiki.debian.org/debconf">https://wiki.debian.org/debconf</a> <ul> <li><a href="https://packages.debian.org/bookworm/debconf-utils">https://packages.debian.org/bookworm/debconf-utils</a></li> </ul> </li> <li><a href="https://wiki.debian.org/AutomatedInstallation">https://wiki.debian.org/AutomatedInstallation</a> <ul> <li><a href="https://fai-project.org/FAIme/">https://fai-project.org/FAIme/</a></li> </ul> </li> <li><a href="https://www.debian.org/releases/stable/amd64/apbs04.en.html">https://www.debian.org/releases/stable/amd64/apbs04.en.html</a> <ul> <li><a href="ttps://www.debian.org/releases/bookworm/amd64/apbs04.en.html">https://www.debian.org/releases/bookworm/amd64/apbs04.en.html</a></li> <li><a href="https://www.debian.org/releases/bookworm/example-preseed.txt">https://www.debian.org/releases/bookworm/example-preseed.txt</a></li> <li><a href="https://www.debian.org/releases/bullseye/example-preseed.txt">https://www.debian.org/releases/bullseye/example-preseed.txt</a></li> <li><a href="https://www.debian.org/releases/stable/example-preseed.txt">https://www.debian.org/releases/stable/example-preseed.txt</a></li> <li><a href="https://preseed.debian.net/debian-preseed/bookworm/amd64-main-full.txt">https://preseed.debian.net/debian-preseed/bookworm/amd64-main-full.txt</a></li> </ul> </li> <li><a href="https://snapshot.debian.org/archive/debian/">https://snapshot.debian.org/archive/debian/</a></li> <li><a href="https://unix.stackexchange.com/questions/533539/switch-tabs-in-debian-installer-over-serial-console-with-putty">https://unix.stackexchange.com/questions/533539/switch-tabs-in-debian-installer-over-serial-console-with-putty</a></li> <li><a href="https://cobbler.github.io/blog/2024/06/30/libvirt-ipxe.html">https://cobbler.github.io/blog/2024/06/30/libvirt-ipxe.html</a></li> <li><a href="https://lists.debian.org/debian-boot/2016/07/msg00199.html">https://lists.debian.org/debian-boot/2016/07/msg00199.html</a></li> <li><a href="https://wiki.debian.org/MacBook#Debian_installation">https://wiki.debian.org/MacBook#Debian_installation</a></li> <li><a href="https://wiki.debian.org/DebianInstaller/ReleaseProcess">https://wiki.debian.org/DebianInstaller/ReleaseProcess</a></li> <li><a href="https://wiki.debian.org/DebianInstaller/Debconf11Summary">https://wiki.debian.org/DebianInstaller/Debconf11Summary</a></li> <li><a href="https://wiki.debian.org/Debian_Systems_Administration_for_non-Debian_SysAdmins?action=show&amp;redirect=Debian_SystemAdministration_for_non-Debian_SysAdmins">https://wiki.debian.org/Debian_Systems_Administration_for_non-Debian_SysAdmins?action=show&amp;redirect=Debian_SystemAdministration_for_non-Debian_SysAdmins</a></li> </ul> </li> </ol>]]></content><author><name>Sus-Admin</name></author><category term="cobbler"/><summary type="html"><![CDATA[This guide assumes that you have read the Cobbler 3.3.6 Beginner’s guide and have a Fedora 34 server or workstation configured to run Cobbler v3.3.6 server as described in that guide. Table of Contents Objective Caveats Cobbler Server Prep Dependencies Debian 12 Bookworm PXE Deployment Debian 11 Bullseye PXE Deployment Tips &amp; Troubleshooting Objective Starting where the Beginner’s guide left off, we will further configure the Cobbler v3.3.6 server to deploy the latest release of Debian 11 Bullseye and Debian 12 Bookworm via PXE network boot, using the same system and network environment. This guide assumes that you still have selinux and firewalld configured and enabled as described in the Beginner’s guide, but you may find it helpful to disable those services during initial testing of the new Debian deployments. Caveats using the cobbler check CLI command on the Cobbler server, you should notice that it recommends installing the debmirror package in order to manage Debian deployments and repos with Cobbler. Instead, we will simply import the Debian source installation media (.iso file), which will become available over HTTP, and use that as the local repo mirror to install over the network. This method is not the Cobbler official method, and Debian actually recommends using something like “apt-cacher-ng” or “squid proxy” instead of “debmirror” This guide provides a workaround to an issue that is encountered when installing Debian 11 &amp; 12 over the network from a local/private repo where the PXE client (debian-installer) does not trust the installation source. This appears to be a bug in the debian-installer (d-i); more info provided in the Tips &amp; Troubleshooting section below. Cobbler Server Prep Debian maintainers advise that network booting Debian is not for novice users, and they’re not wrong, but we’re no amateurs. That said, continue at your own risk. Dependencies Download the latest releases of Debian Bookworm and Bullseye cd ~/Downloads &amp;&amp; wget https://cdimage.debian.org/debian-cd/current/amd64/iso-dvd/debian-12.7.0-amd64-DVD-1.iso cd ~/Downloads &amp;&amp; wget https://cdimage.debian.org/mirror/cdimage/archive/11.11.0/amd64/iso-dvd/debian-11.11.0-amd64-DVD-1.iso Additionally, all Debian releases at the time of writing require the “netboot” initial ramdisk (initrd) provided separately by the Debian maintainers in order to properly boot over the network. Furthermore, Debian 11 Bullseye and earlier require the “netboot firmware” image, which is an extension to the netboot initrd image containing drivers for non-free firmware, also provided by Debian. wget -O ~/Downloads/Debian12.7-netboot.gz https://ftp.debian.org/debian/dists/stable/main/installer-amd64/current/images/netboot/debian-installer/amd64/initrd.gz wget -O ~/Downloads/Debian11.11-netboot.gz https://ftp.debian.org/debian/dists/bullseye/main/installer-amd64/current/images/netboot/debian-installer/amd64/initrd.gz wget -O ~/Downloads/Debian11.11-firmware.gz https://cdimage.debian.org/cdimage/firmware/bullseye/current/firmware.cpio.gz The netboot initrd.gz file above is not maintained in the same manner as the main Debian installation media; only the netboot initrd.gz image corresponding to the LATEST official release of Debian for any major version (bookworm, bullseye, etc…) will be available on the official FTP site above, and not the cdimage repo or archive where the .iso images are acquired from (the images CAN be found on the Debian repo snapshot archive, but you’ll have to correlate the date with the appropriate release). All previous releases of the netboot firmware.cpio.gz image ARE available on the official cdimage archive at the time of writing. Newer releases of the netboot initrd.gz and firmware images will not be compatible with previous releases of Debian, as they use different kernel and module versions. Create a GPG key to sign the local Debian repo mirror, and then export the public key to the public HTTP share on the Cobbler server and restore the SELinux labels. gpg --full-gen-key --batch &lt;(echo "Key-Type: 1"; \ echo "Key-Length: 4096"; \ echo "Subkey-Type: 1"; \ echo "Subkey-Length: 4096"; \ echo "Expire-Date: 0"; \ echo "Name-Real: cobbler"; \ echo "Name-Email: cobbler@fedora.local"; \ echo "%no-protection"; ) gpg --output /var/www/cobbler/pub/cobbler.gpg.asc --armor --export cobbler sudo restorecon -R /var/www/cobbler/pub for simplicity, this GPG key will not be password protected. This is against cyber-security best practices and should only be implemented in a test environment. Debian 12 Bookworm PXE Deployment mount the Debian 12 Bookworm installation media and import the distro into cobbler: [ -e /mnt/Debian ] || mkdir /mnt/Debian mount -t iso9660 -o loop,ro /home/fedora/Downloads/debian-12.7.0-amd64-DVD-1.iso /mnt/Debian cobbler import --name Debian12.7 --path /mnt/Debian Navigate to the imported distro mirror and sign the repo: cd /var/www/cobbler/distro_mirror/Debian12.7/dists/bookworm gpg -u cobbler -bao Release.gpg Release gpg -u cobbler --clear-sign --output InRelease Release Concatenate the two initrd.gz images in the following order, then configure the new Cobbler Distro to use the combined image: cat /var/www/cobbler/distro_mirror/Debian12.7/install.amd/initrd.gz ~/Downloads/Debian12.7-netboot.gz &gt; /var/www/cobbler/pub/Debian12.7-netboot.gz cobbler distro edit --name Debian12.7-x86_64 --initrd "/var/www/cobbler/pub/Debian12.7-netboot.gz" Create a new “preseed” (autoinstall) template from the sample included with Cobbler, and make the necessary changes to install from an unofficial source. cp /var/lib/cobbler/templates/sample.seed /var/lib/cobbler/templates/bookworm-sample.seed sed -i 's,# d-i debian-installer/allow_unauthenticated boolean true,d-i debian-installer/allow_unauthenticated boolean true,' /var/lib/cobbler/templates/bookworm-sample.seed sed -i 's,# d-i apt-setup/local0/key string http://local.server/key,d-i apt-setup/local0/repository string http://$http_server$install_source_directory\nd-i apt-setup/local0/key string http://$http_server/cblr/pub/cobbler.gpg.asc,' /var/lib/cobbler/templates/bookworm-sample.seed This is where the bug mentioned in the Caveats section above is introduced. The apt-setup/local0/key preseed value should allow us to provide the debian-installer with a GPG key to use to validate the installation source. Still confugre it to retrieve the key over HTTP anyway, just in case. Create a file named preseed_early_workaround in the /var/lib/cobbler/scripts directory with the following contents which will run on the PXE client to circumvent the bug mentioned in the Caveats section above: #!/bin/sh while true; do [ -d /target/etc/apt/trusted.gpg.d ] &amp;&amp; cd /target/etc/apt/trusted.gpg.d &amp;&amp; fetch-url http://10.0.0.10/cblr/pub/cobbler.gpg.asc cobbler.gpg.asc &amp;&amp; exit; sleep 1; done 2&gt; /dev/null 1&gt; /dev/null &amp; Optionally, create another preseed script (/var/lib/cobbler/scripts/preseed_late_sudo_sources) to run in the post-installation stage which will grant sudo privileges to the “debian” user (created below) and reconfigure the installed system to use Debian’s official APT sources instead of our local Cobbler server. #!/bin/sh sed -i 's,#PermitRootLogin prohibit-password,PermitRootLogin no,' /etc/ssh/sshd_config usermod -aG sudo debian sed -i 's,^,#,' /etc/apt/sources.list echo 'deb http://deb.debian.org/debian bookworm main non-free-firmware non-free contrib' &gt;&gt; /etc/apt/sources.list echo 'deb-src http://deb.debian.org/debian bookworm main non-free-firmware non-free contrib' &gt;&gt; /etc/apt/sources.list echo 'deb http://security.debian.org/debian-security bookworm-security main non-free-firmware non-free contrib' &gt;&gt; /etc/apt/sources.list echo 'deb-src http://security.debian.org/debian-security bookworm-security main non-free-firmware non-free contrib' &gt;&gt; /etc/apt/sources.list echo 'deb http://deb.debian.org/debian bookworm-updates main non-free-firmware non-free contrib' &gt;&gt; /etc/apt/sources.list echo 'deb-src http://deb.debian.org/debian bookworm-updates main non-free-firmware non-free contrib' &gt;&gt; /etc/apt/sources.list Modify the new preseed (autoinstall) template to install desired packages only, setup an additional user “debian”, set the workaround script created above to run in the “early” installation stage, and the “preseed_late” script to run in the late stage, if configured, and more aggressively force the installation regardless of any existing installations. sed -i 's,ntp ssh wget,wget curl openssh-server sudo vim\npopularity-contest popularity-contest/participate boolean false,' /var/lib/cobbler/templates/bookworm-sample.seed sed -i 's,# d-i apt-setup/services-select multiselect security,d-i apt-setup/services-select multiselect,' /var/lib/cobbler/templates/bookworm-sample.seed sed -i 's,d-i partman-auto/method string lvm,d-i partman-efi/non_efi_system boolean true\nd-i partman-auto/method string lvm,' /var/lib/cobbler/templates/bookworm-sample.seed sed -i 's,d-i grub-installer/bootdev string default,d-i grub-installer/bootdev string default\nd-i grub-installer/with_other_os boolean true\nd-i grub-installer/force-efi-extra-removable boolean false\nd-i grub-installer/enable_os_prober_otheros_yes boolean false\nd-i grub-installer/enable_os_prober_otheros_no boolean true,' /var/lib/cobbler/templates/bookworm-sample.seed sed -i 's,d-i passwd/make-user boolean false,d-i passwd/make-user boolean true\nd-i passwd/user-fullname string Debian Admin\nd-i passwd/username string debian\nd-i passwd/user-password-crypted password $default_password_crypted,' /var/lib/cobbler/templates/bookworm-sample.seed sed -i 's,script=preseed_early_default,script=preseed_early_workaround,' /var/lib/cobbler/templates/bookworm-sample.seed sed -i 's,script=preseed_late_default,script=preseed_late_sudo_sources,' /var/lib/cobbler/templates/bookworm-sample.seed Configure the Cobbler Profile to use the new autoinstall (preseed) template: cobbler profile edit --name Debian12.7-x86_64 --autoinstall 'bookworm-sample.seed' Create a new Cobbler System to PXE boot and automatically install Debian 12 Bookworm, replacing the “aa:bb:cc:dd:ee:ff” with the MAC address of your PXE client, being sure not to use a duplicate MAC or IP addresse of any other Cobbler System. cobbler system add --name "Debian12.7" --profile Debian12.7-x86_64 --hostname "debian12-7" --mac-address "aa:bb:cc:dd:ee:ff" --netboot-enabled true --ip-address "10.0.0.12" --netmask "255.255.255.0" --gateway "10.0.0.1" --name-servers "10.0.0.1 1.1.1.1 8.8.8.8" Finally, restart and sync up Cobbler: systemctl restart cobblerd &amp;&amp; sleep 10 cobbler sync The PXE Client VM can now be powered on, and should automatically boot to PXE and install Debian 12.7 to the VM HDD using the “bookworm-sample.seed” preseed template created above. Debian 11 Bullseye PXE Deployment Take similar steps as above, with the inclusion of the netboot “firmware” image file in the combined initrd.gz image file, and using the “bookworm-sample.seed” template created above as a starting point and trimming off a few unsupported preseed settings to import and automatically deploy Debian 11 Bullseye over PXE. [ -e /mnt/Debian ] || mkdir /mnt/Debian mount -t iso9660 -o loop,ro /home/fedora/Downloads/debian-11.11.0-amd64-DVD-1.iso /mnt/Debian cobbler import --name=Debian11.11 --path=/mnt/Debian cd /var/www/cobbler/distro_mirror/Debian11.11/dists/bullseye gpg -u cobbler -bao Release.gpg Release gpg -u cobbler --clear-sign --output InRelease Release cat /var/www/cobbler/distro_mirror/Debian11.11/install.amd/initrd.gz ~/Downloads/Debian11.11-netboot.gz ~/Downloads/Debian11.11-firmware.gz &gt; /var/www/cobbler/pub/Debian11.11-netboot.gz cobbler distro edit --name Debian11.11-x86_64 --initrd "/var/www/cobbler/pub/Debian11.11-netboot.gz" grep -v "os_prober" /var/lib/cobbler/templates/bookworm-sample.seed &gt; /var/lib/cobbler/templates/bullseye-sample.seed cobbler profile edit --name Debian11.11-x86_64 --autoinstall bullseye-sample.seed cobbler system add --name Debian11.11 --profile Debian11.11-x86_64 --mac-address "aa:bb:cc:dd:ee:ff" --netboot-enabled true systemctl restart cobblerd sleep 5 cobbler sync Tips &amp; Troubleshooting The Cobbler 3.3.6 Beginner’s Guide Tips &amp; Troubleshooting section contains some basic recommendations and limitations of Cobbler which will not be repeated here. The debian-installer issue mentioned in the Caveats section above is primarily marked by a fatal error during the installation process and the log entry GPG error in /var/log/syslog on the installer system, or, if the workaround script was used, you can install the debconf-utils package on the resulting system and use the command debconf-get-selections --installer | grep "Downloading" for more info on the error. The error prevents the installation from proceeding using the configured repo mirror, but the debian-installer remains running; press ALT+F2 or ALT+F3 on the PXE client keyboard to access a privileged shell to conduct some troubleshooting. The issue stems from the below section of the preseed file, retrieved drectly from Debian’s official stable and bookworm example preseed files. ### Apt setup # Choose, if you want to scan additional installation media # (default: false). d-i apt-setup/cdrom/set-first boolean false # You can choose to install non-free firmware. #d-i apt-setup/non-free-firmware boolean true # You can choose to install non-free and contrib software. #d-i apt-setup/non-free boolean true #d-i apt-setup/contrib boolean true # Uncomment the following line, if you don't want to have the sources.list # entry for a DVD/BD installation image active in the installed system # (entries for netinst or CD images will be disabled anyway, regardless of # this setting). #d-i apt-setup/disable-cdrom-entries boolean true # Uncomment this if you don't want to use a network mirror. #d-i apt-setup/use_mirror boolean false # Select which update services to use; define the mirrors to be used. # Values shown below are the normal defaults. #d-i apt-setup/services-select multiselect security, updates #d-i apt-setup/security_host string security.debian.org # Additional repositories, local[0-9] available #d-i apt-setup/local0/repository string \ # http://local.server/debian stable main #d-i apt-setup/local0/comment string local server # Enable deb-src lines #d-i apt-setup/local0/source boolean true # URL to the public key of the local repository; you must provide a key or # apt will complain about the unauthenticated repository and so the # sources.list line will be left commented out. #d-i apt-setup/local0/key string http://local.server/key # or one can provide it in-line by base64 encoding the contents of the # key file (with `base64 -w0`) and specifying it thus: #d-i apt-setup/local0/key string base64://LS0tLS1CRUdJTiBQR1AgUFVCTElDIEtFWSBCTE9DSy0tLS0tCi4uLgo= # The content of the key file is checked to see if it appears to be ASCII-armoured. # If so it will be saved with an ".asc" extension, otherwise it gets a '.gpg' extension. # "keybox database" format is currently not supported. (see generators/60local in apt-setup's source) # By default the installer requires that repositories be authenticated # using a known gpg key. This setting can be used to disable that # authentication. Warning: Insecure, not recommended. #d-i debian-installer/allow_unauthenticated boolean true As seen in the procdures above, allow_unauthenticated is set to true, which appears to only permit the installation to START when an untrusted repo mirror is found, but the mirror will be checked again before beginning the apt-setup phase, which allow_unauthenticated will not override. This means that the debian-installer also requires the local APT mirror to be defined using the d-i apt-setup/local0/repository &amp; d-i apt-setup/local0/key preseed options in order for the PXE client to retrieve the public GPG key for the repo mirror and use it to validate the mirror, which seems to be configured properly through the preseed from Cobbler, verified with the following commands on the debian-installer system (and obviously can be done, since the workaround provided in this guide does essentially the same thing): debconf-get apt-setup/local0/repository debconf-get apt-setup/local0/key less /var/lib/preseed/log cat /var/log/syslog | grep "GPG error" cat /var/lib/cdebconf/templates.dat | grep apt-setup cat /var/lib/cdebconf/questions.dat | grep apt-setup Alternatively, the preseed comments note that you may provide the GPG key inline in the preseed file as a base64-encoded string with the format d-i apt-setup/local0/key string base64://&lt;base64-encoded_key&gt;, however I was not able to get this working either. The snippet from Debian’s official preseed sample above mentions “see generators/60local in apt-setup’s source” and looking at some of that source code, I tried to model the workaround script as closely to the source code as possible, which is why fetch-url is used to download the GPG key, instead of wget or curl. This error consistenly occurs on Debian 11 &amp; 12 installations. References https://forums.debian.net/viewtopic.php?t=157991 https://www.debian.org/distrib/netinst https://www.debian.org/distrib/netinst#netboot https://deb.debian.org/debian/dists/bookworm/main/installer-amd64/current/images/MANIFEST https://wiki.debian.org/PXEBootInstall https://wiki.debian.org/DebianInstaller https://wiki.debian.org/DebianInstaller/NetbootFirmware https://wiki.debian.org/DebianInstaller/Preseed https://wiki.debian.org/DebianInstaller/NetbootAssistant https://www.debian.org/releases/stable/amd64/apbs03.en.html https://www.debian.org/releases/bookworm/amd64/apbs03.en.html https://www.debian.org/releases/bookworm/amd64/ch06s03.en.html https://www.debian.org/releases/stable/amd64/ch05s04 https://www.debian.org/releases/stable/amd64/ch04s05 https://www.debian.org/releases/stable/amd64/ch04s02.en.html#where-files https://wiki.debian.org/debconf https://packages.debian.org/bookworm/debconf-utils https://wiki.debian.org/AutomatedInstallation https://fai-project.org/FAIme/ https://www.debian.org/releases/stable/amd64/apbs04.en.html https://www.debian.org/releases/bookworm/amd64/apbs04.en.html https://www.debian.org/releases/bookworm/example-preseed.txt https://www.debian.org/releases/bullseye/example-preseed.txt https://www.debian.org/releases/stable/example-preseed.txt https://preseed.debian.net/debian-preseed/bookworm/amd64-main-full.txt https://snapshot.debian.org/archive/debian/ https://unix.stackexchange.com/questions/533539/switch-tabs-in-debian-installer-over-serial-console-with-putty https://cobbler.github.io/blog/2024/06/30/libvirt-ipxe.html https://lists.debian.org/debian-boot/2016/07/msg00199.html https://wiki.debian.org/MacBook#Debian_installation https://wiki.debian.org/DebianInstaller/ReleaseProcess https://wiki.debian.org/DebianInstaller/Debconf11Summary https://wiki.debian.org/Debian_Systems_Administration_for_non-Debian_SysAdmins?action=show&amp;redirect=Debian_SystemAdministration_for_non-Debian_SysAdmins]]></summary></entry><entry><title type="html">Cobbler 3.3.6 Beginner’s Guide</title><link href="https://sus-admin.github.io/blog/2024/Cobbler-3.3.6-Beginners-Guide/" rel="alternate" type="text/html" title="Cobbler 3.3.6 Beginner’s Guide"/><published>2024-10-16T00:00:00+00:00</published><updated>2024-10-16T00:00:00+00:00</updated><id>https://sus-admin.github.io/blog/2024/Cobbler-3.3.6-Beginners-Guide</id><content type="html" xml:base="https://sus-admin.github.io/blog/2024/Cobbler-3.3.6-Beginners-Guide/"><![CDATA[<p>This guide is intended to accompany and extend the official Cobbler <a href="https://cobbler.readthedocs.io/en/v3.3.6/installation-guide.html">Installation</a> and <a href="https://cobbler.readthedocs.io/en/v3.3.6/quickstart-guide.html">Quick Start</a> guides.</p> <p>Cobbler is an open-source, system deployment and provisioning software which can simplify and automate operating system installations over the network, as well as rudimentary configuration and patch management capabilities and some other features too. It is a modular solution for deploying systems via PXE, where you would normally have to setup and maintain your own DHCP, TFTP and HTTP servers to provide the full PXE boot+install functionality, Cobbler abstracts all (or some) of those services and manages them for you. Cobbler was initially developed at Red Had and is best suited to deploy Red Hat Linux flavors, like Fedora, but it is fairly capable of deploying just about anything, albeit sometimes requiring some advanced customizations.</p> <h2 class="no_toc" id="table-of-contents">Table of Contents</h2> <ol id="markdown-toc"> <li><a href="#objective" id="markdown-toc-objective">Objective</a></li> <li><a href="#environment" id="markdown-toc-environment">Environment</a></li> <li><a href="#fedora-server-basics" id="markdown-toc-fedora-server-basics">Fedora Server Basics</a> <ol> <li><a href="#updating" id="markdown-toc-updating">Updating</a></li> <li><a href="#customizing" id="markdown-toc-customizing">customizing</a></li> </ol> </li> <li><a href="#cobbler-basics" id="markdown-toc-cobbler-basics">Cobbler Basics</a> <ol> <li><a href="#dependencies" id="markdown-toc-dependencies">Dependencies</a></li> <li><a href="#installation" id="markdown-toc-installation">Installation</a></li> <li><a href="#configuration" id="markdown-toc-configuration">Configuration</a></li> </ol> </li> <li><a href="#fedora-34-pxe-deployment" id="markdown-toc-fedora-34-pxe-deployment">Fedora 34 PXE Deployment</a></li> <li><a href="#fedora-37-pxe-deployment" id="markdown-toc-fedora-37-pxe-deployment">Fedora 37 PXE Deployment</a></li> <li><a href="#security-hardening" id="markdown-toc-security-hardening">Security Hardening</a> <ol> <li><a href="#selinux" id="markdown-toc-selinux">SELinux</a> <ol> <li><a href="#enabling-selinux" id="markdown-toc-enabling-selinux">Enabling SELinux</a></li> <li><a href="#enforcing-selinux" id="markdown-toc-enforcing-selinux">Enforcing SELinux</a></li> <li><a href="#cobbler-selinux-config" id="markdown-toc-cobbler-selinux-config">Cobbler SELinux Config</a></li> </ol> </li> <li><a href="#network-security" id="markdown-toc-network-security">Network Security</a> <ol> <li><a href="#firewalld" id="markdown-toc-firewalld">Firewalld</a></li> <li><a href="#service-confinement" id="markdown-toc-service-confinement">Service confinement</a></li> </ol> </li> </ol> </li> <li><a href="#tips--troubleshooting" id="markdown-toc-tips--troubleshooting">Tips &amp; Troubleshooting</a></li> </ol> <h2 id="objective">Objective</h2> <p>Starting with a fresh installation of Fedora 34 Server (or Workstation - <a href="https://archives.fedoraproject.org/pub/archive/fedora/linux/releases/34/Server/x86_64/iso/">Fedora download archive</a>), this guide will detail preparing the system for Cobbler v3.3.6 installation from source, including prerequisite/dependency installations and network setup, and then provide all necessary steps to install and configure Cobbler to automatically provision another LAN host with Fedora 34 or 37 Server through PXE network boot.</p> <h2 id="environment">Environment</h2> <p>This guide assumes that both the <strong>Cobbler Server</strong> and <strong>PXE Clinet(s)</strong> are running as <strong>virtual machines (VMs)</strong> under the same <strong>Oracle VM VitualBox</strong> <em>(Windows 10)</em> host</p> <ul> <li> <p>The <strong>Cobbler server VM</strong> is configured with the following system specs:</p> <ul> <li> <p><strong>BIOS or UEFI firmware</strong></p> </li> <li> <p><strong>64 GB HDD</strong></p> </li> <li> <p><strong>4 GB RAM</strong></p> </li> <li> <p><strong>2 vCPUs</strong></p> </li> <li> <p><strong>2 virtual network adapters.</strong></p> <ol> <li> <p>VirtualBox VM <strong><em>Bridged Adapter</em></strong> connected to the primary physical NIC on the Windows host so that SSH to the Cobbler server will be more accessible.</p> </li> <li> <p>VirtualBox VM <strong><em>Internal Network</em></strong> adapter named <strong><em>“cobbler”</em></strong> which will have no external network connectivity (closed LAN; no internet access).</p> </li> </ol> </li> </ul> </li> <li> <p>The <strong>PXE client VM</strong> <em>(the target for network installations)</em> has the following specs:</p> <ul> <li> <p><strong>BIOS or UEFI firmware</strong> with the following boot order <em>(See</em> <strong><em>Tips &amp; Troubleshooting</em></strong> <em>section below for more info)</em>:</p> <ol> <li> <p>Hard Drive</p> </li> <li> <p>Network</p> </li> </ol> </li> <li> <p><strong>32 GB HDD</strong></p> </li> <li> <p><strong>4 GB RAM</strong></p> </li> <li> <p><strong>2 vCPUs</strong></p> </li> <li> <p><strong>1 virtual network adapter</strong> which is connected to the same <strong><em>“cobbler”</em></strong> VirtualBox adapter described above.</p> </li> </ul> </li> </ul> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <h3><b>Physical Network Diagram</b></h3> <figure> <picture> <img src="/assets/img/Cobbler-3.3.6-Beginners_Physical.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <div class="caption"> The Cobbler server and PXE client(s) are not shown here, as they are VMs, not physical workstations. </div> </div> <div class="col-sm mt-3 mt-md-0"> <h3><span style="float:right;"><b>Logical Network Diagram</b></span></h3> <figure> <picture> <img src="/assets/img/Cobbler-3.3.6-Beginners_Logical.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <div class="caption"> The VirtualBox host (my Windows 10 laptop) is only shown for completeness, it is not used in the procedures other than the VM settings described above. </div> </div> </div> <p><em>This exact configuration is not a strict requirement for deploying systems through Cobbler, but it proves that a PXE client is able to boot and install an operating system over the local network without public internet connectivity, using only the resources immediately available on the VM and the Cobbler server, aleviating a potential bandwidth bottleneck at the WAN.</em></p> <h2 id="fedora-server-basics">Fedora Server Basics</h2> <p>As stated above, this document outlines the procedures necessary to install and configure Cobbler v3.3.6 on a Fedora 34 host server for local network installations/provisioning through PXE. Additionally, necessary adjustments will be made for security through <strong>selinux</strong> and <strong>firewalld</strong> on the Cobbler server. As such, it is recommended to keep things simple and <strong>limit the number of additional applications installed</strong> to the Cobbler server to <strong>minimize unexpected firewall and selinux complications.</strong></p> <h3 id="updating">Updating</h3> <p>If Cobbler is to be installed on a Fedora 34 <em>Server</em> host, and automatic partitioning was used during initial OS installation, be sure to extend the LVM Logical Volme to a more usable capacity (recommended 95%):</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>lvextend /dev/mapper/fedora_<span class="nv">$HOSTNAME</span><span class="nt">-root</span> <span class="nt">-l</span>+95%FREE <span class="nt">-r</span>
</code></pre></div></div> <p>Update the Fedora 34 host with the latest YUM repo updates:</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>yum update
</code></pre></div></div> <p>Install <strong>VirtualBox VM Guest Additions</strong>, either from the YUM repos, or the Guest Adds. CD included with VirtualBox Manager <em>(YUM method is shown below, but VirtualBox usually recommends using the Guest Adds. CD)</em>:</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>yum <span class="nb">install </span>virtualbox-guest-additions
</code></pre></div></div> <h3 id="customizing">customizing</h3> <p>Install your preferred Linux sys admin tools and configure some convenient bash settings, for example <em>(PS1 variable controls bash shell prompt)</em>:</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>systemctl <span class="nb">enable</span> <span class="nt">--now</span> ssh
yum <span class="nb">install </span>neovim fzf tmux htop net-tools tftp
<span class="o">[</span> <span class="nt">-e</span> ~/.bash_profile <span class="o">]</span> <span class="o">&amp;&amp;</span> <span class="nb">echo</span> <span class="s1">'export PS1="\[\e[1;32m\][\u@\h \W]\$ \[\e[0m\]"'</span> | <span class="nb">tee</span> <span class="nt">-a</span> ~/.bash_profile <span class="o">||</span> <span class="nb">echo</span> <span class="s1">'export PS1="\[\e[1;32m\][\u@\h \W]\$ \[\e[0m\]"'</span> | <span class="nb">tee</span> <span class="nt">-a</span> ~/.bashrc
</code></pre></div></div> <p>SELinux and firewalld will be configured after Cobbler has been tested successfully, disable them for now.</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sed</span> <span class="nt">-i</span> <span class="nt">-E</span> <span class="s2">"s/SELINUX=(disabled|enforcing)/SELINUX=permissive/"</span> /etc/selinux/config
setenforce permissive
</code></pre></div></div> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>systemctl disable <span class="nt">--now</span> firewalld
</code></pre></div></div> <h2 id="cobbler-basics">Cobbler Basics</h2> <blockquote> <p>Now would be a good time to power off the Cobbler server to take a VM snapshot.</p> </blockquote> <h3 id="dependencies">Dependencies</h3> <p>Download the Fedora 34 &amp; 37 <strong>Server</strong> installation media (.iso files):</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span> <span class="nt">-d</span> ~/Downloads <span class="o">]</span> <span class="o">||</span> <span class="nb">mkdir</span> ~/Downloads
<span class="nb">cd</span> ~/Downloads <span class="o">&amp;&amp;</span> wget https://archives.fedoraproject.org/pub/archive/fedora/linux/releases/34/Server/x86_64/iso/Fedora-Server-dvd-x86_64-34-1.2.iso
<span class="nb">cd</span> ~/Downloads <span class="o">&amp;&amp;</span> wget https://archives.fedoraproject.org/pub/archive/fedora/linux/releases/37/Server/x86_64/iso/Fedora-Server-dvd-x86_64-37-1.7.iso
</code></pre></div></div> <p>Install dependencies for building and installing Cobbler from Source</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>yum <span class="nb">install </span>make git python3-devel python3-sphinx python3-coverage openssl httpd-devel
</code></pre></div></div> <blockquote> <p>Cobbler is also available through the YUM repos, using <code class="language-plaintext highlighter-rouge">yum install cobbler</code></p> </blockquote> <p>Download <strong>cobbler v3.3.6</strong> source code from the official GitHub repo</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>wget <span class="nt">-P</span>  ~/Downloads/. https://github.com/cobbler/cobbler/archive/refs/tags/v3.3.6.zip

<span class="nb">mkdir</span> <span class="nt">-p</span> /usr/src/cobbler
<span class="nb">cd</span> /usr/src/cobbler
unzip <span class="nt">-d</span> <span class="nb">.</span> ~/Downloads/v3.3.6
</code></pre></div></div> <p>Install the runtime dependencies and enable system services <em>(systemd will probably report some errors…)</em></p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>yum <span class="nb">install </span>httpd wget curl rsync dnf-plugins-core dosfstools createrepo_c xorriso python3-mod_wsgi python-cheetah python3-pyyaml python-netaddr python-librepo python-schema syslinux tftp-server dhcp-server pykickstart ipxe-bootimgs ipxe-roms koan mod_ssl python3-pyflakes python3-pycodestyle rpm-build python3-dns python3-file-magic python3-pymongo
systemctl <span class="nb">enable</span> <span class="nt">--now</span> httpd tftp dhcpd
</code></pre></div></div> <p>Install the GRUB bootloader and module packages so GRUB can be used as the network bootloader for PXE clients:</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>yum <span class="nb">install </span>grub2-pc grub2-pc-modules grub2-efi-x64-modules grub2-efi-aa64-modules grub2-efi-arm-modules grub2-efi-ia32-modules grub2-emu-modules grub2-emu-modules grub2-ppc64le-modules grub2-emu
</code></pre></div></div> <h3 id="installation">Installation</h3> <p>Install Cobbler</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cd</span> /usr/src/cobbler/cobbler-3.3.6
make <span class="nb">install
</span>systemctl restart httpd
</code></pre></div></div> <p>Reconfigure the <strong>cobblerd</strong> daemon as described in Cobbler’s <a href="https://cobbler.readthedocs.io/en/v3.3.6/installation-guide.html#id3">official docs</a>:</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sed</span> <span class="nt">-i</span> <span class="s2">"s,usr/bin/cobblerd,usr/local/bin/cobblerd,"</span> /etc/cobbler/cobblerd.service
<span class="nb">cp</span> /etc/cobbler/cobblerd.service /etc/systemd/system/.
systemctl daemon-reload
systemctl <span class="nb">enable </span>cobblerd
</code></pre></div></div> <h3 id="configuration">Configuration</h3> <p>Reconfigure the default Cobbler settings file to match the local server:</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sed</span> <span class="nt">-i</span> <span class="s2">"s/manage_dhcp: false/manage_dhcp: true/"</span> /etc/cobbler/settings.yaml
<span class="nb">sed</span> <span class="nt">-i</span> <span class="s2">"s/dhcp_v4: false/dhcp_v4: true/"</span> /etc/cobbler/settings.yaml
<span class="nb">sed</span> <span class="nt">-i</span> <span class="s2">"s/server: 127.0.0.1/server: 10.0.0.10/"</span> /etc/cobbler/settings.yaml
<span class="nb">sed</span> <span class="nt">-i</span> <span class="s2">"s/next_server_v4: 127.0.0.1/next_server_v4: 10.0.0.10/"</span> /etc/cobbler/settings.yaml
</code></pre></div></div> <p>Optionally, toggle some additional settings:</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sed</span> <span class="nt">-i</span> <span class="s2">"s/pxe_just_once: true/pxe_just_once: false/"</span> /etc/cobbler/settings.yaml
<span class="nb">sed</span> <span class="nt">-i</span> <span class="s2">"s/enable_ipxe: false/enable_ipxe: true/"</span> /etc/cobbler/settings.yaml
</code></pre></div></div> <p>Edit the subnet decaration in <strong>/etc/cobbler/dhcp.tempate</strong> to match the <strong>enp0s8</strong> interface:</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>subnet 10.0.0.0 netmask 255.255.255.0 <span class="o">{</span>
     option routers             10.0.0.1<span class="p">;</span>
     option domain-name-servers 10.0.0.1<span class="p">;</span>
     option subnet-mask         255.255.255.0<span class="p">;</span>
     range dynamic-bootp        10.0.0.100 10.0.0.199<span class="p">;</span>
</code></pre></div></div> <p>Cobbler should now be able to start up and run <code class="language-plaintext highlighter-rouge">sync</code> and <code class="language-plaintext highlighter-rouge">check</code> tasks without fatal errors:</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>systemctl restart cobblerd <span class="o">&amp;&amp;</span> <span class="nb">sleep </span>10
cobbler <span class="nb">sync</span> <span class="o">&amp;&amp;</span> <span class="nb">sleep </span>5
cobbler check
cobbler mkloaders
</code></pre></div></div> <p>Finally, pull the latest official Cobbler signatures</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>cobbler signature update
systemctl restart cobblerd <span class="o">&amp;&amp;</span> <span class="nb">sleep </span>5
cobbler <span class="nb">sync</span>
</code></pre></div></div> <p><strong>The Cobbler server is now ready to begin importing distros and deploying systems</strong></p> <h2 id="fedora-34-pxe-deployment">Fedora 34 PXE Deployment</h2> <p>Mount the Fedora 34 Server installation media and run the <code class="language-plaintext highlighter-rouge">cobbler import</code></p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">mkdir</span> /mnt/Fedora
mount <span class="nt">-t</span> iso9660 <span class="nt">-o</span> loop,ro /home/fedora/Downloads/Fedora-Server-dvd-x86_64-34-1.2.iso /mnt/Fedora
cobbler import <span class="nt">--name</span><span class="o">=</span>Fedora34 <span class="nt">--arch</span><span class="o">=</span>x86_64 <span class="nt">--path</span><span class="o">=</span>/mnt/Fedora
</code></pre></div></div> <p>Optionally, inspect the imported Distribution and child Profile:</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>cobbler distro report
cobbler profile report
</code></pre></div></div> <p>Create a new generic Fedora 34 kickstart file from Cobbler’s default <code class="language-plaintext highlighter-rouge">sample.ks</code> and configure the new Cobbler Profile to use it:</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cat</span> /var/lib/cobbler/templates/sample.ks | <span class="nb">grep</span> <span class="nt">-v</span> <span class="s2">"</span><span class="se">\-</span><span class="s2">-useshadow"</span> | <span class="nb">grep</span> <span class="nt">-v</span> ^install | <span class="nb">sed</span> <span class="s1">'s,selinux --disabled,selinux --permissive,'</span> | <span class="nb">sed</span> <span class="s1">'s,rootpw --iscrypted \$default_password_crypted,rootpw --iscrypted \$default_password_crypted\nuser --groups=wheel --name=fedora --password=\$default_password_crypted --iscrypted --gecos="fedora",'</span> | <span class="nb">tee</span> /var/lib/cobbler/templates/Fedora34.ks
cobbler profile edit <span class="nt">--name</span> Fedora34-x86_64 <span class="nt">--autoinstall</span> Fedora34.ks
</code></pre></div></div> <blockquote> <p>This new kickstart file has removed some options that cause fatal errors during installation, and also configures SELinux in <code class="language-plaintext highlighter-rouge">permissive</code> mode on the resulting system, as well as creating a new admin user named <code class="language-plaintext highlighter-rouge">fedora</code> which allows for immediate SSH access to the installed system.</p> </blockquote> <p>Now, create the <strong>PXE Client</strong> VM according to the specs described in the <strong>Environment</strong> section above and note down the vNIC’s MAC address.</p> <blockquote> <p>At this point, you may run the following commands on the Cobbler server, then start the <strong>PXE Client</strong> VM to test a manual installation over PXE.</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>systemctl restart cobblerd
cobbler <span class="nb">sync</span>
</code></pre></div> </div> </blockquote> <p>Finally, create a new Cobbler System, replacing <code class="language-plaintext highlighter-rouge">aa:bb:cc:dd:ee:ff</code> with the MAC Address of the <strong>PXE Client</strong> VM created above, and sync up Cobbler (leave out the <code class="language-plaintext highlighter-rouge">--static true</code> option to configure the PXE client to use DHCP for its IP configuration post-install; if using DHCP, you may omit all the command parameters following <code class="language-plaintext highlighter-rouge">--hostname fedora34</code>. More information on Cobbler autoinstall templates and kickstart files in the <strong>Tips &amp; Troubleshooting</strong> section below):</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>cobbler system add <span class="nt">--name</span> Fedora34 <span class="nt">--profile</span> Fedora34-x86_64 <span class="nt">--netboot-enabled</span> <span class="nb">true</span> <span class="nt">--hostname</span> fedora34 <span class="nt">--interface</span> enp0s3 <span class="nt">--static</span> <span class="nb">true</span> <span class="nt">--mac-address</span> <span class="s2">"aa:bb:cc:dd:ee:ff"</span> <span class="nt">--ip-address</span> 10.0.0.11 <span class="nt">--gateway</span> 10.0.0.1 <span class="nt">--netmask</span> 255.255.255.0 <span class="nt">--name-servers</span> <span class="s2">"10.0.0.1"</span>
systemctl restart cobblerd <span class="o">&amp;&amp;</span> <span class="nb">sleep </span>10
cobbler <span class="nb">sync</span>
</code></pre></div></div> <p>The <strong>PXE Client</strong> VM can now be powered on, and should automatically boot to PXE and install Fedora 34 to the VM HDD using the “Fedora34.ks” kickstart template created above.</p> <blockquote> <p>The newly installed system will have the password “cobbler” for both users “root” and “fedora” which is configurable through the <code class="language-plaintext highlighter-rouge">default_password_crypted</code> setting in <code class="language-plaintext highlighter-rouge">/etc/cobbler/settings.yaml</code> as well as the kickstart template file created above.</p> </blockquote> <h2 id="fedora-37-pxe-deployment">Fedora 37 PXE Deployment</h2> <p>Take similar steps as above to import and autoinstall Fedora 37 Server, being sure to use unique names for Cobbler Distros, Profiles, and Systems, as well as unique MAC addresses and IP addresses for Systems (unless configured differently in <code class="language-plaintext highlighter-rouge">/etc/cobbler/settings.yaml</code>)</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>mount <span class="nt">-t</span> iso9660 <span class="nt">-o</span> loop,ro /home/fedora/Downloads/Fedora-Server-dvd-x86_64-37-1.7.iso /mnt/Fedora
cobbler import <span class="nt">--name</span><span class="o">=</span>Fedora37 <span class="nt">--arch</span><span class="o">=</span>x86_64 <span class="nt">--path</span><span class="o">=</span>/mnt/Fedora
cobbler distro edit <span class="nt">--name</span> Fedora37-x86_64 <span class="nt">--kernel-options</span> <span class="s2">""</span>
<span class="nb">cat</span> /var/lib/cobbler/templates/sample.ks | <span class="nb">grep</span> <span class="nt">-v</span> <span class="s2">"</span><span class="se">\-</span><span class="s2">-useshadow"</span> | <span class="nb">grep</span> <span class="nt">-v</span> ^install | <span class="nb">sed</span> <span class="s1">'s,selinux --disabled,selinux --permissive,'</span> | <span class="nb">sed</span> <span class="s1">'s,rootpw --iscrypted \$default_password_crypted,rootpw --iscrypted \$default_password_crypted\nuser --groups=wheel --name=fedora --password=\$default_password_crypted --iscrypted --gecos="fedora",'</span> | <span class="nb">tee</span> /var/lib/cobbler/templates/Fedora37.ks
cobbler profile edit <span class="nt">--name</span> Fedora37-x86_64 <span class="nt">--autoinstall</span> Fedora37.ks
cobbler system add <span class="nt">--name</span> Fedora37 <span class="nt">--profile</span> Fedora37-x86_64 <span class="nt">--netboot-enabled</span> <span class="nb">true</span> <span class="nt">--hostname</span> fedora37 <span class="nt">--interface</span> enp0s3 <span class="nt">--static</span> <span class="nb">true</span> <span class="nt">--mac-address</span> <span class="s2">"aa:bb:cc:dd:ee:ff"</span> <span class="nt">--ip-address</span> 10.0.0.12 <span class="nt">--gateway</span> 10.0.0.1 <span class="nt">--netmask</span> 255.255.255.0 <span class="nt">--name-servers</span> <span class="s2">"10.0.0.1"</span>
systemctl restart cobblerd <span class="o">&amp;&amp;</span> <span class="nb">sleep </span>10
cobbler <span class="nb">sync</span>
</code></pre></div></div> <h2 id="security-hardening">Security Hardening</h2> <p>SELinux and firewall operations can seem daunting at first, especially with an application as complex as Cobbler, but the basic configurations here are relatively simple.</p> <blockquote> <p>It is possible to lock yourself out of your Linux server with SELinux, so now would be another good time to take a VM snapshot.</p> </blockquote> <h3 id="selinux">SELinux</h3> <p>SELinux should come enabled by default on a fresh Fedora 34 Server installation, and we set it to <code class="language-plaintext highlighter-rouge">permissive</code> in the <strong>Base Updates and Configs</strong> section above, but sometimes <code class="language-plaintext highlighter-rouge">selinux</code> can be disabled on the kernel command line</p> <p>If <code class="language-plaintext highlighter-rouge">selinux=0</code> is set in the <code class="language-plaintext highlighter-rouge">/proc/cmdline</code> file, then follow the instructions found in the <code class="language-plaintext highlighter-rouge">/etc/selinux/config</code> file for the <code class="language-plaintext highlighter-rouge">grubby</code> command to enable selinux at boot time. The kernel command line parameters will take precedence over the other configurations.</p> <p>If the output of the <code class="language-plaintext highlighter-rouge">getenforce</code> command is already <code class="language-plaintext highlighter-rouge">permissive</code> skip to the <strong>Enforcing SELinux</strong> section below; if it is <code class="language-plaintext highlighter-rouge">enforcing</code> skip to the <strong>Cobbler SELinux Config</strong> section.</p> <h4 id="enabling-selinux">Enabling SELinux</h4> <p>If SELinux was disabled at the kernel command line or in the <code class="language-plaintext highlighter-rouge">/etc/selinux/config</code> file, be sure to create the <code class="language-plaintext highlighter-rouge">.autorelabel</code> file at the root of the filesystem, and set SELINUX mode to <code class="language-plaintext highlighter-rouge">permissive</code> and <strong>NOT</strong> <code class="language-plaintext highlighter-rouge">enforcing</code> in the <code class="language-plaintext highlighter-rouge">/etc/selinux/config</code> file.</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sed</span> <span class="nt">-i</span> <span class="nt">-E</span> <span class="s2">"s/SELINUX=(disabled|enforcing)/SELINUX=permissive/"</span> /etc/selinux/config
<span class="nb">touch</span> /.autorelabel
</code></pre></div></div> <p>With selinux enabled at the kernel command line and set to permissive in “/etc/selinux/config” <strong>reboot the Fedora 34 Cobbler server</strong> and observe the filesystem relabel as the system boots.</p> <blockquote> <p>The local filesystem maintains no security context labels when SELinux is disbled, so rebooting directly to SELinux <code class="language-plaintext highlighter-rouge">enforcing</code> mode will prevent the system from booting properly.</p> </blockquote> <h4 id="enforcing-selinux">Enforcing SELinux</h4> <p>Change the active runtime and boot state/mode of SELinux to <code class="language-plaintext highlighter-rouge">enforcing</code>:</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>setenforce enforcing

<span class="nb">sed</span> <span class="nt">-i</span> <span class="s1">'s/SELINUX=permissive/SELINUX=enforcing/'</span> /etc/selinux/config
</code></pre></div></div> <h4 id="cobbler-selinux-config">Cobbler SELinux Config</h4> <p>WIth SELinux operating in <code class="language-plaintext highlighter-rouge">enforcing</code> mode, enable the necessary SELinux Booleans which will allow for basic operation of Cobbler:</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>setsebool <span class="nt">-P</span> cobbler_can_network_connect 1
setsebool <span class="nt">-P</span> httpd_can_network_connect_cobbler 1
setsebool <span class="nt">-P</span> httpd_serve_cobbler_files 1
</code></pre></div></div> <p>With SELinux enabled, some files generated/copied/moved by Cobbler will not retain the correct security context labels necessary for proper operation. Create a Cobbler <strong>sync-trigger</strong> to correct the SELinux labels upon any and all successful completions of a <code class="language-plaintext highlighter-rouge">cobbler sync</code> task.</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">echo</span> <span class="s1">'#!/bin/bash
restorecon -R /var/lib/tftpboot
restorecon -R /var/www/cobbler'</span> | <span class="nb">tee</span> /var/lib/cobbler/triggers/sync/post/zzz-selinux-restorecon

<span class="nb">chmod </span>u+x /var/lib/cobbler/triggers/sync/post/zzz-selinux-restorecon
</code></pre></div></div> <p>issue another <code class="language-plaintext highlighter-rouge">cobbler sync</code> to check for errors <em>(should show</em> <strong><em>*** TASK COMPLETE ***</em></strong><em>)</em>:</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>systemctl restart cobblerd <span class="o">&amp;&amp;</span> <span class="nb">sleep </span>10
cobbler <span class="nb">sync</span>
</code></pre></div></div> <blockquote> <p>Cobbler Triggers will run at different times depending on which directory they are placed in, and in alphabetical order within that directory. This sync-trigger specifically should typically be run after ALL sync tasks/triggers are completed</p> <blockquote> <p>Additionally, if there is an error with a <code class="language-plaintext highlighter-rouge">cobbler sync</code> task (trigger, or otherwise) before reaching this trigger, the sync task will terminate, and the trigger will not run, causing Cobbler files to not be relabeled appropriately… however, there are likely bigger issues at hand if the <code class="language-plaintext highlighter-rouge">cobbler sync</code> task is erroring out.</p> </blockquote> <p>More info on <a href="https://cobbler.readthedocs.io/en/v3.3.6/user-guide.html#triggers">Cobbler Triggers</a></p> </blockquote> <h3 id="network-security">Network Security</h3> <p>reduce network exposure with <strong>firewalld</strong> and secure service/daemon settings</p> <h4 id="firewalld">Firewalld</h4> <p>Firewalld is the default firewall installed on Fedora and most Red Hat distros, verify that it is enabled and running:</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>systemctl <span class="nb">enable</span> <span class="nt">--now</span> firewalld
</code></pre></div></div> <p>As described above, this Cobbler server has 2 ethernet NICs: <strong>enp0s3</strong> &amp; <strong>enp0s8</strong></p> <ul> <li> <p><strong>enp0s3</strong> being the <em>upstream</em> interface which can access the internet</p> </li> <li> <p><strong>enp0s8</strong> being the <em>downstream</em> interface which will server the PXE clients</p> </li> </ul> <p>Create a new <strong>firewalld</strong> <strong><em>zone</em></strong> which <strong>enp0s8</strong> will operate in:</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>firewall-cmd <span class="nt">--permanent</span> <span class="nt">--new-zone</span><span class="o">=</span>cobbler
firewall-cmd <span class="nt">--permanent</span> <span class="nt">--zone</span><span class="o">=</span>cobbler <span class="nt">--set-target</span><span class="o">=</span>DROP
firewall-cmd <span class="nt">--permanent</span> <span class="nt">--zone</span><span class="o">=</span>cobbler <span class="nt">--add-service</span><span class="o">=</span>ssh
firewall-cmd <span class="nt">--permanent</span> <span class="nt">--zone</span><span class="o">=</span>cobbler <span class="nt">--add-service</span><span class="o">=</span>tftp
firewall-cmd <span class="nt">--permanent</span> <span class="nt">--zone</span><span class="o">=</span>cobbler <span class="nt">--add-service</span><span class="o">=</span>http
firewall-cmd <span class="nt">--permanent</span> <span class="nt">--zone</span><span class="o">=</span>cobbler <span class="nt">--add-service</span><span class="o">=</span>https
firewall-cmd <span class="nt">--reload</span>
</code></pre></div></div> <blockquote> <p>Linux ISC DHCP server opens a raw UDP socket with the Linux kernel, bypassing the firewalld rules, so it is not necessary to allow the service/port. Be sure the resulting <code class="language-plaintext highlighter-rouge">/etc/dhcp/dhcpd.conf</code> file is only configured for the desired interface(s) for hosting DHCP.</p> <ul> <li><a href="https://serverfault.com/questions/191390/iptables-and-dhcp-questions/">serverfault</a> &amp; <a href="https://unix.stackexchange.com/questions/447440/ufw-iptables-not-blocking-dhcp-udp-port-67">stackexchange</a> sources.</li> </ul> </blockquote> <p>Reconfigure <strong>enp0s8</strong> to operate in the <strong>new firewalld zone</strong></p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>nmcli con mod enp0s8 connection.zone cobbler
</code></pre></div></div> <blockquote> <p>As defined above, this zone will NOT permit inbound ICMP traffic like ping</p> </blockquote> <p>For simplicity, <strong>enp0s3</strong> can be left in the <strong>default firewalld zone</strong> (verify the current active zones with <code class="language-plaintext highlighter-rouge">firewall-cmd --get-active-zones</code>)</p> <h4 id="service-confinement">Service confinement</h4> <p>On the topic of network security, we should also restrict our Cobbler services to only listen on the PXE server interface.</p> <ul> <li>configure HTTP to only listen on the PXE server interface:</li> </ul> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sed</span> <span class="nt">-i</span> <span class="s1">'s,^Listen.*,Listen 10.0.0.10:80,'</span> /etc/httpd/conf/httpd.conf
</code></pre></div></div> <ul> <li>Create a local systemd service for tftpd, modifiedying the original config to only listen on a specific IP address:</li> </ul> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>systemctl stop tftp.service
systemctl stop tftp.socket

<span class="nb">cp</span> /lib/systemd/system/tftp.service /etc/systemd/system/.
<span class="nb">sed</span> <span class="s1">'s,ListenDatagram=69,ListenDatagram=10.0.0.10:69,'</span> /lib/systemd/system/tftp.socket | <span class="nb">tee</span> /etc/systemd/system/tftp.socket
</code></pre></div></div> <ul> <li>now, reload the systemd configuration and restart services</li> </ul> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>systemctl daemon-reload
systemctl restart tftp httpd
</code></pre></div></div> <blockquote> <p>Feel free to comment with additional security hardening measures you would employ.</p> </blockquote> <h2 id="tips--troubleshooting">Tips &amp; Troubleshooting</h2> <ol> <li> <p>Cobbler’s <a href="https://cobbler.readthedocs.io/en/v3.3.6/installation-guide.html#id2">official docs</a> advise that installing and running Cobbler in a virtual environment is not possible, but I have had no issues related to virtualization.</p> </li> <li> <p>Some dependencies are missing from the official <a href="https://cobbler.readthedocs.io/en/v3.3.6/installation-guide.html#packages">Cobbler docs</a>. Have a look at the <a href="https://github.com/cobbler/cobbler/blob/v3.3.6/docker/rpms/Fedora_34/Fedora34.dockerfile">dockerfile</a> located in cobbler’s source code for a more complete list.</p> </li> <li> <p>It’s always a good idea to manually install the desired distro (Fedora 34 or 37 Server in the case of this guide) to the desired hardware (VirtualBox VM in this case) before attempting a network installation, to validate compatability.</p> <ul> <li> <p>Any Fedora installation, whether installed manually or automatically, should always contain the file <code class="language-plaintext highlighter-rouge">/root/anaconda-ks.cfg</code>, which is the kickstart file used to install that particular system.</p> </li> <li> <p>Depending on your deployed system of choice (Fedora 34 or 37 Server here) if you are having issues, you may want to familiarize yourself with the installation system environment.</p> <ol> <li> <p>With most distributions, while the installer is progressing and outputing logs to the monitor, you can press <strong>ALT+F2</strong> or <strong>ALT+F3</strong> or a similar key combo to access a privileged shell to troubleshoot.</p> </li> <li> <p>some commands you may want to try on the installer system include:</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code> dmesg
 <span class="nb">cat</span> /proc/cmdline
 less /var/log/syslog
 mount
 <span class="nb">ls</span> <span class="nt">-la</span>
 <span class="nb">ls</span> <span class="nt">-la</span> /tmp
 <span class="nb">ls</span> <span class="nt">-la</span> /
 cpuinfo
 lsblk
 lsmod
 <span class="nb">uname</span> <span class="nt">-a</span>
 <span class="nb">cat</span> /etc/os-release
 lsb_release <span class="nt">-a</span>
 <span class="nb">echo</span> <span class="nv">$SHELL</span>
</code></pre></div> </div> </li> </ol> </li> </ul> </li> <li> <p>The PXE client software that comes with VirtualBox VM firmware <strong>DOES NOT</strong> support HTTP as a download protocol, so it may be best to leave iPXE disabled in <code class="language-plaintext highlighter-rouge">/etc/cobbler/settings.yaml</code></p> <ul> <li>HTTP can always be utilized if you boot the PXE client from CD using the latest <a href="https://boot.ipxe.org/ipxe.iso">ipxe.iso</a></li> </ul> </li> <li> <p>By default, Cobbler’s DHCP server attempts to detect the PXE client’s boot firmware type in order to provide a BIOS or UEFI compatible bootloader <em>(BIOS: “grub.0” - UEFI: “grubx64.efi”)</em>. If using <strong>BIOS firmware</strong> for the PXE client VM, the Cobbler server’s DHCP service may not provide the right bootloader.</p> <ol> <li> <p>manually set the bootloader for a Cobbler Profile or System with the following command (the <code class="language-plaintext highlighter-rouge">filename</code> value is a path to the desired bootloader file relative to Cobbler’s tftp root directory: <code class="language-plaintext highlighter-rouge">/var/lib/tftpboot</code>)</p> <ul> <li><code class="language-plaintext highlighter-rouge">cobbler &lt;profile|system&gt; edit --name &lt;name&gt; --filename grub/grub.0</code></li> </ul> </li> <li> <p>The PXE client software that comes with VirtualBox VM <strong>BIOS &amp; EFI</strong> firmware <strong>DOES NOT</strong> support HTTP as a download protocol, so it may be best to leave iPXE disabled in <code class="language-plaintext highlighter-rouge">/etc/cobbler/settings.yaml</code></p> <ul> <li>HTTP can always be utilized if you boot the PXE client from CD using the latest <a href="https://boot.ipxe.org/ipxe.iso">ipxe.iso</a></li> </ul> </li> </ol> </li> <li> <p>The autoinstall template files “Fedora34.ks” “Fedora37.ks” &amp; “sample.ks” located in <code class="language-plaintext highlighter-rouge">/var/lib/cobbler/templates</code> are used to dynamically generate the specific kickstart files for either a Cobbler Profile or System at the time of installation</p> <ol> <li> <p>These templates use variables local to the Cobbler server to compose a specific configuration for the desired installation, but you can always craft an explicit kickstart file (without variables or snippets) manually and copy it to the same <code class="language-plaintext highlighter-rouge">/var/lib/cobbler/templates</code> directory and assign a Cobbler Profile or System to use that specific file with the command: <code class="language-plaintext highlighter-rouge">cobbler &lt;profile|system&gt; edit --name &lt;name&gt; --autoinstall &lt;file&gt;</code> <strong>just be sure to escape any dollar-signs ($) with back-slashes (\), otherwise they may be interpretted as variables by Cobbler</strong></p> </li> <li> <p>The final autoinstall files (<code class="language-plaintext highlighter-rouge">kickstart</code> for RHEL distros, <code class="language-plaintext highlighter-rouge">preseed</code> for Debian, <code class="language-plaintext highlighter-rouge">cloud-init</code> for Ubuntu, <code class="language-plaintext highlighter-rouge">autoyast</code> for OpenSUSE, <code class="language-plaintext highlighter-rouge">answerfile</code> for Windows as well as XCP-ng, although dissimilar schemas) are hosted over HTTP by Cobbler and, by default, assigned to a Cobbler System or Profile via the bootloader config (GRUB or pxelinux) under <code class="language-plaintext highlighter-rouge">/var/lib/tftpboot/grub/system</code> or <code class="language-plaintext highlighter-rouge">/var/lib/tftpboot/pxelinux.cfg</code> directories, or in <code class="language-plaintext highlighter-rouge">/var/lib/tftpboot/grub/x86_64_menu_items.cfg</code> file.</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code> curl http://localhost/cblr/svc/op/autoinstall/profile/Fedora34-x86_64
 curl http://localhost/cblr/svc/op/autoinstall/profile/Fedora37-x86_64
 curl http://localhost/cblr/svc/op/autoinstall/system/Fedora34
 curl http://localhost/cblr/svc/op/autoinstall/system/Fedora37
</code></pre></div> </div> </li> <li> <p>There are several template files and accompanying snippets that come default with Cobbler which you can look at if you have any questions about how the Cobbler templates <em>(Python Cheetah templates)</em> work. Located in <code class="language-plaintext highlighter-rouge">/var/lib/cobbler/templates</code> &amp; <code class="language-plaintext highlighter-rouge">/var/lib/cobbler/snippets</code></p> </li> </ol> </li> <li> <p>Optionally, remove the deprecated <strong><em>“tree”</em></strong> option from the Cobbler Distro <code class="language-plaintext highlighter-rouge">kernel-options</code> which can be used in the kickstart file instead. This option will be ignored anyway by the installer.</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code> cobbler distro edit <span class="nt">--name</span> Fedora34-x86_64 <span class="nt">--kernel-options</span>
</code></pre></div> </div> <ul> <li>cobbler still appropriately sets the “inst.repo” kernel-option in the GRUB or PXE kernel-options. This is likey managed by the Cobbler Profile’s <strong><em>“tree”</em></strong> variable <em>(seen with <code class="language-plaintext highlighter-rouge">cobbler profile report</code> above)</em> or the Profile’s config file in <code class="language-plaintext highlighter-rouge">/var/www/cobbler/distro_mirror/config</code> directory</li> </ul> </li> </ol> <p><strong>here are some helpful troubleshooting commands on the Cobbler server</strong></p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>man cobbler
man dhcpd
man tftp
man httpd
man selinux
man firewalld

cobbler distro report
cobbler profile report
cobbler system report

cobbler <span class="nt">--help</span>
cobbler distro edit <span class="nt">--help</span>
cobbler profile edit <span class="nt">--help</span>
cobbler system edit <span class="nt">--help</span>

systemctl status cobblerd
systemctl status dhcpd
systemctl status tftp
systemctl status httpd

journalctl <span class="nt">-eu</span> cobblerd
journalctl <span class="nt">-eu</span> dhcpd
journalctl <span class="nt">-eu</span> tftp
journalctl <span class="nt">-eu</span> httpd

<span class="nb">ls</span> /etc/cobbler
<span class="nb">cat</span> /etc/cobbler/settings.yaml
<span class="nb">ls</span> /var/lib/cobbler
<span class="nb">ls</span> /var/www/cobbler
<span class="nb">ls</span> /var/lib/tftpboot/grub/system
<span class="nb">ls</span> /var/lib/tftpboot/pxelinux.cfg

<span class="nb">cat</span> /var/log/httpd/error_log
<span class="nb">cat</span> /var/log/audit/audit.log | <span class="nb">grep </span>AVC

<span class="nb">cat</span> /etc/dhcp/dhcpd.conf

<span class="nb">cat</span> /var/lib/tftpboot/grub/x86_64_menu_items.cfg
<span class="nb">cat</span> /var/lib/tftpboot/pxelinux.cfg/default

tftp 10.0.0.10
tftp 127.0.0.1

<span class="nb">cat</span> /etc/httpd/conf/httpd.conf
<span class="nb">cat</span> /etc/httpd/conf.d/cobbler.conf
</code></pre></div></div>]]></content><author><name>Sus-Admin</name></author><category term="cobbler"/><summary type="html"><![CDATA[This guide is intended to accompany and extend the official Cobbler Installation and Quick Start guides.]]></summary></entry></feed>